name: CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Define env
      run: |
        echo "::set-env name=CI_COMMIT_SHORT_SHA::${GITHUB_SHA}"
        echo "::set-env name=PHP_IMAGE::registry.gitlab.com/flasher/flasher/picblog_php:${CI_COMMIT_SHORT_SHA}"
        echo "::set-env name=NGINX_IMAGE::registry.gitlab.com/flasher/flasher/picblog_nginx:${CI_COMMIT_SHORT_SHA}"

    - name: Print docker-compose version
      run: docker-compose version

    - name: Login to Github repository
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: agravelot
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to GitLab repository
      uses: azure/docker-login@v1
      with:
        login-server: registry.gitlab.com
        username: ${{ secrets.CI_REGISTRY_USER }}
        password: ${{ secrets.CI_REGISTRY_PASSWORD }}

    - name: Create required docker network
      run: |
        docker network create nginx-proxy
        docker network create database-network

#    - name: Docker Lint
#      uses: luke142367/Docker-Lint-Action@v1.0.0
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        TARGET: Dockerfile
#      with:
#        target: Dockerfile

    - name: Build the Docker stack
      run: docker-compose build

    - name: Push images to registry
      run: docker-compose push php nginx

    - name: Fetch php dev dependencies
      run: |
        docker build -t vendor_dev -f docker/vendor-dev/Dockerfile .
        export VENDOR_DOCKER=$(docker run -d -t vendor_dev tail -f /dev/null)
        docker cp -a $VENDOR_DOCKER:/app/vendor .

    - name: Run php test suites
      run: |
        chmod +x docker/*.sh
        bash -c 'cd docker/ && ./generate_env.sh staging'
        docker-compose -f docker-compose.yml -f docker-compose.local.yml up -d
        docker-compose stop queue scheduler nginx
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -T cache redis-cli config set maxmemory 41943040
        docker cp vendor $(docker-compose ps -q php):/var/www/html/
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -T php php artisan db:wait-connection
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -T php php artisan passport:keys
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -T php vendor/bin/phpunit --coverage-text --colors=never

    - name: Run php lint
      run: |
        chmod +x docker/*.sh
        bash -c 'cd docker/ && ./generate_env.sh staging'
        docker-compose -f docker-compose.yml -f docker-compose.local.yml up -d
        docker-compose stop queue scheduler nginx
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -T cache redis-cli config set maxmemory 41943040
        docker cp vendor $(docker-compose ps -q php):/var/www/html/
        docker-compose -f docker-compose.yml -f docker-compose.local.yml exec -e APP_ENV=testing -T php php vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Deploy to staging
      with:
        CI_STAGING_SSH_PRIVATE_KEY: ${{ secrets.CI_STAGING_SSH_PRIVATE_KEY }}
      run: |
        sudo apt install -y openssh-client socat
        eval $(ssh-agent -s)
        mkdir -p ~/.ssh
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        chmod +x docker/*.sh
        bash -c 'cd docker/ && ./generate_env.sh staging'
        bash -c 'cd docker/ && ./deploy.sh staging'
