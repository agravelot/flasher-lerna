// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTelescopeEntry(db *gorm.DB) telescopeEntry {
	_telescopeEntry := telescopeEntry{}

	_telescopeEntry.telescopeEntryDo.UseDB(db)
	_telescopeEntry.telescopeEntryDo.UseModel(&model.TelescopeEntry{})

	tableName := _telescopeEntry.telescopeEntryDo.TableName()
	_telescopeEntry.ALL = field.NewField(tableName, "*")
	_telescopeEntry.Sequence = field.NewString(tableName, "sequence")
	_telescopeEntry.UUID = field.NewString(tableName, "uuid")
	_telescopeEntry.BatchID = field.NewString(tableName, "batch_id")
	_telescopeEntry.FamilyHash = field.NewString(tableName, "family_hash")
	_telescopeEntry.ShouldDisplayOnIndex = field.NewString(tableName, "should_display_on_index")
	_telescopeEntry.Type = field.NewString(tableName, "type")
	_telescopeEntry.Content = field.NewString(tableName, "content")
	_telescopeEntry.CreatedAt = field.NewTime(tableName, "created_at")

	_telescopeEntry.fillFieldMap()

	return _telescopeEntry
}

type telescopeEntry struct {
	telescopeEntryDo telescopeEntryDo

	ALL                  field.Field
	Sequence             field.String
	UUID                 field.String
	BatchID              field.String
	FamilyHash           field.String
	ShouldDisplayOnIndex field.String
	Type                 field.String
	Content              field.String
	CreatedAt            field.Time

	fieldMap map[string]field.Expr
}

func (t telescopeEntry) Table(newTableName string) *telescopeEntry {
	t.telescopeEntryDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t telescopeEntry) As(alias string) *telescopeEntry {
	t.telescopeEntryDo.DO = *(t.telescopeEntryDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *telescopeEntry) updateTableName(table string) *telescopeEntry {
	t.ALL = field.NewField(table, "*")
	t.Sequence = field.NewString(table, "sequence")
	t.UUID = field.NewString(table, "uuid")
	t.BatchID = field.NewString(table, "batch_id")
	t.FamilyHash = field.NewString(table, "family_hash")
	t.ShouldDisplayOnIndex = field.NewString(table, "should_display_on_index")
	t.Type = field.NewString(table, "type")
	t.Content = field.NewString(table, "content")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *telescopeEntry) WithContext(ctx context.Context) *telescopeEntryDo {
	return t.telescopeEntryDo.WithContext(ctx)
}

func (t telescopeEntry) TableName() string { return t.telescopeEntryDo.TableName() }

func (t *telescopeEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *telescopeEntry) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["sequence"] = t.Sequence
	t.fieldMap["uuid"] = t.UUID
	t.fieldMap["batch_id"] = t.BatchID
	t.fieldMap["family_hash"] = t.FamilyHash
	t.fieldMap["should_display_on_index"] = t.ShouldDisplayOnIndex
	t.fieldMap["type"] = t.Type
	t.fieldMap["content"] = t.Content
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t telescopeEntry) clone(db *gorm.DB) telescopeEntry {
	t.telescopeEntryDo.ReplaceDB(db)
	return t
}

type telescopeEntryDo struct{ gen.DO }

func (t telescopeEntryDo) Debug() *telescopeEntryDo {
	return t.withDO(t.DO.Debug())
}

func (t telescopeEntryDo) WithContext(ctx context.Context) *telescopeEntryDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t telescopeEntryDo) Clauses(conds ...clause.Expression) *telescopeEntryDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t telescopeEntryDo) Not(conds ...gen.Condition) *telescopeEntryDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t telescopeEntryDo) Or(conds ...gen.Condition) *telescopeEntryDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t telescopeEntryDo) Select(conds ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t telescopeEntryDo) Where(conds ...gen.Condition) *telescopeEntryDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t telescopeEntryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *telescopeEntryDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t telescopeEntryDo) Order(conds ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t telescopeEntryDo) Distinct(cols ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t telescopeEntryDo) Omit(cols ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t telescopeEntryDo) Join(table schema.Tabler, on ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t telescopeEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t telescopeEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t telescopeEntryDo) Group(cols ...field.Expr) *telescopeEntryDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t telescopeEntryDo) Having(conds ...gen.Condition) *telescopeEntryDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t telescopeEntryDo) Limit(limit int) *telescopeEntryDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t telescopeEntryDo) Offset(offset int) *telescopeEntryDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t telescopeEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *telescopeEntryDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t telescopeEntryDo) Unscoped() *telescopeEntryDo {
	return t.withDO(t.DO.Unscoped())
}

func (t telescopeEntryDo) Create(values ...*model.TelescopeEntry) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t telescopeEntryDo) CreateInBatches(values []*model.TelescopeEntry, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t telescopeEntryDo) Save(values ...*model.TelescopeEntry) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t telescopeEntryDo) First() (*model.TelescopeEntry, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeEntry), nil
	}
}

func (t telescopeEntryDo) Take() (*model.TelescopeEntry, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeEntry), nil
	}
}

func (t telescopeEntryDo) Last() (*model.TelescopeEntry, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeEntry), nil
	}
}

func (t telescopeEntryDo) Find() ([]*model.TelescopeEntry, error) {
	result, err := t.DO.Find()
	return result.([]*model.TelescopeEntry), err
}

func (t telescopeEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelescopeEntry, err error) {
	buf := make([]*model.TelescopeEntry, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t telescopeEntryDo) FindInBatches(result *[]*model.TelescopeEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t telescopeEntryDo) Attrs(attrs ...field.AssignExpr) *telescopeEntryDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t telescopeEntryDo) Assign(attrs ...field.AssignExpr) *telescopeEntryDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t telescopeEntryDo) Joins(field field.RelationField) *telescopeEntryDo {
	return t.withDO(t.DO.Joins(field))
}

func (t telescopeEntryDo) Preload(field field.RelationField) *telescopeEntryDo {
	return t.withDO(t.DO.Preload(field))
}

func (t telescopeEntryDo) FirstOrInit() (*model.TelescopeEntry, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeEntry), nil
	}
}

func (t telescopeEntryDo) FirstOrCreate() (*model.TelescopeEntry, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeEntry), nil
	}
}

func (t telescopeEntryDo) FindByPage(offset int, limit int) (result []*model.TelescopeEntry, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Count()
	return
}

func (t telescopeEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *telescopeEntryDo) withDO(do gen.Dao) *telescopeEntryDo {
	t.DO = *do.(*gen.DO)
	return t
}
