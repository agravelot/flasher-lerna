// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newAlbumCosplayer(db *gorm.DB) albumCosplayer {
	_albumCosplayer := albumCosplayer{}

	_albumCosplayer.albumCosplayerDo.UseDB(db)
	_albumCosplayer.albumCosplayerDo.UseModel(&model.AlbumCosplayer{})

	tableName := _albumCosplayer.albumCosplayerDo.TableName()
	_albumCosplayer.ALL = field.NewField(tableName, "*")
	_albumCosplayer.ID = field.NewString(tableName, "id")
	_albumCosplayer.AlbumID = field.NewString(tableName, "album_id")
	_albumCosplayer.CosplayerID = field.NewString(tableName, "cosplayer_id")
	_albumCosplayer.CreatedAt = field.NewTime(tableName, "created_at")
	_albumCosplayer.UpdatedAt = field.NewTime(tableName, "updated_at")

	_albumCosplayer.fillFieldMap()

	return _albumCosplayer
}

type albumCosplayer struct {
	albumCosplayerDo albumCosplayerDo

	ALL         field.Field
	ID          field.String
	AlbumID     field.String
	CosplayerID field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a albumCosplayer) Table(newTableName string) *albumCosplayer {
	a.albumCosplayerDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a albumCosplayer) As(alias string) *albumCosplayer {
	a.albumCosplayerDo.DO = *(a.albumCosplayerDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *albumCosplayer) updateTableName(table string) *albumCosplayer {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewString(table, "id")
	a.AlbumID = field.NewString(table, "album_id")
	a.CosplayerID = field.NewString(table, "cosplayer_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *albumCosplayer) WithContext(ctx context.Context) *albumCosplayerDo {
	return a.albumCosplayerDo.WithContext(ctx)
}

func (a albumCosplayer) TableName() string { return a.albumCosplayerDo.TableName() }

func (a *albumCosplayer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *albumCosplayer) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["album_id"] = a.AlbumID
	a.fieldMap["cosplayer_id"] = a.CosplayerID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a albumCosplayer) clone(db *gorm.DB) albumCosplayer {
	a.albumCosplayerDo.ReplaceDB(db)
	return a
}

type albumCosplayerDo struct{ gen.DO }

func (a albumCosplayerDo) Debug() *albumCosplayerDo {
	return a.withDO(a.DO.Debug())
}

func (a albumCosplayerDo) WithContext(ctx context.Context) *albumCosplayerDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a albumCosplayerDo) Clauses(conds ...clause.Expression) *albumCosplayerDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a albumCosplayerDo) Not(conds ...gen.Condition) *albumCosplayerDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a albumCosplayerDo) Or(conds ...gen.Condition) *albumCosplayerDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a albumCosplayerDo) Select(conds ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a albumCosplayerDo) Where(conds ...gen.Condition) *albumCosplayerDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a albumCosplayerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *albumCosplayerDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a albumCosplayerDo) Order(conds ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a albumCosplayerDo) Distinct(cols ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a albumCosplayerDo) Omit(cols ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a albumCosplayerDo) Join(table schema.Tabler, on ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a albumCosplayerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a albumCosplayerDo) RightJoin(table schema.Tabler, on ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a albumCosplayerDo) Group(cols ...field.Expr) *albumCosplayerDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a albumCosplayerDo) Having(conds ...gen.Condition) *albumCosplayerDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a albumCosplayerDo) Limit(limit int) *albumCosplayerDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a albumCosplayerDo) Offset(offset int) *albumCosplayerDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a albumCosplayerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *albumCosplayerDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a albumCosplayerDo) Unscoped() *albumCosplayerDo {
	return a.withDO(a.DO.Unscoped())
}

func (a albumCosplayerDo) Create(values ...*model.AlbumCosplayer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a albumCosplayerDo) CreateInBatches(values []*model.AlbumCosplayer, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a albumCosplayerDo) Save(values ...*model.AlbumCosplayer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a albumCosplayerDo) First() (*model.AlbumCosplayer, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlbumCosplayer), nil
	}
}

func (a albumCosplayerDo) Take() (*model.AlbumCosplayer, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlbumCosplayer), nil
	}
}

func (a albumCosplayerDo) Last() (*model.AlbumCosplayer, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlbumCosplayer), nil
	}
}

func (a albumCosplayerDo) Find() ([]*model.AlbumCosplayer, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlbumCosplayer), err
}

func (a albumCosplayerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlbumCosplayer, err error) {
	buf := make([]*model.AlbumCosplayer, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a albumCosplayerDo) FindInBatches(result *[]*model.AlbumCosplayer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a albumCosplayerDo) Attrs(attrs ...field.AssignExpr) *albumCosplayerDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a albumCosplayerDo) Assign(attrs ...field.AssignExpr) *albumCosplayerDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a albumCosplayerDo) Joins(field field.RelationField) *albumCosplayerDo {
	return a.withDO(a.DO.Joins(field))
}

func (a albumCosplayerDo) Preload(field field.RelationField) *albumCosplayerDo {
	return a.withDO(a.DO.Preload(field))
}

func (a albumCosplayerDo) FirstOrInit() (*model.AlbumCosplayer, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlbumCosplayer), nil
	}
}

func (a albumCosplayerDo) FirstOrCreate() (*model.AlbumCosplayer, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlbumCosplayer), nil
	}
}

func (a albumCosplayerDo) FindByPage(offset int, limit int) (result []*model.AlbumCosplayer, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Count()
	return
}

func (a albumCosplayerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *albumCosplayerDo) withDO(do gen.Dao) *albumCosplayerDo {
	a.DO = *do.(*gen.DO)
	return a
}
