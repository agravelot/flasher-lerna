// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newMigration(db *gorm.DB) migration {
	_migration := migration{}

	_migration.migrationDo.UseDB(db)
	_migration.migrationDo.UseModel(&model.Migration{})

	tableName := _migration.migrationDo.TableName()
	_migration.ALL = field.NewField(tableName, "*")
	_migration.ID = field.NewString(tableName, "id")
	_migration.Migration = field.NewString(tableName, "migration")
	_migration.Batch = field.NewString(tableName, "batch")

	_migration.fillFieldMap()

	return _migration
}

type migration struct {
	migrationDo migrationDo

	ALL       field.Field
	ID        field.String
	Migration field.String
	Batch     field.String

	fieldMap map[string]field.Expr
}

func (m migration) Table(newTableName string) *migration {
	m.migrationDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m migration) As(alias string) *migration {
	m.migrationDo.DO = *(m.migrationDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *migration) updateTableName(table string) *migration {
	m.ALL = field.NewField(table, "*")
	m.ID = field.NewString(table, "id")
	m.Migration = field.NewString(table, "migration")
	m.Batch = field.NewString(table, "batch")

	m.fillFieldMap()

	return m
}

func (m *migration) WithContext(ctx context.Context) *migrationDo {
	return m.migrationDo.WithContext(ctx)
}

func (m migration) TableName() string { return m.migrationDo.TableName() }

func (m *migration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *migration) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["migration"] = m.Migration
	m.fieldMap["batch"] = m.Batch
}

func (m migration) clone(db *gorm.DB) migration {
	m.migrationDo.ReplaceDB(db)
	return m
}

type migrationDo struct{ gen.DO }

func (m migrationDo) Debug() *migrationDo {
	return m.withDO(m.DO.Debug())
}

func (m migrationDo) WithContext(ctx context.Context) *migrationDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m migrationDo) Clauses(conds ...clause.Expression) *migrationDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m migrationDo) Not(conds ...gen.Condition) *migrationDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m migrationDo) Or(conds ...gen.Condition) *migrationDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m migrationDo) Select(conds ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m migrationDo) Where(conds ...gen.Condition) *migrationDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m migrationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *migrationDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m migrationDo) Order(conds ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m migrationDo) Distinct(cols ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m migrationDo) Omit(cols ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m migrationDo) Join(table schema.Tabler, on ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m migrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *migrationDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m migrationDo) RightJoin(table schema.Tabler, on ...field.Expr) *migrationDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m migrationDo) Group(cols ...field.Expr) *migrationDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m migrationDo) Having(conds ...gen.Condition) *migrationDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m migrationDo) Limit(limit int) *migrationDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m migrationDo) Offset(offset int) *migrationDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m migrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *migrationDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m migrationDo) Unscoped() *migrationDo {
	return m.withDO(m.DO.Unscoped())
}

func (m migrationDo) Create(values ...*model.Migration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m migrationDo) CreateInBatches(values []*model.Migration, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m migrationDo) Save(values ...*model.Migration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m migrationDo) First() (*model.Migration, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Migration), nil
	}
}

func (m migrationDo) Take() (*model.Migration, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Migration), nil
	}
}

func (m migrationDo) Last() (*model.Migration, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Migration), nil
	}
}

func (m migrationDo) Find() ([]*model.Migration, error) {
	result, err := m.DO.Find()
	return result.([]*model.Migration), err
}

func (m migrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Migration, err error) {
	buf := make([]*model.Migration, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m migrationDo) FindInBatches(result *[]*model.Migration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m migrationDo) Attrs(attrs ...field.AssignExpr) *migrationDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m migrationDo) Assign(attrs ...field.AssignExpr) *migrationDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m migrationDo) Joins(field field.RelationField) *migrationDo {
	return m.withDO(m.DO.Joins(field))
}

func (m migrationDo) Preload(field field.RelationField) *migrationDo {
	return m.withDO(m.DO.Preload(field))
}

func (m migrationDo) FirstOrInit() (*model.Migration, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Migration), nil
	}
}

func (m migrationDo) FirstOrCreate() (*model.Migration, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Migration), nil
	}
}

func (m migrationDo) FindByPage(offset int, limit int) (result []*model.Migration, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Count()
	return
}

func (m migrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *migrationDo) withDO(do gen.Dao) *migrationDo {
	m.DO = *do.(*gen.DO)
	return m
}
