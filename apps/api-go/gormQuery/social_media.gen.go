// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newSocialMedium(db *gorm.DB) socialMedium {
	_socialMedium := socialMedium{}

	_socialMedium.socialMediumDo.UseDB(db)
	_socialMedium.socialMediumDo.UseModel(&model.SocialMedium{})

	tableName := _socialMedium.socialMediumDo.TableName()
	_socialMedium.ALL = field.NewField(tableName, "*")
	_socialMedium.ID = field.NewString(tableName, "id")
	_socialMedium.Name = field.NewString(tableName, "name")
	_socialMedium.URL = field.NewString(tableName, "url")
	_socialMedium.Icon = field.NewString(tableName, "icon")
	_socialMedium.Color = field.NewString(tableName, "color")
	_socialMedium.Active = field.NewString(tableName, "active")
	_socialMedium.CreatedAt = field.NewTime(tableName, "created_at")
	_socialMedium.UpdatedAt = field.NewTime(tableName, "updated_at")

	_socialMedium.fillFieldMap()

	return _socialMedium
}

type socialMedium struct {
	socialMediumDo socialMediumDo

	ALL       field.Field
	ID        field.String
	Name      field.String
	URL       field.String
	Icon      field.String
	Color     field.String
	Active    field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s socialMedium) Table(newTableName string) *socialMedium {
	s.socialMediumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s socialMedium) As(alias string) *socialMedium {
	s.socialMediumDo.DO = *(s.socialMediumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *socialMedium) updateTableName(table string) *socialMedium {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.URL = field.NewString(table, "url")
	s.Icon = field.NewString(table, "icon")
	s.Color = field.NewString(table, "color")
	s.Active = field.NewString(table, "active")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *socialMedium) WithContext(ctx context.Context) *socialMediumDo {
	return s.socialMediumDo.WithContext(ctx)
}

func (s socialMedium) TableName() string { return s.socialMediumDo.TableName() }

func (s *socialMedium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *socialMedium) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["url"] = s.URL
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["color"] = s.Color
	s.fieldMap["active"] = s.Active
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s socialMedium) clone(db *gorm.DB) socialMedium {
	s.socialMediumDo.ReplaceDB(db)
	return s
}

type socialMediumDo struct{ gen.DO }

func (s socialMediumDo) Debug() *socialMediumDo {
	return s.withDO(s.DO.Debug())
}

func (s socialMediumDo) WithContext(ctx context.Context) *socialMediumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s socialMediumDo) Clauses(conds ...clause.Expression) *socialMediumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s socialMediumDo) Not(conds ...gen.Condition) *socialMediumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s socialMediumDo) Or(conds ...gen.Condition) *socialMediumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s socialMediumDo) Select(conds ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s socialMediumDo) Where(conds ...gen.Condition) *socialMediumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s socialMediumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *socialMediumDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s socialMediumDo) Order(conds ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s socialMediumDo) Distinct(cols ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s socialMediumDo) Omit(cols ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s socialMediumDo) Join(table schema.Tabler, on ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s socialMediumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s socialMediumDo) RightJoin(table schema.Tabler, on ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s socialMediumDo) Group(cols ...field.Expr) *socialMediumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s socialMediumDo) Having(conds ...gen.Condition) *socialMediumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s socialMediumDo) Limit(limit int) *socialMediumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s socialMediumDo) Offset(offset int) *socialMediumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s socialMediumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *socialMediumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s socialMediumDo) Unscoped() *socialMediumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s socialMediumDo) Create(values ...*model.SocialMedium) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s socialMediumDo) CreateInBatches(values []*model.SocialMedium, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s socialMediumDo) Save(values ...*model.SocialMedium) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s socialMediumDo) First() (*model.SocialMedium, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialMedium), nil
	}
}

func (s socialMediumDo) Take() (*model.SocialMedium, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialMedium), nil
	}
}

func (s socialMediumDo) Last() (*model.SocialMedium, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialMedium), nil
	}
}

func (s socialMediumDo) Find() ([]*model.SocialMedium, error) {
	result, err := s.DO.Find()
	return result.([]*model.SocialMedium), err
}

func (s socialMediumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SocialMedium, err error) {
	buf := make([]*model.SocialMedium, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s socialMediumDo) FindInBatches(result *[]*model.SocialMedium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s socialMediumDo) Attrs(attrs ...field.AssignExpr) *socialMediumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s socialMediumDo) Assign(attrs ...field.AssignExpr) *socialMediumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s socialMediumDo) Joins(field field.RelationField) *socialMediumDo {
	return s.withDO(s.DO.Joins(field))
}

func (s socialMediumDo) Preload(field field.RelationField) *socialMediumDo {
	return s.withDO(s.DO.Preload(field))
}

func (s socialMediumDo) FirstOrInit() (*model.SocialMedium, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialMedium), nil
	}
}

func (s socialMediumDo) FirstOrCreate() (*model.SocialMedium, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SocialMedium), nil
	}
}

func (s socialMediumDo) FindByPage(offset int, limit int) (result []*model.SocialMedium, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Count()
	return
}

func (s socialMediumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *socialMediumDo) withDO(do gen.Dao) *socialMediumDo {
	s.DO = *do.(*gen.DO)
	return s
}
