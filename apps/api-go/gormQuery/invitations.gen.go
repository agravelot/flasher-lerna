// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newInvitation(db *gorm.DB) invitation {
	_invitation := invitation{}

	_invitation.invitationDo.UseDB(db)
	_invitation.invitationDo.UseModel(&model.Invitation{})

	tableName := _invitation.invitationDo.TableName()
	_invitation.ALL = field.NewField(tableName, "*")
	_invitation.OldID = field.NewString(tableName, "old_id")
	_invitation.CosplayerID = field.NewString(tableName, "cosplayer_id")
	_invitation.Email = field.NewString(tableName, "email")
	_invitation.Message = field.NewString(tableName, "message")
	_invitation.CreatedAt = field.NewTime(tableName, "created_at")
	_invitation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invitation.Token = field.NewString(tableName, "token")
	_invitation.ConfirmedAt = field.NewTime(tableName, "confirmed_at")
	_invitation.ID = field.NewString(tableName, "id")

	_invitation.fillFieldMap()

	return _invitation
}

type invitation struct {
	invitationDo invitationDo

	ALL         field.Field
	OldID       field.String
	CosplayerID field.String
	Email       field.String
	Message     field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Token       field.String
	ConfirmedAt field.Time
	ID          field.String

	fieldMap map[string]field.Expr
}

func (i invitation) Table(newTableName string) *invitation {
	i.invitationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invitation) As(alias string) *invitation {
	i.invitationDo.DO = *(i.invitationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invitation) updateTableName(table string) *invitation {
	i.ALL = field.NewField(table, "*")
	i.OldID = field.NewString(table, "old_id")
	i.CosplayerID = field.NewString(table, "cosplayer_id")
	i.Email = field.NewString(table, "email")
	i.Message = field.NewString(table, "message")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.Token = field.NewString(table, "token")
	i.ConfirmedAt = field.NewTime(table, "confirmed_at")
	i.ID = field.NewString(table, "id")

	i.fillFieldMap()

	return i
}

func (i *invitation) WithContext(ctx context.Context) *invitationDo {
	return i.invitationDo.WithContext(ctx)
}

func (i invitation) TableName() string { return i.invitationDo.TableName() }

func (i *invitation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invitation) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["old_id"] = i.OldID
	i.fieldMap["cosplayer_id"] = i.CosplayerID
	i.fieldMap["email"] = i.Email
	i.fieldMap["message"] = i.Message
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["token"] = i.Token
	i.fieldMap["confirmed_at"] = i.ConfirmedAt
	i.fieldMap["id"] = i.ID
}

func (i invitation) clone(db *gorm.DB) invitation {
	i.invitationDo.ReplaceDB(db)
	return i
}

type invitationDo struct{ gen.DO }

func (i invitationDo) Debug() *invitationDo {
	return i.withDO(i.DO.Debug())
}

func (i invitationDo) WithContext(ctx context.Context) *invitationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invitationDo) Clauses(conds ...clause.Expression) *invitationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invitationDo) Not(conds ...gen.Condition) *invitationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invitationDo) Or(conds ...gen.Condition) *invitationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invitationDo) Select(conds ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invitationDo) Where(conds ...gen.Condition) *invitationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invitationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *invitationDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i invitationDo) Order(conds ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invitationDo) Distinct(cols ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invitationDo) Omit(cols ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invitationDo) Join(table schema.Tabler, on ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invitationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invitationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invitationDo) RightJoin(table schema.Tabler, on ...field.Expr) *invitationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invitationDo) Group(cols ...field.Expr) *invitationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invitationDo) Having(conds ...gen.Condition) *invitationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invitationDo) Limit(limit int) *invitationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invitationDo) Offset(offset int) *invitationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invitationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invitationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invitationDo) Unscoped() *invitationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invitationDo) Create(values ...*model.Invitation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invitationDo) CreateInBatches(values []*model.Invitation, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invitationDo) Save(values ...*model.Invitation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invitationDo) First() (*model.Invitation, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invitation), nil
	}
}

func (i invitationDo) Take() (*model.Invitation, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invitation), nil
	}
}

func (i invitationDo) Last() (*model.Invitation, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invitation), nil
	}
}

func (i invitationDo) Find() ([]*model.Invitation, error) {
	result, err := i.DO.Find()
	return result.([]*model.Invitation), err
}

func (i invitationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Invitation, err error) {
	buf := make([]*model.Invitation, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invitationDo) FindInBatches(result *[]*model.Invitation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invitationDo) Attrs(attrs ...field.AssignExpr) *invitationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invitationDo) Assign(attrs ...field.AssignExpr) *invitationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invitationDo) Joins(field field.RelationField) *invitationDo {
	return i.withDO(i.DO.Joins(field))
}

func (i invitationDo) Preload(field field.RelationField) *invitationDo {
	return i.withDO(i.DO.Preload(field))
}

func (i invitationDo) FirstOrInit() (*model.Invitation, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invitation), nil
	}
}

func (i invitationDo) FirstOrCreate() (*model.Invitation, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invitation), nil
	}
}

func (i invitationDo) FindByPage(offset int, limit int) (result []*model.Invitation, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Count()
	return
}

func (i invitationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i *invitationDo) withDO(do gen.Dao) *invitationDo {
	i.DO = *do.(*gen.DO)
	return i
}
