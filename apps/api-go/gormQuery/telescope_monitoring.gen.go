// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTelescopeMonitoring(db *gorm.DB) telescopeMonitoring {
	_telescopeMonitoring := telescopeMonitoring{}

	_telescopeMonitoring.telescopeMonitoringDo.UseDB(db)
	_telescopeMonitoring.telescopeMonitoringDo.UseModel(&model.TelescopeMonitoring{})

	tableName := _telescopeMonitoring.telescopeMonitoringDo.TableName()
	_telescopeMonitoring.ALL = field.NewField(tableName, "*")
	_telescopeMonitoring.Tag = field.NewString(tableName, "tag")

	_telescopeMonitoring.fillFieldMap()

	return _telescopeMonitoring
}

type telescopeMonitoring struct {
	telescopeMonitoringDo telescopeMonitoringDo

	ALL field.Field
	Tag field.String

	fieldMap map[string]field.Expr
}

func (t telescopeMonitoring) Table(newTableName string) *telescopeMonitoring {
	t.telescopeMonitoringDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t telescopeMonitoring) As(alias string) *telescopeMonitoring {
	t.telescopeMonitoringDo.DO = *(t.telescopeMonitoringDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *telescopeMonitoring) updateTableName(table string) *telescopeMonitoring {
	t.ALL = field.NewField(table, "*")
	t.Tag = field.NewString(table, "tag")

	t.fillFieldMap()

	return t
}

func (t *telescopeMonitoring) WithContext(ctx context.Context) *telescopeMonitoringDo {
	return t.telescopeMonitoringDo.WithContext(ctx)
}

func (t telescopeMonitoring) TableName() string { return t.telescopeMonitoringDo.TableName() }

func (t *telescopeMonitoring) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *telescopeMonitoring) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 1)
	t.fieldMap["tag"] = t.Tag
}

func (t telescopeMonitoring) clone(db *gorm.DB) telescopeMonitoring {
	t.telescopeMonitoringDo.ReplaceDB(db)
	return t
}

type telescopeMonitoringDo struct{ gen.DO }

func (t telescopeMonitoringDo) Debug() *telescopeMonitoringDo {
	return t.withDO(t.DO.Debug())
}

func (t telescopeMonitoringDo) WithContext(ctx context.Context) *telescopeMonitoringDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t telescopeMonitoringDo) Clauses(conds ...clause.Expression) *telescopeMonitoringDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t telescopeMonitoringDo) Not(conds ...gen.Condition) *telescopeMonitoringDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t telescopeMonitoringDo) Or(conds ...gen.Condition) *telescopeMonitoringDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t telescopeMonitoringDo) Select(conds ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t telescopeMonitoringDo) Where(conds ...gen.Condition) *telescopeMonitoringDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t telescopeMonitoringDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *telescopeMonitoringDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t telescopeMonitoringDo) Order(conds ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t telescopeMonitoringDo) Distinct(cols ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t telescopeMonitoringDo) Omit(cols ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t telescopeMonitoringDo) Join(table schema.Tabler, on ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t telescopeMonitoringDo) LeftJoin(table schema.Tabler, on ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t telescopeMonitoringDo) RightJoin(table schema.Tabler, on ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t telescopeMonitoringDo) Group(cols ...field.Expr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t telescopeMonitoringDo) Having(conds ...gen.Condition) *telescopeMonitoringDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t telescopeMonitoringDo) Limit(limit int) *telescopeMonitoringDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t telescopeMonitoringDo) Offset(offset int) *telescopeMonitoringDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t telescopeMonitoringDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *telescopeMonitoringDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t telescopeMonitoringDo) Unscoped() *telescopeMonitoringDo {
	return t.withDO(t.DO.Unscoped())
}

func (t telescopeMonitoringDo) Create(values ...*model.TelescopeMonitoring) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t telescopeMonitoringDo) CreateInBatches(values []*model.TelescopeMonitoring, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t telescopeMonitoringDo) Save(values ...*model.TelescopeMonitoring) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t telescopeMonitoringDo) First() (*model.TelescopeMonitoring, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeMonitoring), nil
	}
}

func (t telescopeMonitoringDo) Take() (*model.TelescopeMonitoring, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeMonitoring), nil
	}
}

func (t telescopeMonitoringDo) Last() (*model.TelescopeMonitoring, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeMonitoring), nil
	}
}

func (t telescopeMonitoringDo) Find() ([]*model.TelescopeMonitoring, error) {
	result, err := t.DO.Find()
	return result.([]*model.TelescopeMonitoring), err
}

func (t telescopeMonitoringDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelescopeMonitoring, err error) {
	buf := make([]*model.TelescopeMonitoring, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t telescopeMonitoringDo) FindInBatches(result *[]*model.TelescopeMonitoring, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t telescopeMonitoringDo) Attrs(attrs ...field.AssignExpr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t telescopeMonitoringDo) Assign(attrs ...field.AssignExpr) *telescopeMonitoringDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t telescopeMonitoringDo) Joins(field field.RelationField) *telescopeMonitoringDo {
	return t.withDO(t.DO.Joins(field))
}

func (t telescopeMonitoringDo) Preload(field field.RelationField) *telescopeMonitoringDo {
	return t.withDO(t.DO.Preload(field))
}

func (t telescopeMonitoringDo) FirstOrInit() (*model.TelescopeMonitoring, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeMonitoring), nil
	}
}

func (t telescopeMonitoringDo) FirstOrCreate() (*model.TelescopeMonitoring, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelescopeMonitoring), nil
	}
}

func (t telescopeMonitoringDo) FindByPage(offset int, limit int) (result []*model.TelescopeMonitoring, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Count()
	return
}

func (t telescopeMonitoringDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *telescopeMonitoringDo) withDO(do gen.Dao) *telescopeMonitoringDo {
	t.DO = *do.(*gen.DO)
	return t
}
