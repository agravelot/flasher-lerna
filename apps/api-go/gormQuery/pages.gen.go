// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newPage(db *gorm.DB) page {
	_page := page{}

	_page.pageDo.UseDB(db)
	_page.pageDo.UseModel(&model.Page{})

	tableName := _page.pageDo.TableName()
	_page.ALL = field.NewField(tableName, "*")
	_page.ID = field.NewString(tableName, "id")
	_page.Name = field.NewString(tableName, "name")
	_page.Title = field.NewString(tableName, "title")
	_page.Description = field.NewString(tableName, "description")
	_page.CreatedAt = field.NewTime(tableName, "created_at")
	_page.UpdatedAt = field.NewTime(tableName, "updated_at")

	_page.fillFieldMap()

	return _page
}

type page struct {
	pageDo pageDo

	ALL         field.Field
	ID          field.String
	Name        field.String
	Title       field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (p page) Table(newTableName string) *page {
	p.pageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p page) As(alias string) *page {
	p.pageDo.DO = *(p.pageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *page) updateTableName(table string) *page {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.Title = field.NewString(table, "title")
	p.Description = field.NewString(table, "description")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *page) WithContext(ctx context.Context) *pageDo { return p.pageDo.WithContext(ctx) }

func (p page) TableName() string { return p.pageDo.TableName() }

func (p *page) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *page) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["title"] = p.Title
	p.fieldMap["description"] = p.Description
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p page) clone(db *gorm.DB) page {
	p.pageDo.ReplaceDB(db)
	return p
}

type pageDo struct{ gen.DO }

func (p pageDo) Debug() *pageDo {
	return p.withDO(p.DO.Debug())
}

func (p pageDo) WithContext(ctx context.Context) *pageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pageDo) Clauses(conds ...clause.Expression) *pageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pageDo) Not(conds ...gen.Condition) *pageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pageDo) Or(conds ...gen.Condition) *pageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pageDo) Select(conds ...field.Expr) *pageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pageDo) Where(conds ...gen.Condition) *pageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pageDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pageDo) Order(conds ...field.Expr) *pageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pageDo) Distinct(cols ...field.Expr) *pageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pageDo) Omit(cols ...field.Expr) *pageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pageDo) Join(table schema.Tabler, on ...field.Expr) *pageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pageDo) RightJoin(table schema.Tabler, on ...field.Expr) *pageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pageDo) Group(cols ...field.Expr) *pageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pageDo) Having(conds ...gen.Condition) *pageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pageDo) Limit(limit int) *pageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pageDo) Offset(offset int) *pageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pageDo) Unscoped() *pageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pageDo) Create(values ...*model.Page) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pageDo) CreateInBatches(values []*model.Page, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pageDo) Save(values ...*model.Page) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pageDo) First() (*model.Page, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Page), nil
	}
}

func (p pageDo) Take() (*model.Page, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Page), nil
	}
}

func (p pageDo) Last() (*model.Page, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Page), nil
	}
}

func (p pageDo) Find() ([]*model.Page, error) {
	result, err := p.DO.Find()
	return result.([]*model.Page), err
}

func (p pageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Page, err error) {
	buf := make([]*model.Page, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pageDo) FindInBatches(result *[]*model.Page, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pageDo) Attrs(attrs ...field.AssignExpr) *pageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pageDo) Assign(attrs ...field.AssignExpr) *pageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pageDo) Joins(field field.RelationField) *pageDo {
	return p.withDO(p.DO.Joins(field))
}

func (p pageDo) Preload(field field.RelationField) *pageDo {
	return p.withDO(p.DO.Preload(field))
}

func (p pageDo) FirstOrInit() (*model.Page, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Page), nil
	}
}

func (p pageDo) FirstOrCreate() (*model.Page, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Page), nil
	}
}

func (p pageDo) FindByPage(offset int, limit int) (result []*model.Page, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Count()
	return
}

func (p pageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *pageDo) withDO(do gen.Dao) *pageDo {
	p.DO = *do.(*gen.DO)
	return p
}
