// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newUsersSave(db *gorm.DB) usersSave {
	_usersSave := usersSave{}

	_usersSave.usersSaveDo.UseDB(db)
	_usersSave.usersSaveDo.UseModel(&model.UsersSave{})

	tableName := _usersSave.usersSaveDo.TableName()
	_usersSave.ALL = field.NewField(tableName, "*")
	_usersSave.ID = field.NewString(tableName, "id")
	_usersSave.Name = field.NewString(tableName, "name")
	_usersSave.Email = field.NewString(tableName, "email")
	_usersSave.Password = field.NewString(tableName, "password")
	_usersSave.Role = field.NewString(tableName, "role")
	_usersSave.EmailVerifiedAt = field.NewTime(tableName, "email_verified_at")
	_usersSave.RememberToken = field.NewString(tableName, "remember_token")
	_usersSave.CreatedAt = field.NewTime(tableName, "created_at")
	_usersSave.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersSave.NotifyOnAlbumPublished = field.NewString(tableName, "notify_on_album_published")

	_usersSave.fillFieldMap()

	return _usersSave
}

type usersSave struct {
	usersSaveDo usersSaveDo

	ALL                    field.Field
	ID                     field.String
	Name                   field.String
	Email                  field.String
	Password               field.String
	Role                   field.String
	EmailVerifiedAt        field.Time
	RememberToken          field.String
	CreatedAt              field.Time
	UpdatedAt              field.Time
	NotifyOnAlbumPublished field.String

	fieldMap map[string]field.Expr
}

func (u usersSave) Table(newTableName string) *usersSave {
	u.usersSaveDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersSave) As(alias string) *usersSave {
	u.usersSaveDo.DO = *(u.usersSaveDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersSave) updateTableName(table string) *usersSave {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewString(table, "id")
	u.Name = field.NewString(table, "name")
	u.Email = field.NewString(table, "email")
	u.Password = field.NewString(table, "password")
	u.Role = field.NewString(table, "role")
	u.EmailVerifiedAt = field.NewTime(table, "email_verified_at")
	u.RememberToken = field.NewString(table, "remember_token")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.NotifyOnAlbumPublished = field.NewString(table, "notify_on_album_published")

	u.fillFieldMap()

	return u
}

func (u *usersSave) WithContext(ctx context.Context) *usersSaveDo {
	return u.usersSaveDo.WithContext(ctx)
}

func (u usersSave) TableName() string { return u.usersSaveDo.TableName() }

func (u *usersSave) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersSave) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["email"] = u.Email
	u.fieldMap["password"] = u.Password
	u.fieldMap["role"] = u.Role
	u.fieldMap["email_verified_at"] = u.EmailVerifiedAt
	u.fieldMap["remember_token"] = u.RememberToken
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["notify_on_album_published"] = u.NotifyOnAlbumPublished
}

func (u usersSave) clone(db *gorm.DB) usersSave {
	u.usersSaveDo.ReplaceDB(db)
	return u
}

type usersSaveDo struct{ gen.DO }

func (u usersSaveDo) Debug() *usersSaveDo {
	return u.withDO(u.DO.Debug())
}

func (u usersSaveDo) WithContext(ctx context.Context) *usersSaveDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersSaveDo) Clauses(conds ...clause.Expression) *usersSaveDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersSaveDo) Not(conds ...gen.Condition) *usersSaveDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersSaveDo) Or(conds ...gen.Condition) *usersSaveDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersSaveDo) Select(conds ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersSaveDo) Where(conds ...gen.Condition) *usersSaveDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersSaveDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *usersSaveDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u usersSaveDo) Order(conds ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersSaveDo) Distinct(cols ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersSaveDo) Omit(cols ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersSaveDo) Join(table schema.Tabler, on ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersSaveDo) LeftJoin(table schema.Tabler, on ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersSaveDo) RightJoin(table schema.Tabler, on ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersSaveDo) Group(cols ...field.Expr) *usersSaveDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersSaveDo) Having(conds ...gen.Condition) *usersSaveDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersSaveDo) Limit(limit int) *usersSaveDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersSaveDo) Offset(offset int) *usersSaveDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersSaveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *usersSaveDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersSaveDo) Unscoped() *usersSaveDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersSaveDo) Create(values ...*model.UsersSave) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersSaveDo) CreateInBatches(values []*model.UsersSave, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersSaveDo) Save(values ...*model.UsersSave) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersSaveDo) First() (*model.UsersSave, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Take() (*model.UsersSave, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Last() (*model.UsersSave, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Find() ([]*model.UsersSave, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersSave), err
}

func (u usersSaveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersSave, err error) {
	buf := make([]*model.UsersSave, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersSaveDo) FindInBatches(result *[]*model.UsersSave, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersSaveDo) Attrs(attrs ...field.AssignExpr) *usersSaveDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersSaveDo) Assign(attrs ...field.AssignExpr) *usersSaveDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersSaveDo) Joins(field field.RelationField) *usersSaveDo {
	return u.withDO(u.DO.Joins(field))
}

func (u usersSaveDo) Preload(field field.RelationField) *usersSaveDo {
	return u.withDO(u.DO.Preload(field))
}

func (u usersSaveDo) FirstOrInit() (*model.UsersSave, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) FirstOrCreate() (*model.UsersSave, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) FindByPage(offset int, limit int) (result []*model.UsersSave, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Count()
	return
}

func (u usersSaveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u *usersSaveDo) withDO(do gen.Dao) *usersSaveDo {
	u.DO = *do.(*gen.DO)
	return u
}
