// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newCategorizable(db *gorm.DB) categorizable {
	_categorizable := categorizable{}

	_categorizable.categorizableDo.UseDB(db)
	_categorizable.categorizableDo.UseModel(&model.Categorizable{})

	tableName := _categorizable.categorizableDo.TableName()
	_categorizable.ALL = field.NewField(tableName, "*")
	_categorizable.CategoryID = field.NewString(tableName, "category_id")
	_categorizable.CategorizableType = field.NewString(tableName, "categorizable_type")
	_categorizable.CategorizableID = field.NewString(tableName, "categorizable_id")
	_categorizable.CreatedAt = field.NewTime(tableName, "created_at")
	_categorizable.UpdatedAt = field.NewTime(tableName, "updated_at")

	_categorizable.fillFieldMap()

	return _categorizable
}

type categorizable struct {
	categorizableDo categorizableDo

	ALL               field.Field
	CategoryID        field.String
	CategorizableType field.String
	CategorizableID   field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (c categorizable) Table(newTableName string) *categorizable {
	c.categorizableDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c categorizable) As(alias string) *categorizable {
	c.categorizableDo.DO = *(c.categorizableDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *categorizable) updateTableName(table string) *categorizable {
	c.ALL = field.NewField(table, "*")
	c.CategoryID = field.NewString(table, "category_id")
	c.CategorizableType = field.NewString(table, "categorizable_type")
	c.CategorizableID = field.NewString(table, "categorizable_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *categorizable) WithContext(ctx context.Context) *categorizableDo {
	return c.categorizableDo.WithContext(ctx)
}

func (c categorizable) TableName() string { return c.categorizableDo.TableName() }

func (c *categorizable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *categorizable) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["category_id"] = c.CategoryID
	c.fieldMap["categorizable_type"] = c.CategorizableType
	c.fieldMap["categorizable_id"] = c.CategorizableID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c categorizable) clone(db *gorm.DB) categorizable {
	c.categorizableDo.ReplaceDB(db)
	return c
}

type categorizableDo struct{ gen.DO }

func (c categorizableDo) Debug() *categorizableDo {
	return c.withDO(c.DO.Debug())
}

func (c categorizableDo) WithContext(ctx context.Context) *categorizableDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categorizableDo) Clauses(conds ...clause.Expression) *categorizableDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categorizableDo) Not(conds ...gen.Condition) *categorizableDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c categorizableDo) Or(conds ...gen.Condition) *categorizableDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c categorizableDo) Select(conds ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c categorizableDo) Where(conds ...gen.Condition) *categorizableDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c categorizableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *categorizableDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c categorizableDo) Order(conds ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c categorizableDo) Distinct(cols ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categorizableDo) Omit(cols ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categorizableDo) Join(table schema.Tabler, on ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categorizableDo) LeftJoin(table schema.Tabler, on ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categorizableDo) RightJoin(table schema.Tabler, on ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categorizableDo) Group(cols ...field.Expr) *categorizableDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c categorizableDo) Having(conds ...gen.Condition) *categorizableDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c categorizableDo) Limit(limit int) *categorizableDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c categorizableDo) Offset(offset int) *categorizableDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c categorizableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *categorizableDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categorizableDo) Unscoped() *categorizableDo {
	return c.withDO(c.DO.Unscoped())
}

func (c categorizableDo) Create(values ...*model.Categorizable) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categorizableDo) CreateInBatches(values []*model.Categorizable, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categorizableDo) Save(values ...*model.Categorizable) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categorizableDo) First() (*model.Categorizable, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Categorizable), nil
	}
}

func (c categorizableDo) Take() (*model.Categorizable, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Categorizable), nil
	}
}

func (c categorizableDo) Last() (*model.Categorizable, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Categorizable), nil
	}
}

func (c categorizableDo) Find() ([]*model.Categorizable, error) {
	result, err := c.DO.Find()
	return result.([]*model.Categorizable), err
}

func (c categorizableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Categorizable, err error) {
	buf := make([]*model.Categorizable, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categorizableDo) FindInBatches(result *[]*model.Categorizable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categorizableDo) Attrs(attrs ...field.AssignExpr) *categorizableDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categorizableDo) Assign(attrs ...field.AssignExpr) *categorizableDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categorizableDo) Joins(field field.RelationField) *categorizableDo {
	return c.withDO(c.DO.Joins(field))
}

func (c categorizableDo) Preload(field field.RelationField) *categorizableDo {
	return c.withDO(c.DO.Preload(field))
}

func (c categorizableDo) FirstOrInit() (*model.Categorizable, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Categorizable), nil
	}
}

func (c categorizableDo) FirstOrCreate() (*model.Categorizable, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Categorizable), nil
	}
}

func (c categorizableDo) FindByPage(offset int, limit int) (result []*model.Categorizable, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Count()
	return
}

func (c categorizableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *categorizableDo) withDO(do gen.Dao) *categorizableDo {
	c.DO = *do.(*gen.DO)
	return c
}
