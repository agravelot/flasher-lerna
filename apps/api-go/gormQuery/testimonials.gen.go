// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"api-go/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTestimonial(db *gorm.DB) testimonial {
	_testimonial := testimonial{}

	_testimonial.testimonialDo.UseDB(db)
	_testimonial.testimonialDo.UseModel(&model.Testimonial{})

	tableName := _testimonial.testimonialDo.TableName()
	_testimonial.ALL = field.NewField(tableName, "*")
	_testimonial.ID = field.NewString(tableName, "id")
	_testimonial.Name = field.NewString(tableName, "name")
	_testimonial.Email = field.NewString(tableName, "email")
	_testimonial.Body = field.NewString(tableName, "body")
	_testimonial.PublishedAt = field.NewTime(tableName, "published_at")
	_testimonial.UserID = field.NewString(tableName, "user_id")
	_testimonial.CreatedAt = field.NewTime(tableName, "created_at")
	_testimonial.UpdatedAt = field.NewTime(tableName, "updated_at")
	_testimonial.SsoID = field.NewString(tableName, "sso_id")

	_testimonial.fillFieldMap()

	return _testimonial
}

type testimonial struct {
	testimonialDo testimonialDo

	ALL         field.Field
	ID          field.String
	Name        field.String
	Email       field.String
	Body        field.String
	PublishedAt field.Time
	UserID      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	SsoID       field.String

	fieldMap map[string]field.Expr
}

func (t testimonial) Table(newTableName string) *testimonial {
	t.testimonialDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t testimonial) As(alias string) *testimonial {
	t.testimonialDo.DO = *(t.testimonialDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *testimonial) updateTableName(table string) *testimonial {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewString(table, "id")
	t.Name = field.NewString(table, "name")
	t.Email = field.NewString(table, "email")
	t.Body = field.NewString(table, "body")
	t.PublishedAt = field.NewTime(table, "published_at")
	t.UserID = field.NewString(table, "user_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.SsoID = field.NewString(table, "sso_id")

	t.fillFieldMap()

	return t
}

func (t *testimonial) WithContext(ctx context.Context) *testimonialDo {
	return t.testimonialDo.WithContext(ctx)
}

func (t testimonial) TableName() string { return t.testimonialDo.TableName() }

func (t *testimonial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *testimonial) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["email"] = t.Email
	t.fieldMap["body"] = t.Body
	t.fieldMap["published_at"] = t.PublishedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["sso_id"] = t.SsoID
}

func (t testimonial) clone(db *gorm.DB) testimonial {
	t.testimonialDo.ReplaceDB(db)
	return t
}

type testimonialDo struct{ gen.DO }

func (t testimonialDo) Debug() *testimonialDo {
	return t.withDO(t.DO.Debug())
}

func (t testimonialDo) WithContext(ctx context.Context) *testimonialDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t testimonialDo) Clauses(conds ...clause.Expression) *testimonialDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t testimonialDo) Not(conds ...gen.Condition) *testimonialDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t testimonialDo) Or(conds ...gen.Condition) *testimonialDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t testimonialDo) Select(conds ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t testimonialDo) Where(conds ...gen.Condition) *testimonialDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t testimonialDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *testimonialDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t testimonialDo) Order(conds ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t testimonialDo) Distinct(cols ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t testimonialDo) Omit(cols ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t testimonialDo) Join(table schema.Tabler, on ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t testimonialDo) LeftJoin(table schema.Tabler, on ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t testimonialDo) RightJoin(table schema.Tabler, on ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t testimonialDo) Group(cols ...field.Expr) *testimonialDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t testimonialDo) Having(conds ...gen.Condition) *testimonialDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t testimonialDo) Limit(limit int) *testimonialDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t testimonialDo) Offset(offset int) *testimonialDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t testimonialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *testimonialDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t testimonialDo) Unscoped() *testimonialDo {
	return t.withDO(t.DO.Unscoped())
}

func (t testimonialDo) Create(values ...*model.Testimonial) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t testimonialDo) CreateInBatches(values []*model.Testimonial, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t testimonialDo) Save(values ...*model.Testimonial) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t testimonialDo) First() (*model.Testimonial, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testimonial), nil
	}
}

func (t testimonialDo) Take() (*model.Testimonial, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testimonial), nil
	}
}

func (t testimonialDo) Last() (*model.Testimonial, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testimonial), nil
	}
}

func (t testimonialDo) Find() ([]*model.Testimonial, error) {
	result, err := t.DO.Find()
	return result.([]*model.Testimonial), err
}

func (t testimonialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Testimonial, err error) {
	buf := make([]*model.Testimonial, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t testimonialDo) FindInBatches(result *[]*model.Testimonial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t testimonialDo) Attrs(attrs ...field.AssignExpr) *testimonialDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t testimonialDo) Assign(attrs ...field.AssignExpr) *testimonialDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t testimonialDo) Joins(field field.RelationField) *testimonialDo {
	return t.withDO(t.DO.Joins(field))
}

func (t testimonialDo) Preload(field field.RelationField) *testimonialDo {
	return t.withDO(t.DO.Preload(field))
}

func (t testimonialDo) FirstOrInit() (*model.Testimonial, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testimonial), nil
	}
}

func (t testimonialDo) FirstOrCreate() (*model.Testimonial, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testimonial), nil
	}
}

func (t testimonialDo) FindByPage(offset int, limit int) (result []*model.Testimonial, count int64, err error) {
	if limit <= 0 {
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Count()
	return
}

func (t testimonialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *testimonialDo) withDO(do gen.Dao) *testimonialDo {
	t.DO = *do.(*gen.DO)
	return t
}
