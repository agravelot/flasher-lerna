// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (slug, title, body, private, meta_description, sso_id, published_at, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateAlbumParams struct {
	Slug            string
	Title           string
	Body            sql.NullString
	Private         bool
	MetaDescription string
	SsoID           uuid.NullUUID
	PublishedAt     sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (int32, error) {
	row := q.queryRow(ctx, q.createAlbumStmt, createAlbum,
		arg.Slug,
		arg.Title,
		arg.Body,
		arg.Private,
		arg.MetaDescription,
		arg.SsoID,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE slug = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, slug string) error {
	_, err := q.exec(ctx, q.deleteAlbumStmt, deleteAlbum, slug)
	return err
}

const getAlbumBySlug = `-- name: GetAlbumBySlug :one
SELECT a.id, a.slug, a.title, a.body, a.private, a.meta_description, a.sso_id, a.published_at, a.created_at, a.updated_at
FROM albums a
WHERE a.slug = $1
`

type GetAlbumBySlugRow struct {
	ID              int32
	Slug            string
	Title           string
	Body            sql.NullString
	Private         bool
	MetaDescription string
	SsoID           uuid.NullUUID
	PublishedAt     sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetAlbumBySlug(ctx context.Context, slug string) (GetAlbumBySlugRow, error) {
	row := q.queryRow(ctx, q.getAlbumBySlugStmt, getAlbumBySlug, slug)
	var i GetAlbumBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Body,
		&i.Private,
		&i.MetaDescription,
		&i.SsoID,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoriesByAlbumIds = `-- name: GetCategoriesByAlbumIds :many
SELECT c.id, c.slug, c.name, c.description, c.meta_description, c.created_at, c.updated_at
FROM categories c
INNER JOIN categorizables ci ON ci.category_id = c.id
WHERE ci.categorizable_id = ANY($1::int[]) AND ci.categorizable_type = 'App\Models\Album'
`

type GetCategoriesByAlbumIdsRow struct {
	ID              int32
	Slug            string
	Name            string
	Description     sql.NullString
	MetaDescription string
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetCategoriesByAlbumIds(ctx context.Context, dollar_1 []int32) ([]GetCategoriesByAlbumIdsRow, error) {
	rows, err := q.query(ctx, q.getCategoriesByAlbumIdsStmt, getCategoriesByAlbumIds, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoriesByAlbumIdsRow{}
	for rows.Next() {
		var i GetCategoriesByAlbumIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Description,
			&i.MetaDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT c.id, c.slug, c.name, c.description, c.meta_description, c.created_at, c.updated_at
FROM categories c
WHERE c.slug = $1
`

type GetCategoryBySlugRow struct {
	ID              int32
	Slug            string
	Name            string
	Description     sql.NullString
	MetaDescription string
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (GetCategoryBySlugRow, error) {
	row := q.queryRow(ctx, q.getCategoryBySlugStmt, getCategoryBySlug, slug)
	var i GetCategoryBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.MetaDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMediasByAlbumIds = `-- name: GetMediasByAlbumIds :many
SELECT m.id, m.model_id, m.name, m.size, m.created_at, m.updated_at
FROM media m
WHERE m.model_id = ANY($1::int[]) and m.model_type = 'App\Models\Album'
`

type GetMediasByAlbumIdsRow struct {
	ID        int32
	ModelID   int64
	Name      string
	Size      int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetMediasByAlbumIds(ctx context.Context, dollar_1 []int32) ([]GetMediasByAlbumIdsRow, error) {
	rows, err := q.query(ctx, q.getMediasByAlbumIdsStmt, getMediasByAlbumIds, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMediasByAlbumIdsRow{}
	for rows.Next() {
		var i GetMediasByAlbumIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.ModelID,
			&i.Name,
			&i.Size,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedAlbums = `-- name: GetPublishedAlbums :many
SELECT a.id, a.slug, a.title, a.body, a.private, a.meta_description, a.sso_id, a.published_at, a.created_at, a.updated_at
FROM albums a
WHERE a.published_at > $1 AND private = false
ORDER BY a.published_at DESC
LIMIT $2
`

type GetPublishedAlbumsParams struct {
	PublishedAt sql.NullTime
	Limit       int32
}

type GetPublishedAlbumsRow struct {
	ID              int32
	Slug            string
	Title           string
	Body            sql.NullString
	Private         bool
	MetaDescription string
	SsoID           uuid.NullUUID
	PublishedAt     sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetPublishedAlbums(ctx context.Context, arg GetPublishedAlbumsParams) ([]GetPublishedAlbumsRow, error) {
	rows, err := q.query(ctx, q.getPublishedAlbumsStmt, getPublishedAlbums, arg.PublishedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPublishedAlbumsRow{}
	for rows.Next() {
		var i GetPublishedAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Body,
			&i.Private,
			&i.MetaDescription,
			&i.SsoID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedAlbumsAfterID = `-- name: GetPublishedAlbumsAfterID :many
SELECT a.id, a.slug, a.title, a.body, a.private, a.meta_description, a.sso_id, a.published_at, a.created_at, a.updated_at
FROM albums a
WHERE a.published_at > $1 AND private = false AND a.id > $2
ORDER BY a.published_at DESC
LIMIT $3
`

type GetPublishedAlbumsAfterIDParams struct {
	PublishedAt sql.NullTime
	ID          int32
	Limit       int32
}

type GetPublishedAlbumsAfterIDRow struct {
	ID              int32
	Slug            string
	Title           string
	Body            sql.NullString
	Private         bool
	MetaDescription string
	SsoID           uuid.NullUUID
	PublishedAt     sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetPublishedAlbumsAfterID(ctx context.Context, arg GetPublishedAlbumsAfterIDParams) ([]GetPublishedAlbumsAfterIDRow, error) {
	rows, err := q.query(ctx, q.getPublishedAlbumsAfterIDStmt, getPublishedAlbumsAfterID, arg.PublishedAt, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPublishedAlbumsAfterIDRow{}
	for rows.Next() {
		var i GetPublishedAlbumsAfterIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Body,
			&i.Private,
			&i.MetaDescription,
			&i.SsoID,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :exec
UPDATE albums
SET slug = $1, title = $2, body = $3, private = $4, meta_description = $5, sso_id = $6, published_at = $7, updated_at = NOW()
WHERE slug = $8
`

type UpdateAlbumParams struct {
	Slug            string
	Title           string
	Body            sql.NullString
	Private         bool
	MetaDescription string
	SsoID           uuid.NullUUID
	PublishedAt     sql.NullTime
	Slug_2          string
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.exec(ctx, q.updateAlbumStmt, updateAlbum,
		arg.Slug,
		arg.Title,
		arg.Body,
		arg.Private,
		arg.MetaDescription,
		arg.SsoID,
		arg.PublishedAt,
		arg.Slug_2,
	)
	return err
}
