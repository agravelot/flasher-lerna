// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"api-go/model"
)

func newAlbum(db *gorm.DB) album {
	_album := album{}

	_album.albumDo.UseDB(db)
	_album.albumDo.UseModel(&model.Album{})

	tableName := _album.albumDo.TableName()
	_album.ALL = field.NewField(tableName, "*")
	_album.ID = field.NewInt32(tableName, "id")
	_album.Slug = field.NewString(tableName, "slug")
	_album.Title = field.NewString(tableName, "title")
	_album.Body = field.NewString(tableName, "body")
	_album.PublishedAt = field.NewTime(tableName, "published_at")
	_album.Private = field.NewBool(tableName, "private")
	_album.UserID = field.NewInt64(tableName, "user_id")
	_album.CreatedAt = field.NewTime(tableName, "created_at")
	_album.UpdatedAt = field.NewTime(tableName, "updated_at")
	_album.NotifyUsersOnPublished = field.NewBool(tableName, "notify_users_on_published")
	_album.MetaDescription = field.NewString(tableName, "meta_description")
	_album.SsoID = field.NewString(tableName, "sso_id")
	_album.Categories = albumHasManyCategories{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Categories", "model.Category"),
	}

	_album.Medias = albumHasManyMedias{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Medias", "model.Medium"),
	}

	_album.Cosplayers = albumHasManyCosplayers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cosplayers", "model.Cosplayer"),
	}

	_album.fillFieldMap()

	return _album
}

type album struct {
	albumDo albumDo

	ALL                    field.Field
	ID                     field.Int32
	Slug                   field.String
	Title                  field.String
	Body                   field.String
	PublishedAt            field.Time
	Private                field.Bool
	UserID                 field.Int64
	CreatedAt              field.Time
	UpdatedAt              field.Time
	NotifyUsersOnPublished field.Bool
	MetaDescription        field.String
	SsoID                  field.String
	Categories             albumHasManyCategories

	Medias albumHasManyMedias

	Cosplayers albumHasManyCosplayers

	fieldMap map[string]field.Expr
}

func (a album) Table(newTableName string) *album {
	a.albumDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a album) As(alias string) *album {
	a.albumDo.DO = *(a.albumDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *album) updateTableName(table string) *album {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt32(table, "id")
	a.Slug = field.NewString(table, "slug")
	a.Title = field.NewString(table, "title")
	a.Body = field.NewString(table, "body")
	a.PublishedAt = field.NewTime(table, "published_at")
	a.Private = field.NewBool(table, "private")
	a.UserID = field.NewInt64(table, "user_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.NotifyUsersOnPublished = field.NewBool(table, "notify_users_on_published")
	a.MetaDescription = field.NewString(table, "meta_description")
	a.SsoID = field.NewString(table, "sso_id")

	a.fillFieldMap()

	return a
}

func (a *album) WithContext(ctx context.Context) *albumDo { return a.albumDo.WithContext(ctx) }

func (a album) TableName() string { return a.albumDo.TableName() }

func (a album) Alias() string { return a.albumDo.Alias() }

func (a *album) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *album) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["id"] = a.ID
	a.fieldMap["slug"] = a.Slug
	a.fieldMap["title"] = a.Title
	a.fieldMap["body"] = a.Body
	a.fieldMap["published_at"] = a.PublishedAt
	a.fieldMap["private"] = a.Private
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["notify_users_on_published"] = a.NotifyUsersOnPublished
	a.fieldMap["meta_description"] = a.MetaDescription
	a.fieldMap["sso_id"] = a.SsoID

}

func (a album) clone(db *gorm.DB) album {
	a.albumDo.ReplaceDB(db)
	return a
}

type albumHasManyCategories struct {
	db *gorm.DB

	field.RelationField
}

func (a albumHasManyCategories) Where(conds ...field.Expr) *albumHasManyCategories {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a albumHasManyCategories) WithContext(ctx context.Context) *albumHasManyCategories {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a albumHasManyCategories) Model(m *model.Album) *albumHasManyCategoriesTx {
	return &albumHasManyCategoriesTx{a.db.Model(m).Association(a.Name())}
}

type albumHasManyCategoriesTx struct{ tx *gorm.Association }

func (a albumHasManyCategoriesTx) Find() (result []*model.Category, err error) {
	return result, a.tx.Find(&result)
}

func (a albumHasManyCategoriesTx) Append(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a albumHasManyCategoriesTx) Replace(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a albumHasManyCategoriesTx) Delete(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a albumHasManyCategoriesTx) Clear() error {
	return a.tx.Clear()
}

func (a albumHasManyCategoriesTx) Count() int64 {
	return a.tx.Count()
}

type albumHasManyMedias struct {
	db *gorm.DB

	field.RelationField
}

func (a albumHasManyMedias) Where(conds ...field.Expr) *albumHasManyMedias {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a albumHasManyMedias) WithContext(ctx context.Context) *albumHasManyMedias {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a albumHasManyMedias) Model(m *model.Album) *albumHasManyMediasTx {
	return &albumHasManyMediasTx{a.db.Model(m).Association(a.Name())}
}

type albumHasManyMediasTx struct{ tx *gorm.Association }

func (a albumHasManyMediasTx) Find() (result []*model.Medium, err error) {
	return result, a.tx.Find(&result)
}

func (a albumHasManyMediasTx) Append(values ...*model.Medium) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a albumHasManyMediasTx) Replace(values ...*model.Medium) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a albumHasManyMediasTx) Delete(values ...*model.Medium) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a albumHasManyMediasTx) Clear() error {
	return a.tx.Clear()
}

func (a albumHasManyMediasTx) Count() int64 {
	return a.tx.Count()
}

type albumHasManyCosplayers struct {
	db *gorm.DB

	field.RelationField
}

func (a albumHasManyCosplayers) Where(conds ...field.Expr) *albumHasManyCosplayers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a albumHasManyCosplayers) WithContext(ctx context.Context) *albumHasManyCosplayers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a albumHasManyCosplayers) Model(m *model.Album) *albumHasManyCosplayersTx {
	return &albumHasManyCosplayersTx{a.db.Model(m).Association(a.Name())}
}

type albumHasManyCosplayersTx struct{ tx *gorm.Association }

func (a albumHasManyCosplayersTx) Find() (result []*model.Cosplayer, err error) {
	return result, a.tx.Find(&result)
}

func (a albumHasManyCosplayersTx) Append(values ...*model.Cosplayer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a albumHasManyCosplayersTx) Replace(values ...*model.Cosplayer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a albumHasManyCosplayersTx) Delete(values ...*model.Cosplayer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a albumHasManyCosplayersTx) Clear() error {
	return a.tx.Clear()
}

func (a albumHasManyCosplayersTx) Count() int64 {
	return a.tx.Count()
}

type albumDo struct{ gen.DO }

func (a albumDo) Debug() *albumDo {
	return a.withDO(a.DO.Debug())
}

func (a albumDo) WithContext(ctx context.Context) *albumDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a albumDo) ReadDB() *albumDo {
	return a.Clauses(dbresolver.Read)
}

func (a albumDo) WriteDB() *albumDo {
	return a.Clauses(dbresolver.Write)
}

func (a albumDo) Clauses(conds ...clause.Expression) *albumDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a albumDo) Returning(value interface{}, columns ...string) *albumDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a albumDo) Not(conds ...gen.Condition) *albumDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a albumDo) Or(conds ...gen.Condition) *albumDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a albumDo) Select(conds ...field.Expr) *albumDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a albumDo) Where(conds ...gen.Condition) *albumDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a albumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *albumDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a albumDo) Order(conds ...field.Expr) *albumDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a albumDo) Distinct(cols ...field.Expr) *albumDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a albumDo) Omit(cols ...field.Expr) *albumDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a albumDo) Join(table schema.Tabler, on ...field.Expr) *albumDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a albumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *albumDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a albumDo) RightJoin(table schema.Tabler, on ...field.Expr) *albumDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a albumDo) Group(cols ...field.Expr) *albumDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a albumDo) Having(conds ...gen.Condition) *albumDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a albumDo) Limit(limit int) *albumDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a albumDo) Offset(offset int) *albumDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a albumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *albumDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a albumDo) Unscoped() *albumDo {
	return a.withDO(a.DO.Unscoped())
}

func (a albumDo) Create(values ...*model.Album) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a albumDo) CreateInBatches(values []*model.Album, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a albumDo) Save(values ...*model.Album) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a albumDo) First() (*model.Album, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Take() (*model.Album, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Last() (*model.Album, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) Find() ([]*model.Album, error) {
	result, err := a.DO.Find()
	return result.([]*model.Album), err
}

func (a albumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Album, err error) {
	buf := make([]*model.Album, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a albumDo) FindInBatches(result *[]*model.Album, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a albumDo) Attrs(attrs ...field.AssignExpr) *albumDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a albumDo) Assign(attrs ...field.AssignExpr) *albumDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a albumDo) Joins(fields ...field.RelationField) *albumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a albumDo) Preload(fields ...field.RelationField) *albumDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a albumDo) FirstOrInit() (*model.Album, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) FirstOrCreate() (*model.Album, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Album), nil
	}
}

func (a albumDo) FindByPage(offset int, limit int) (result []*model.Album, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a albumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a albumDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a albumDo) Delete(models ...*model.Album) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *albumDo) withDO(do gen.Dao) *albumDo {
	a.DO = *do.(*gen.DO)
	return a
}
