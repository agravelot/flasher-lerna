// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"api-go/model"
)

func newCosplayer(db *gorm.DB) cosplayer {
	_cosplayer := cosplayer{}

	_cosplayer.cosplayerDo.UseDB(db)
	_cosplayer.cosplayerDo.UseModel(&model.Cosplayer{})

	tableName := _cosplayer.cosplayerDo.TableName()
	_cosplayer.ALL = field.NewField(tableName, "*")
	_cosplayer.ID = field.NewInt32(tableName, "id")
	_cosplayer.Name = field.NewString(tableName, "name")
	_cosplayer.Slug = field.NewString(tableName, "slug")
	_cosplayer.Description = field.NewString(tableName, "description")
	_cosplayer.Picture = field.NewString(tableName, "picture")
	_cosplayer.UserID = field.NewInt64(tableName, "user_id")
	_cosplayer.CreatedAt = field.NewTime(tableName, "created_at")
	_cosplayer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cosplayer.SsoID = field.NewString(tableName, "sso_id")
	_cosplayer.Albums = cosplayerHasManyAlbums{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Albums", "model.Album"),
		Categories: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Albums.Categories", "model.Category"),
		},
		Medias: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Albums.Medias", "model.Medium"),
		},
		Cosplayers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Albums.Cosplayers", "model.Cosplayer"),
		},
	}

	_cosplayer.fillFieldMap()

	return _cosplayer
}

type cosplayer struct {
	cosplayerDo cosplayerDo

	ALL         field.Field
	ID          field.Int32
	Name        field.String
	Slug        field.String
	Description field.String
	Picture     field.String
	UserID      field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	SsoID       field.String
	Albums      cosplayerHasManyAlbums

	fieldMap map[string]field.Expr
}

func (c cosplayer) Table(newTableName string) *cosplayer {
	c.cosplayerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cosplayer) As(alias string) *cosplayer {
	c.cosplayerDo.DO = *(c.cosplayerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cosplayer) updateTableName(table string) *cosplayer {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Slug = field.NewString(table, "slug")
	c.Description = field.NewString(table, "description")
	c.Picture = field.NewString(table, "picture")
	c.UserID = field.NewInt64(table, "user_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.SsoID = field.NewString(table, "sso_id")

	c.fillFieldMap()

	return c
}

func (c *cosplayer) WithContext(ctx context.Context) *cosplayerDo {
	return c.cosplayerDo.WithContext(ctx)
}

func (c cosplayer) TableName() string { return c.cosplayerDo.TableName() }

func (c cosplayer) Alias() string { return c.cosplayerDo.Alias() }

func (c *cosplayer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cosplayer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["slug"] = c.Slug
	c.fieldMap["description"] = c.Description
	c.fieldMap["picture"] = c.Picture
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["sso_id"] = c.SsoID

}

func (c cosplayer) clone(db *gorm.DB) cosplayer {
	c.cosplayerDo.ReplaceDB(db)
	return c
}

type cosplayerHasManyAlbums struct {
	db *gorm.DB

	field.RelationField

	Categories struct {
		field.RelationField
	}
	Medias struct {
		field.RelationField
	}
	Cosplayers struct {
		field.RelationField
	}
}

func (a cosplayerHasManyAlbums) Where(conds ...field.Expr) *cosplayerHasManyAlbums {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cosplayerHasManyAlbums) WithContext(ctx context.Context) *cosplayerHasManyAlbums {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cosplayerHasManyAlbums) Model(m *model.Cosplayer) *cosplayerHasManyAlbumsTx {
	return &cosplayerHasManyAlbumsTx{a.db.Model(m).Association(a.Name())}
}

type cosplayerHasManyAlbumsTx struct{ tx *gorm.Association }

func (a cosplayerHasManyAlbumsTx) Find() (result []*model.Album, err error) {
	return result, a.tx.Find(&result)
}

func (a cosplayerHasManyAlbumsTx) Append(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cosplayerHasManyAlbumsTx) Replace(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cosplayerHasManyAlbumsTx) Delete(values ...*model.Album) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cosplayerHasManyAlbumsTx) Clear() error {
	return a.tx.Clear()
}

func (a cosplayerHasManyAlbumsTx) Count() int64 {
	return a.tx.Count()
}

type cosplayerDo struct{ gen.DO }

func (c cosplayerDo) Debug() *cosplayerDo {
	return c.withDO(c.DO.Debug())
}

func (c cosplayerDo) WithContext(ctx context.Context) *cosplayerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cosplayerDo) ReadDB() *cosplayerDo {
	return c.Clauses(dbresolver.Read)
}

func (c cosplayerDo) WriteDB() *cosplayerDo {
	return c.Clauses(dbresolver.Write)
}

func (c cosplayerDo) Clauses(conds ...clause.Expression) *cosplayerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cosplayerDo) Returning(value interface{}, columns ...string) *cosplayerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cosplayerDo) Not(conds ...gen.Condition) *cosplayerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cosplayerDo) Or(conds ...gen.Condition) *cosplayerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cosplayerDo) Select(conds ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cosplayerDo) Where(conds ...gen.Condition) *cosplayerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cosplayerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cosplayerDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cosplayerDo) Order(conds ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cosplayerDo) Distinct(cols ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cosplayerDo) Omit(cols ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cosplayerDo) Join(table schema.Tabler, on ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cosplayerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cosplayerDo) RightJoin(table schema.Tabler, on ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cosplayerDo) Group(cols ...field.Expr) *cosplayerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cosplayerDo) Having(conds ...gen.Condition) *cosplayerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cosplayerDo) Limit(limit int) *cosplayerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cosplayerDo) Offset(offset int) *cosplayerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cosplayerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cosplayerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cosplayerDo) Unscoped() *cosplayerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cosplayerDo) Create(values ...*model.Cosplayer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cosplayerDo) CreateInBatches(values []*model.Cosplayer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cosplayerDo) Save(values ...*model.Cosplayer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cosplayerDo) First() (*model.Cosplayer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cosplayer), nil
	}
}

func (c cosplayerDo) Take() (*model.Cosplayer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cosplayer), nil
	}
}

func (c cosplayerDo) Last() (*model.Cosplayer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cosplayer), nil
	}
}

func (c cosplayerDo) Find() ([]*model.Cosplayer, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cosplayer), err
}

func (c cosplayerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cosplayer, err error) {
	buf := make([]*model.Cosplayer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cosplayerDo) FindInBatches(result *[]*model.Cosplayer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cosplayerDo) Attrs(attrs ...field.AssignExpr) *cosplayerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cosplayerDo) Assign(attrs ...field.AssignExpr) *cosplayerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cosplayerDo) Joins(fields ...field.RelationField) *cosplayerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cosplayerDo) Preload(fields ...field.RelationField) *cosplayerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cosplayerDo) FirstOrInit() (*model.Cosplayer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cosplayer), nil
	}
}

func (c cosplayerDo) FirstOrCreate() (*model.Cosplayer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cosplayer), nil
	}
}

func (c cosplayerDo) FindByPage(offset int, limit int) (result []*model.Cosplayer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cosplayerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cosplayerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cosplayerDo) Delete(models ...*model.Cosplayer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cosplayerDo) withDO(do gen.Dao) *cosplayerDo {
	c.DO = *do.(*gen.DO)
	return c
}
