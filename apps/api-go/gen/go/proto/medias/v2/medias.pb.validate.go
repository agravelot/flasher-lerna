// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/medias/v2/medias.proto

package mediaspbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaMultiError, or nil if none found.
func (m *Media) ValidateAll() error {
	return m.validate(true)
}

func (m *Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FileName

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "CustomProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "CustomProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaValidationError{
				field:  "CustomProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponsiveImages()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "ResponsiveImages",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaValidationError{
					field:  "ResponsiveImages",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsiveImages()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaValidationError{
				field:  "ResponsiveImages",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MimeType != nil {
		// no validation rules for MimeType
	}

	if len(errors) > 0 {
		return MediaMultiError(errors)
	}

	return nil
}

// MediaMultiError is an error wrapping multiple validation errors returned by
// Media.ValidateAll() if the designated constraints aren't met.
type MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMultiError) AllErrors() []error { return m }

// MediaValidationError is the validation error returned by Media.Validate if
// the designated constraints aren't met.
type MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaValidationError) ErrorName() string { return "MediaValidationError" }

// Error satisfies the builtin error interface
func (e MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaValidationError{}

// Validate checks the field values on Media_CustomProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Media_CustomProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media_CustomProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Media_CustomPropertiesMultiError, or nil if none found.
func (m *Media_CustomProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *Media_CustomProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Height

	// no validation rules for Width

	if len(errors) > 0 {
		return Media_CustomPropertiesMultiError(errors)
	}

	return nil
}

// Media_CustomPropertiesMultiError is an error wrapping multiple validation
// errors returned by Media_CustomProperties.ValidateAll() if the designated
// constraints aren't met.
type Media_CustomPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Media_CustomPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Media_CustomPropertiesMultiError) AllErrors() []error { return m }

// Media_CustomPropertiesValidationError is the validation error returned by
// Media_CustomProperties.Validate if the designated constraints aren't met.
type Media_CustomPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Media_CustomPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Media_CustomPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Media_CustomPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Media_CustomPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Media_CustomPropertiesValidationError) ErrorName() string {
	return "Media_CustomPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e Media_CustomPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia_CustomProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Media_CustomPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Media_CustomPropertiesValidationError{}

// Validate checks the field values on Media_Responsive with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Media_Responsive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media_Responsive with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Media_ResponsiveMultiError, or nil if none found.
func (m *Media_Responsive) ValidateAll() error {
	return m.validate(true)
}

func (m *Media_Responsive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Base64Svg

	if len(errors) > 0 {
		return Media_ResponsiveMultiError(errors)
	}

	return nil
}

// Media_ResponsiveMultiError is an error wrapping multiple validation errors
// returned by Media_Responsive.ValidateAll() if the designated constraints
// aren't met.
type Media_ResponsiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Media_ResponsiveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Media_ResponsiveMultiError) AllErrors() []error { return m }

// Media_ResponsiveValidationError is the validation error returned by
// Media_Responsive.Validate if the designated constraints aren't met.
type Media_ResponsiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Media_ResponsiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Media_ResponsiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Media_ResponsiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Media_ResponsiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Media_ResponsiveValidationError) ErrorName() string { return "Media_ResponsiveValidationError" }

// Error satisfies the builtin error interface
func (e Media_ResponsiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia_Responsive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Media_ResponsiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Media_ResponsiveValidationError{}

// Validate checks the field values on Media_ResponsiveImages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Media_ResponsiveImages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media_ResponsiveImages with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Media_ResponsiveImagesMultiError, or nil if none found.
func (m *Media_ResponsiveImages) ValidateAll() error {
	return m.validate(true)
}

func (m *Media_ResponsiveImages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponsive()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Media_ResponsiveImagesValidationError{
					field:  "Responsive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Media_ResponsiveImagesValidationError{
					field:  "Responsive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Media_ResponsiveImagesValidationError{
				field:  "Responsive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Media_ResponsiveImagesMultiError(errors)
	}

	return nil
}

// Media_ResponsiveImagesMultiError is an error wrapping multiple validation
// errors returned by Media_ResponsiveImages.ValidateAll() if the designated
// constraints aren't met.
type Media_ResponsiveImagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Media_ResponsiveImagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Media_ResponsiveImagesMultiError) AllErrors() []error { return m }

// Media_ResponsiveImagesValidationError is the validation error returned by
// Media_ResponsiveImages.Validate if the designated constraints aren't met.
type Media_ResponsiveImagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Media_ResponsiveImagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Media_ResponsiveImagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Media_ResponsiveImagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Media_ResponsiveImagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Media_ResponsiveImagesValidationError) ErrorName() string {
	return "Media_ResponsiveImagesValidationError"
}

// Error satisfies the builtin error interface
func (e Media_ResponsiveImagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia_ResponsiveImages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Media_ResponsiveImagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Media_ResponsiveImagesValidationError{}
