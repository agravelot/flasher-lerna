syntax = "proto3";

package proto.articles.v1;
option go_package = "api-go/articlesgrpc";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/agravelot/flasher-lerna/apps/api-go";
    description: "gRPC-gateway flasher api";
  }
  schemes: HTTP;
};


message AricleRequest {
  int64 id = 1;
	string slug = 2;
	string name = 3 [(validate.rules).string.min_len = 5, (validate.rules).string.max_len = 60];
	string meta_description = 4 [(validate.rules).string.min_len = 1, (validate.rules).string.max_len = 155];
	string content = 5;
	optional google.protobuf.Timestamp published_at = 6;
}

message ArticleResponse {
  int64 id = 1;
	string slug = 2;
	string name = 3;
	string meta_description = 4;
	string content = 5;
	optional google.protobuf.Timestamp published_at = 6;
  string author_id = 7;
}

message GetBySlugRequest {
  string slug = 1;
}

message IndexRequest {
  optional int32 limit = 1;
  optional int32 next = 2;
}

message DeleteRequest {
  string id = 1;
}

message IndexResponse {
  repeated ArticleResponse data = 1;
}

message GetBySlugResponse {
  ArticleResponse article = 1;
}

message DeleteResponse {}

message CreateResponse {
  ArticleResponse article = 1;
}

message CreateRequest {
  AricleRequest article = 1;
}

message UpdateRequest {
  AricleRequest article = 1;
}

message UpdateResponse {
  ArticleResponse article = 1;
}

service ArticleService {
  rpc Index(IndexRequest) returns (IndexResponse) {
    option (google.api.http) = {
      get: "/api/v1/articles"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List articles"
      description: "List articles to the server."
      tags: "Articles"
    };
  }

  rpc GetBySlug(GetBySlugRequest) returns (GetBySlugResponse) {
    option (google.api.http) = {
      get: "/api/v1/articles/{slug}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create an article"
      description: "Create an article to the server."
      tags: "Articles"
    };
  }

  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/articles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add an article"
      description: "Add an article to the server."
      tags: "Articles"
    };
  }

  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      put: "/api/v1/articles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an article"
      description: "Update an article to the server."
      tags: "Articles"
    };
  }

  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/v1/articles/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an article"
      description: "Delete an article to the server."
      tags: "Articles"
    };
  }
}