// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/category"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AlbumCategory is the model entity for the AlbumCategory schema.
type AlbumCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// AlbumID holds the value of the "album_id" field.
	AlbumID int32 `json:"album_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int32 `json:"category_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlbumCategoryQuery when eager-loading is set.
	Edges AlbumCategoryEdges `json:"edges"`
}

// AlbumCategoryEdges holds the relations/edges for other nodes in the graph.
type AlbumCategoryEdges struct {
	// Album holds the value of the album edge.
	Album *Album `json:"album,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AlbumOrErr returns the Album value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlbumCategoryEdges) AlbumOrErr() (*Album, error) {
	if e.loadedTypes[0] {
		if e.Album == nil {
			// The edge album was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: album.Label}
		}
		return e.Album, nil
	}
	return nil, &NotLoadedError{edge: "album"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlbumCategoryEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[1] {
		if e.Category == nil {
			// The edge category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlbumCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case albumcategory.FieldID, albumcategory.FieldAlbumID, albumcategory.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case albumcategory.FieldCreatedAt, albumcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AlbumCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlbumCategory fields.
func (ac *AlbumCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case albumcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int32(value.Int64)
		case albumcategory.FieldAlbumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field album_id", values[i])
			} else if value.Valid {
				ac.AlbumID = int32(value.Int64)
			}
		case albumcategory.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ac.CategoryID = int32(value.Int64)
			}
		case albumcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case albumcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAlbum queries the "album" edge of the AlbumCategory entity.
func (ac *AlbumCategory) QueryAlbum() *AlbumQuery {
	return (&AlbumCategoryClient{config: ac.config}).QueryAlbum(ac)
}

// QueryCategory queries the "category" edge of the AlbumCategory entity.
func (ac *AlbumCategory) QueryCategory() *CategoryQuery {
	return (&AlbumCategoryClient{config: ac.config}).QueryCategory(ac)
}

// Update returns a builder for updating this AlbumCategory.
// Note that you need to call AlbumCategory.Unwrap() before calling this method if this AlbumCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AlbumCategory) Update() *AlbumCategoryUpdateOne {
	return (&AlbumCategoryClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the AlbumCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AlbumCategory) Unwrap() *AlbumCategory {
	tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlbumCategory is not a transactional entity")
	}
	ac.config.driver = tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AlbumCategory) String() string {
	var builder strings.Builder
	builder.WriteString("AlbumCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", ac.ID))
	builder.WriteString(", album_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.AlbumID))
	builder.WriteString(", category_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.CategoryID))
	builder.WriteString(", created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AlbumCategories is a parsable slice of AlbumCategory.
type AlbumCategories []*AlbumCategory

func (ac AlbumCategories) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
