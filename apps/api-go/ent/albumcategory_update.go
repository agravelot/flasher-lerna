// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/category"
	"api-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlbumCategoryUpdate is the builder for updating AlbumCategory entities.
type AlbumCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *AlbumCategoryMutation
}

// Where appends a list predicates to the AlbumCategoryUpdate builder.
func (acu *AlbumCategoryUpdate) Where(ps ...predicate.AlbumCategory) *AlbumCategoryUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetAlbumID sets the "album_id" field.
func (acu *AlbumCategoryUpdate) SetAlbumID(i int32) *AlbumCategoryUpdate {
	acu.mutation.SetAlbumID(i)
	return acu
}

// SetNillableAlbumID sets the "album_id" field if the given value is not nil.
func (acu *AlbumCategoryUpdate) SetNillableAlbumID(i *int32) *AlbumCategoryUpdate {
	if i != nil {
		acu.SetAlbumID(*i)
	}
	return acu
}

// ClearAlbumID clears the value of the "album_id" field.
func (acu *AlbumCategoryUpdate) ClearAlbumID() *AlbumCategoryUpdate {
	acu.mutation.ClearAlbumID()
	return acu
}

// SetCategoryID sets the "category_id" field.
func (acu *AlbumCategoryUpdate) SetCategoryID(i int32) *AlbumCategoryUpdate {
	acu.mutation.SetCategoryID(i)
	return acu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (acu *AlbumCategoryUpdate) SetNillableCategoryID(i *int32) *AlbumCategoryUpdate {
	if i != nil {
		acu.SetCategoryID(*i)
	}
	return acu
}

// ClearCategoryID clears the value of the "category_id" field.
func (acu *AlbumCategoryUpdate) ClearCategoryID() *AlbumCategoryUpdate {
	acu.mutation.ClearCategoryID()
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AlbumCategoryUpdate) SetCreatedAt(t time.Time) *AlbumCategoryUpdate {
	acu.mutation.SetCreatedAt(t)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AlbumCategoryUpdate) SetNillableCreatedAt(t *time.Time) *AlbumCategoryUpdate {
	if t != nil {
		acu.SetCreatedAt(*t)
	}
	return acu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (acu *AlbumCategoryUpdate) ClearCreatedAt() *AlbumCategoryUpdate {
	acu.mutation.ClearCreatedAt()
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AlbumCategoryUpdate) SetUpdatedAt(t time.Time) *AlbumCategoryUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acu *AlbumCategoryUpdate) SetNillableUpdatedAt(t *time.Time) *AlbumCategoryUpdate {
	if t != nil {
		acu.SetUpdatedAt(*t)
	}
	return acu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (acu *AlbumCategoryUpdate) ClearUpdatedAt() *AlbumCategoryUpdate {
	acu.mutation.ClearUpdatedAt()
	return acu
}

// SetAlbum sets the "album" edge to the Album entity.
func (acu *AlbumCategoryUpdate) SetAlbum(a *Album) *AlbumCategoryUpdate {
	return acu.SetAlbumID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (acu *AlbumCategoryUpdate) SetCategory(c *Category) *AlbumCategoryUpdate {
	return acu.SetCategoryID(c.ID)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (acu *AlbumCategoryUpdate) Mutation() *AlbumCategoryMutation {
	return acu.mutation
}

// ClearAlbum clears the "album" edge to the Album entity.
func (acu *AlbumCategoryUpdate) ClearAlbum() *AlbumCategoryUpdate {
	acu.mutation.ClearAlbum()
	return acu
}

// ClearCategory clears the "category" edge to the Category entity.
func (acu *AlbumCategoryUpdate) ClearCategory() *AlbumCategoryUpdate {
	acu.mutation.ClearCategory()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AlbumCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AlbumCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AlbumCategoryUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AlbumCategoryUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acu *AlbumCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   albumcategory.Table,
			Columns: albumcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: albumcategory.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldCreatedAt,
		})
	}
	if acu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: albumcategory.FieldCreatedAt,
		})
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldUpdatedAt,
		})
	}
	if acu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: albumcategory.FieldUpdatedAt,
		})
	}
	if acu.mutation.AlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.AlbumTable,
			Columns: []string{albumcategory.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.AlbumTable,
			Columns: []string{albumcategory.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.CategoryTable,
			Columns: []string{albumcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.CategoryTable,
			Columns: []string{albumcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albumcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AlbumCategoryUpdateOne is the builder for updating a single AlbumCategory entity.
type AlbumCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlbumCategoryMutation
}

// SetAlbumID sets the "album_id" field.
func (acuo *AlbumCategoryUpdateOne) SetAlbumID(i int32) *AlbumCategoryUpdateOne {
	acuo.mutation.SetAlbumID(i)
	return acuo
}

// SetNillableAlbumID sets the "album_id" field if the given value is not nil.
func (acuo *AlbumCategoryUpdateOne) SetNillableAlbumID(i *int32) *AlbumCategoryUpdateOne {
	if i != nil {
		acuo.SetAlbumID(*i)
	}
	return acuo
}

// ClearAlbumID clears the value of the "album_id" field.
func (acuo *AlbumCategoryUpdateOne) ClearAlbumID() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearAlbumID()
	return acuo
}

// SetCategoryID sets the "category_id" field.
func (acuo *AlbumCategoryUpdateOne) SetCategoryID(i int32) *AlbumCategoryUpdateOne {
	acuo.mutation.SetCategoryID(i)
	return acuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (acuo *AlbumCategoryUpdateOne) SetNillableCategoryID(i *int32) *AlbumCategoryUpdateOne {
	if i != nil {
		acuo.SetCategoryID(*i)
	}
	return acuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (acuo *AlbumCategoryUpdateOne) ClearCategoryID() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearCategoryID()
	return acuo
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AlbumCategoryUpdateOne) SetCreatedAt(t time.Time) *AlbumCategoryUpdateOne {
	acuo.mutation.SetCreatedAt(t)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AlbumCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *AlbumCategoryUpdateOne {
	if t != nil {
		acuo.SetCreatedAt(*t)
	}
	return acuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (acuo *AlbumCategoryUpdateOne) ClearCreatedAt() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearCreatedAt()
	return acuo
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AlbumCategoryUpdateOne) SetUpdatedAt(t time.Time) *AlbumCategoryUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acuo *AlbumCategoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *AlbumCategoryUpdateOne {
	if t != nil {
		acuo.SetUpdatedAt(*t)
	}
	return acuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (acuo *AlbumCategoryUpdateOne) ClearUpdatedAt() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearUpdatedAt()
	return acuo
}

// SetAlbum sets the "album" edge to the Album entity.
func (acuo *AlbumCategoryUpdateOne) SetAlbum(a *Album) *AlbumCategoryUpdateOne {
	return acuo.SetAlbumID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (acuo *AlbumCategoryUpdateOne) SetCategory(c *Category) *AlbumCategoryUpdateOne {
	return acuo.SetCategoryID(c.ID)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (acuo *AlbumCategoryUpdateOne) Mutation() *AlbumCategoryMutation {
	return acuo.mutation
}

// ClearAlbum clears the "album" edge to the Album entity.
func (acuo *AlbumCategoryUpdateOne) ClearAlbum() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearAlbum()
	return acuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (acuo *AlbumCategoryUpdateOne) ClearCategory() *AlbumCategoryUpdateOne {
	acuo.mutation.ClearCategory()
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AlbumCategoryUpdateOne) Select(field string, fields ...string) *AlbumCategoryUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AlbumCategory entity.
func (acuo *AlbumCategoryUpdateOne) Save(ctx context.Context) (*AlbumCategory, error) {
	var (
		err  error
		node *AlbumCategory
	)
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AlbumCategoryUpdateOne) SaveX(ctx context.Context) *AlbumCategory {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AlbumCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AlbumCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acuo *AlbumCategoryUpdateOne) sqlSave(ctx context.Context) (_node *AlbumCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   albumcategory.Table,
			Columns: albumcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: albumcategory.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlbumCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, albumcategory.FieldID)
		for _, f := range fields {
			if !albumcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != albumcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldCreatedAt,
		})
	}
	if acuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: albumcategory.FieldCreatedAt,
		})
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldUpdatedAt,
		})
	}
	if acuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: albumcategory.FieldUpdatedAt,
		})
	}
	if acuo.mutation.AlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.AlbumTable,
			Columns: []string{albumcategory.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.AlbumTable,
			Columns: []string{albumcategory.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.CategoryTable,
			Columns: []string{albumcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.CategoryTable,
			Columns: []string{albumcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AlbumCategory{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albumcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
