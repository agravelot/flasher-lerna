// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/cosplayer"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Cosplayer is the model entity for the Cosplayer schema.
type Cosplayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CosplayerQuery when eager-loading is set.
	Edges CosplayerEdges `json:"edges"`
}

// CosplayerEdges holds the relations/edges for other nodes in the graph.
type CosplayerEdges struct {
	// AlbumCosplayers holds the value of the album_cosplayers edge.
	AlbumCosplayers []*AlbumCosplayer `json:"album_cosplayers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlbumCosplayersOrErr returns the AlbumCosplayers value or an error if the edge
// was not loaded in eager-loading.
func (e CosplayerEdges) AlbumCosplayersOrErr() ([]*AlbumCosplayer, error) {
	if e.loadedTypes[0] {
		return e.AlbumCosplayers, nil
	}
	return nil, &NotLoadedError{edge: "album_cosplayers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cosplayer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cosplayer.FieldID, cosplayer.FieldUserID:
			values[i] = new(sql.NullInt64)
		case cosplayer.FieldName, cosplayer.FieldSlug, cosplayer.FieldDescription, cosplayer.FieldPicture:
			values[i] = new(sql.NullString)
		case cosplayer.FieldCreatedAt, cosplayer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cosplayer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cosplayer fields.
func (c *Cosplayer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cosplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int32(value.Int64)
		case cosplayer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cosplayer.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				c.Slug = value.String
			}
		case cosplayer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case cosplayer.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				c.Picture = value.String
			}
		case cosplayer.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case cosplayer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cosplayer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAlbumCosplayers queries the "album_cosplayers" edge of the Cosplayer entity.
func (c *Cosplayer) QueryAlbumCosplayers() *AlbumCosplayerQuery {
	return (&CosplayerClient{config: c.config}).QueryAlbumCosplayers(c)
}

// Update returns a builder for updating this Cosplayer.
// Note that you need to call Cosplayer.Unwrap() before calling this method if this Cosplayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cosplayer) Update() *CosplayerUpdateOne {
	return (&CosplayerClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cosplayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cosplayer) Unwrap() *Cosplayer {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cosplayer is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cosplayer) String() string {
	var builder strings.Builder
	builder.WriteString("Cosplayer(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", slug=")
	builder.WriteString(c.Slug)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", picture=")
	builder.WriteString(c.Picture)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Cosplayers is a parsable slice of Cosplayer.
type Cosplayers []*Cosplayer

func (c Cosplayers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
