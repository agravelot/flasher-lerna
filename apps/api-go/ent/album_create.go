// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/albumcosplayer"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlbumCreate is the builder for creating a Album entity.
type AlbumCreate struct {
	config
	mutation *AlbumMutation
	hooks    []Hook
}

// SetSlug sets the "slug" field.
func (ac *AlbumCreate) SetSlug(s string) *AlbumCreate {
	ac.mutation.SetSlug(s)
	return ac
}

// SetTitle sets the "title" field.
func (ac *AlbumCreate) SetTitle(s string) *AlbumCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetBody sets the "body" field.
func (ac *AlbumCreate) SetBody(s string) *AlbumCreate {
	ac.mutation.SetBody(s)
	return ac
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ac *AlbumCreate) SetNillableBody(s *string) *AlbumCreate {
	if s != nil {
		ac.SetBody(*s)
	}
	return ac
}

// SetPublishedAt sets the "published_at" field.
func (ac *AlbumCreate) SetPublishedAt(t time.Time) *AlbumCreate {
	ac.mutation.SetPublishedAt(t)
	return ac
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (ac *AlbumCreate) SetNillablePublishedAt(t *time.Time) *AlbumCreate {
	if t != nil {
		ac.SetPublishedAt(*t)
	}
	return ac
}

// SetPrivate sets the "private" field.
func (ac *AlbumCreate) SetPrivate(b bool) *AlbumCreate {
	ac.mutation.SetPrivate(b)
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AlbumCreate) SetUserID(i int) *AlbumCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AlbumCreate) SetNillableUserID(i *int) *AlbumCreate {
	if i != nil {
		ac.SetUserID(*i)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AlbumCreate) SetCreatedAt(t time.Time) *AlbumCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AlbumCreate) SetNillableCreatedAt(t *time.Time) *AlbumCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AlbumCreate) SetUpdatedAt(t time.Time) *AlbumCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AlbumCreate) SetNillableUpdatedAt(t *time.Time) *AlbumCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetNotifyUsersOnPublished sets the "notify_users_on_published" field.
func (ac *AlbumCreate) SetNotifyUsersOnPublished(b bool) *AlbumCreate {
	ac.mutation.SetNotifyUsersOnPublished(b)
	return ac
}

// SetMetaDescription sets the "meta_description" field.
func (ac *AlbumCreate) SetMetaDescription(s string) *AlbumCreate {
	ac.mutation.SetMetaDescription(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AlbumCreate) SetID(i int32) *AlbumCreate {
	ac.mutation.SetID(i)
	return ac
}

// AddAlbumCategoryIDs adds the "album_categories" edge to the AlbumCategory entity by IDs.
func (ac *AlbumCreate) AddAlbumCategoryIDs(ids ...int32) *AlbumCreate {
	ac.mutation.AddAlbumCategoryIDs(ids...)
	return ac
}

// AddAlbumCategories adds the "album_categories" edges to the AlbumCategory entity.
func (ac *AlbumCreate) AddAlbumCategories(a ...*AlbumCategory) *AlbumCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAlbumCategoryIDs(ids...)
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (ac *AlbumCreate) AddAlbumCosplayerIDs(ids ...int32) *AlbumCreate {
	ac.mutation.AddAlbumCosplayerIDs(ids...)
	return ac
}

// AddAlbumCosplayers adds the "album_cosplayers" edges to the AlbumCosplayer entity.
func (ac *AlbumCreate) AddAlbumCosplayers(a ...*AlbumCosplayer) *AlbumCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAlbumCosplayerIDs(ids...)
}

// Mutation returns the AlbumMutation object of the builder.
func (ac *AlbumCreate) Mutation() *AlbumMutation {
	return ac.mutation
}

// Save creates the Album in the database.
func (ac *AlbumCreate) Save(ctx context.Context) (*Album, error) {
	var (
		err  error
		node *Album
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlbumCreate) SaveX(ctx context.Context) *Album {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlbumCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlbumCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlbumCreate) check() error {
	if _, ok := ac.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Album.slug"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Album.title"`)}
	}
	if _, ok := ac.mutation.Private(); !ok {
		return &ValidationError{Name: "private", err: errors.New(`ent: missing required field "Album.private"`)}
	}
	if _, ok := ac.mutation.NotifyUsersOnPublished(); !ok {
		return &ValidationError{Name: "notify_users_on_published", err: errors.New(`ent: missing required field "Album.notify_users_on_published"`)}
	}
	if _, ok := ac.mutation.MetaDescription(); !ok {
		return &ValidationError{Name: "meta_description", err: errors.New(`ent: missing required field "Album.meta_description"`)}
	}
	return nil
}

func (ac *AlbumCreate) sqlSave(ctx context.Context) (*Album, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (ac *AlbumCreate) createSpec() (*Album, *sqlgraph.CreateSpec) {
	var (
		_node = &Album{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: album.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: album.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := ac.mutation.PublishedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldPublishedAt,
		})
		_node.PublishedAt = value
	}
	if value, ok := ac.mutation.Private(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldPrivate,
		})
		_node.Private = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: album.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.NotifyUsersOnPublished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldNotifyUsersOnPublished,
		})
		_node.NotifyUsersOnPublished = value
	}
	if value, ok := ac.mutation.MetaDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldMetaDescription,
		})
		_node.MetaDescription = value
	}
	if nodes := ac.mutation.AlbumCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AlbumCosplayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AlbumCreateBulk is the builder for creating many Album entities in bulk.
type AlbumCreateBulk struct {
	config
	builders []*AlbumCreate
}

// Save creates the Album entities in the database.
func (acb *AlbumCreateBulk) Save(ctx context.Context) ([]*Album, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Album, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlbumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlbumCreateBulk) SaveX(ctx context.Context) []*Album {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlbumCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlbumCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
