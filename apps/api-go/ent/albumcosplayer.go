// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcosplayer"
	"api-go/ent/cosplayer"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AlbumCosplayer is the model entity for the AlbumCosplayer schema.
type AlbumCosplayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// AlbumID holds the value of the "album_id" field.
	AlbumID int32 `json:"album_id,omitempty"`
	// CosplayerID holds the value of the "cosplayer_id" field.
	CosplayerID int32 `json:"cosplayer_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlbumCosplayerQuery when eager-loading is set.
	Edges AlbumCosplayerEdges `json:"edges"`
}

// AlbumCosplayerEdges holds the relations/edges for other nodes in the graph.
type AlbumCosplayerEdges struct {
	// Album holds the value of the album edge.
	Album *Album `json:"album,omitempty"`
	// Cosplayer holds the value of the cosplayer edge.
	Cosplayer *Cosplayer `json:"cosplayer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AlbumOrErr returns the Album value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlbumCosplayerEdges) AlbumOrErr() (*Album, error) {
	if e.loadedTypes[0] {
		if e.Album == nil {
			// The edge album was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: album.Label}
		}
		return e.Album, nil
	}
	return nil, &NotLoadedError{edge: "album"}
}

// CosplayerOrErr returns the Cosplayer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlbumCosplayerEdges) CosplayerOrErr() (*Cosplayer, error) {
	if e.loadedTypes[1] {
		if e.Cosplayer == nil {
			// The edge cosplayer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cosplayer.Label}
		}
		return e.Cosplayer, nil
	}
	return nil, &NotLoadedError{edge: "cosplayer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlbumCosplayer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case albumcosplayer.FieldID, albumcosplayer.FieldAlbumID, albumcosplayer.FieldCosplayerID:
			values[i] = new(sql.NullInt64)
		case albumcosplayer.FieldCreatedAt, albumcosplayer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AlbumCosplayer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlbumCosplayer fields.
func (ac *AlbumCosplayer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case albumcosplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int32(value.Int64)
		case albumcosplayer.FieldAlbumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field album_id", values[i])
			} else if value.Valid {
				ac.AlbumID = int32(value.Int64)
			}
		case albumcosplayer.FieldCosplayerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cosplayer_id", values[i])
			} else if value.Valid {
				ac.CosplayerID = int32(value.Int64)
			}
		case albumcosplayer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case albumcosplayer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAlbum queries the "album" edge of the AlbumCosplayer entity.
func (ac *AlbumCosplayer) QueryAlbum() *AlbumQuery {
	return (&AlbumCosplayerClient{config: ac.config}).QueryAlbum(ac)
}

// QueryCosplayer queries the "cosplayer" edge of the AlbumCosplayer entity.
func (ac *AlbumCosplayer) QueryCosplayer() *CosplayerQuery {
	return (&AlbumCosplayerClient{config: ac.config}).QueryCosplayer(ac)
}

// Update returns a builder for updating this AlbumCosplayer.
// Note that you need to call AlbumCosplayer.Unwrap() before calling this method if this AlbumCosplayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AlbumCosplayer) Update() *AlbumCosplayerUpdateOne {
	return (&AlbumCosplayerClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the AlbumCosplayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AlbumCosplayer) Unwrap() *AlbumCosplayer {
	tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlbumCosplayer is not a transactional entity")
	}
	ac.config.driver = tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AlbumCosplayer) String() string {
	var builder strings.Builder
	builder.WriteString("AlbumCosplayer(")
	builder.WriteString(fmt.Sprintf("id=%v", ac.ID))
	builder.WriteString(", album_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.AlbumID))
	builder.WriteString(", cosplayer_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.CosplayerID))
	builder.WriteString(", created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AlbumCosplayers is a parsable slice of AlbumCosplayer.
type AlbumCosplayers []*AlbumCosplayer

func (ac AlbumCosplayers) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
