// Code generated by entc, DO NOT EDIT.

package albumcategory

const (
	// Label holds the string label denoting the albumcategory type in the database.
	Label = "album_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAlbumID holds the string denoting the album_id field in the database.
	FieldAlbumID = "album_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAlbum holds the string denoting the album edge name in mutations.
	EdgeAlbum = "album"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// Table holds the table name of the albumcategory in the database.
	Table = "album_category"
	// AlbumTable is the table that holds the album relation/edge.
	AlbumTable = "album_category"
	// AlbumInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumInverseTable = "albums"
	// AlbumColumn is the table column denoting the album relation/edge.
	AlbumColumn = "album_id"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "album_category"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
)

// Columns holds all SQL columns for albumcategory fields.
var Columns = []string{
	FieldID,
	FieldAlbumID,
	FieldCategoryID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
