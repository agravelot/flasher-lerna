// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"api-go/ent/migrate"

	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/albumcosplayer"
	"api-go/ent/category"
	"api-go/ent/cosplayer"
	"api-go/ent/setting"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Album is the client for interacting with the Album builders.
	Album *AlbumClient
	// AlbumCategory is the client for interacting with the AlbumCategory builders.
	AlbumCategory *AlbumCategoryClient
	// AlbumCosplayer is the client for interacting with the AlbumCosplayer builders.
	AlbumCosplayer *AlbumCosplayerClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Cosplayer is the client for interacting with the Cosplayer builders.
	Cosplayer *CosplayerClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Album = NewAlbumClient(c.config)
	c.AlbumCategory = NewAlbumCategoryClient(c.config)
	c.AlbumCosplayer = NewAlbumCosplayerClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Cosplayer = NewCosplayerClient(c.config)
	c.Setting = NewSettingClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Album:          NewAlbumClient(cfg),
		AlbumCategory:  NewAlbumCategoryClient(cfg),
		AlbumCosplayer: NewAlbumCosplayerClient(cfg),
		Category:       NewCategoryClient(cfg),
		Cosplayer:      NewCosplayerClient(cfg),
		Setting:        NewSettingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Album:          NewAlbumClient(cfg),
		AlbumCategory:  NewAlbumCategoryClient(cfg),
		AlbumCosplayer: NewAlbumCosplayerClient(cfg),
		Category:       NewCategoryClient(cfg),
		Cosplayer:      NewCosplayerClient(cfg),
		Setting:        NewSettingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Album.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Album.Use(hooks...)
	c.AlbumCategory.Use(hooks...)
	c.AlbumCosplayer.Use(hooks...)
	c.Category.Use(hooks...)
	c.Cosplayer.Use(hooks...)
	c.Setting.Use(hooks...)
}

// AlbumClient is a client for the Album schema.
type AlbumClient struct {
	config
}

// NewAlbumClient returns a client for the Album from the given config.
func NewAlbumClient(c config) *AlbumClient {
	return &AlbumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `album.Hooks(f(g(h())))`.
func (c *AlbumClient) Use(hooks ...Hook) {
	c.hooks.Album = append(c.hooks.Album, hooks...)
}

// Create returns a create builder for Album.
func (c *AlbumClient) Create() *AlbumCreate {
	mutation := newAlbumMutation(c.config, OpCreate)
	return &AlbumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Album entities.
func (c *AlbumClient) CreateBulk(builders ...*AlbumCreate) *AlbumCreateBulk {
	return &AlbumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Album.
func (c *AlbumClient) Update() *AlbumUpdate {
	mutation := newAlbumMutation(c.config, OpUpdate)
	return &AlbumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlbumClient) UpdateOne(a *Album) *AlbumUpdateOne {
	mutation := newAlbumMutation(c.config, OpUpdateOne, withAlbum(a))
	return &AlbumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlbumClient) UpdateOneID(id int32) *AlbumUpdateOne {
	mutation := newAlbumMutation(c.config, OpUpdateOne, withAlbumID(id))
	return &AlbumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Album.
func (c *AlbumClient) Delete() *AlbumDelete {
	mutation := newAlbumMutation(c.config, OpDelete)
	return &AlbumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlbumClient) DeleteOne(a *Album) *AlbumDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlbumClient) DeleteOneID(id int32) *AlbumDeleteOne {
	builder := c.Delete().Where(album.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlbumDeleteOne{builder}
}

// Query returns a query builder for Album.
func (c *AlbumClient) Query() *AlbumQuery {
	return &AlbumQuery{
		config: c.config,
	}
}

// Get returns a Album entity by its id.
func (c *AlbumClient) Get(ctx context.Context, id int32) (*Album, error) {
	return c.Query().Where(album.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlbumClient) GetX(ctx context.Context, id int32) *Album {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlbumCategories queries the album_categories edge of a Album.
func (c *AlbumClient) QueryAlbumCategories(a *Album) *AlbumCategoryQuery {
	query := &AlbumCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(album.Table, album.FieldID, id),
			sqlgraph.To(albumcategory.Table, albumcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, album.AlbumCategoriesTable, album.AlbumCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAlbumCosplayers queries the album_cosplayers edge of a Album.
func (c *AlbumClient) QueryAlbumCosplayers(a *Album) *AlbumCosplayerQuery {
	query := &AlbumCosplayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(album.Table, album.FieldID, id),
			sqlgraph.To(albumcosplayer.Table, albumcosplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, album.AlbumCosplayersTable, album.AlbumCosplayersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AlbumClient) Hooks() []Hook {
	return c.hooks.Album
}

// AlbumCategoryClient is a client for the AlbumCategory schema.
type AlbumCategoryClient struct {
	config
}

// NewAlbumCategoryClient returns a client for the AlbumCategory from the given config.
func NewAlbumCategoryClient(c config) *AlbumCategoryClient {
	return &AlbumCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `albumcategory.Hooks(f(g(h())))`.
func (c *AlbumCategoryClient) Use(hooks ...Hook) {
	c.hooks.AlbumCategory = append(c.hooks.AlbumCategory, hooks...)
}

// Create returns a create builder for AlbumCategory.
func (c *AlbumCategoryClient) Create() *AlbumCategoryCreate {
	mutation := newAlbumCategoryMutation(c.config, OpCreate)
	return &AlbumCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlbumCategory entities.
func (c *AlbumCategoryClient) CreateBulk(builders ...*AlbumCategoryCreate) *AlbumCategoryCreateBulk {
	return &AlbumCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlbumCategory.
func (c *AlbumCategoryClient) Update() *AlbumCategoryUpdate {
	mutation := newAlbumCategoryMutation(c.config, OpUpdate)
	return &AlbumCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlbumCategoryClient) UpdateOne(ac *AlbumCategory) *AlbumCategoryUpdateOne {
	mutation := newAlbumCategoryMutation(c.config, OpUpdateOne, withAlbumCategory(ac))
	return &AlbumCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlbumCategoryClient) UpdateOneID(id int32) *AlbumCategoryUpdateOne {
	mutation := newAlbumCategoryMutation(c.config, OpUpdateOne, withAlbumCategoryID(id))
	return &AlbumCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlbumCategory.
func (c *AlbumCategoryClient) Delete() *AlbumCategoryDelete {
	mutation := newAlbumCategoryMutation(c.config, OpDelete)
	return &AlbumCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlbumCategoryClient) DeleteOne(ac *AlbumCategory) *AlbumCategoryDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlbumCategoryClient) DeleteOneID(id int32) *AlbumCategoryDeleteOne {
	builder := c.Delete().Where(albumcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlbumCategoryDeleteOne{builder}
}

// Query returns a query builder for AlbumCategory.
func (c *AlbumCategoryClient) Query() *AlbumCategoryQuery {
	return &AlbumCategoryQuery{
		config: c.config,
	}
}

// Get returns a AlbumCategory entity by its id.
func (c *AlbumCategoryClient) Get(ctx context.Context, id int32) (*AlbumCategory, error) {
	return c.Query().Where(albumcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlbumCategoryClient) GetX(ctx context.Context, id int32) *AlbumCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlbum queries the album edge of a AlbumCategory.
func (c *AlbumCategoryClient) QueryAlbum(ac *AlbumCategory) *AlbumQuery {
	query := &AlbumQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(albumcategory.Table, albumcategory.FieldID, id),
			sqlgraph.To(album.Table, album.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, albumcategory.AlbumTable, albumcategory.AlbumColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a AlbumCategory.
func (c *AlbumCategoryClient) QueryCategory(ac *AlbumCategory) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(albumcategory.Table, albumcategory.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, albumcategory.CategoryTable, albumcategory.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AlbumCategoryClient) Hooks() []Hook {
	return c.hooks.AlbumCategory
}

// AlbumCosplayerClient is a client for the AlbumCosplayer schema.
type AlbumCosplayerClient struct {
	config
}

// NewAlbumCosplayerClient returns a client for the AlbumCosplayer from the given config.
func NewAlbumCosplayerClient(c config) *AlbumCosplayerClient {
	return &AlbumCosplayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `albumcosplayer.Hooks(f(g(h())))`.
func (c *AlbumCosplayerClient) Use(hooks ...Hook) {
	c.hooks.AlbumCosplayer = append(c.hooks.AlbumCosplayer, hooks...)
}

// Create returns a create builder for AlbumCosplayer.
func (c *AlbumCosplayerClient) Create() *AlbumCosplayerCreate {
	mutation := newAlbumCosplayerMutation(c.config, OpCreate)
	return &AlbumCosplayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlbumCosplayer entities.
func (c *AlbumCosplayerClient) CreateBulk(builders ...*AlbumCosplayerCreate) *AlbumCosplayerCreateBulk {
	return &AlbumCosplayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlbumCosplayer.
func (c *AlbumCosplayerClient) Update() *AlbumCosplayerUpdate {
	mutation := newAlbumCosplayerMutation(c.config, OpUpdate)
	return &AlbumCosplayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlbumCosplayerClient) UpdateOne(ac *AlbumCosplayer) *AlbumCosplayerUpdateOne {
	mutation := newAlbumCosplayerMutation(c.config, OpUpdateOne, withAlbumCosplayer(ac))
	return &AlbumCosplayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlbumCosplayerClient) UpdateOneID(id int32) *AlbumCosplayerUpdateOne {
	mutation := newAlbumCosplayerMutation(c.config, OpUpdateOne, withAlbumCosplayerID(id))
	return &AlbumCosplayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlbumCosplayer.
func (c *AlbumCosplayerClient) Delete() *AlbumCosplayerDelete {
	mutation := newAlbumCosplayerMutation(c.config, OpDelete)
	return &AlbumCosplayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlbumCosplayerClient) DeleteOne(ac *AlbumCosplayer) *AlbumCosplayerDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlbumCosplayerClient) DeleteOneID(id int32) *AlbumCosplayerDeleteOne {
	builder := c.Delete().Where(albumcosplayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlbumCosplayerDeleteOne{builder}
}

// Query returns a query builder for AlbumCosplayer.
func (c *AlbumCosplayerClient) Query() *AlbumCosplayerQuery {
	return &AlbumCosplayerQuery{
		config: c.config,
	}
}

// Get returns a AlbumCosplayer entity by its id.
func (c *AlbumCosplayerClient) Get(ctx context.Context, id int32) (*AlbumCosplayer, error) {
	return c.Query().Where(albumcosplayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlbumCosplayerClient) GetX(ctx context.Context, id int32) *AlbumCosplayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlbum queries the album edge of a AlbumCosplayer.
func (c *AlbumCosplayerClient) QueryAlbum(ac *AlbumCosplayer) *AlbumQuery {
	query := &AlbumQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(albumcosplayer.Table, albumcosplayer.FieldID, id),
			sqlgraph.To(album.Table, album.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, albumcosplayer.AlbumTable, albumcosplayer.AlbumColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCosplayer queries the cosplayer edge of a AlbumCosplayer.
func (c *AlbumCosplayerClient) QueryCosplayer(ac *AlbumCosplayer) *CosplayerQuery {
	query := &CosplayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(albumcosplayer.Table, albumcosplayer.FieldID, id),
			sqlgraph.To(cosplayer.Table, cosplayer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, albumcosplayer.CosplayerTable, albumcosplayer.CosplayerColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AlbumCosplayerClient) Hooks() []Hook {
	return c.hooks.AlbumCosplayer
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int32) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int32) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int32) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int32) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlbumCategories queries the album_categories edge of a Category.
func (c *CategoryClient) QueryAlbumCategories(ca *Category) *AlbumCategoryQuery {
	query := &AlbumCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(albumcategory.Table, albumcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.AlbumCategoriesTable, category.AlbumCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// CosplayerClient is a client for the Cosplayer schema.
type CosplayerClient struct {
	config
}

// NewCosplayerClient returns a client for the Cosplayer from the given config.
func NewCosplayerClient(c config) *CosplayerClient {
	return &CosplayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cosplayer.Hooks(f(g(h())))`.
func (c *CosplayerClient) Use(hooks ...Hook) {
	c.hooks.Cosplayer = append(c.hooks.Cosplayer, hooks...)
}

// Create returns a create builder for Cosplayer.
func (c *CosplayerClient) Create() *CosplayerCreate {
	mutation := newCosplayerMutation(c.config, OpCreate)
	return &CosplayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cosplayer entities.
func (c *CosplayerClient) CreateBulk(builders ...*CosplayerCreate) *CosplayerCreateBulk {
	return &CosplayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cosplayer.
func (c *CosplayerClient) Update() *CosplayerUpdate {
	mutation := newCosplayerMutation(c.config, OpUpdate)
	return &CosplayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CosplayerClient) UpdateOne(co *Cosplayer) *CosplayerUpdateOne {
	mutation := newCosplayerMutation(c.config, OpUpdateOne, withCosplayer(co))
	return &CosplayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CosplayerClient) UpdateOneID(id int32) *CosplayerUpdateOne {
	mutation := newCosplayerMutation(c.config, OpUpdateOne, withCosplayerID(id))
	return &CosplayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cosplayer.
func (c *CosplayerClient) Delete() *CosplayerDelete {
	mutation := newCosplayerMutation(c.config, OpDelete)
	return &CosplayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CosplayerClient) DeleteOne(co *Cosplayer) *CosplayerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CosplayerClient) DeleteOneID(id int32) *CosplayerDeleteOne {
	builder := c.Delete().Where(cosplayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CosplayerDeleteOne{builder}
}

// Query returns a query builder for Cosplayer.
func (c *CosplayerClient) Query() *CosplayerQuery {
	return &CosplayerQuery{
		config: c.config,
	}
}

// Get returns a Cosplayer entity by its id.
func (c *CosplayerClient) Get(ctx context.Context, id int32) (*Cosplayer, error) {
	return c.Query().Where(cosplayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CosplayerClient) GetX(ctx context.Context, id int32) *Cosplayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlbumCosplayers queries the album_cosplayers edge of a Cosplayer.
func (c *CosplayerClient) QueryAlbumCosplayers(co *Cosplayer) *AlbumCosplayerQuery {
	query := &AlbumCosplayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cosplayer.Table, cosplayer.FieldID, id),
			sqlgraph.To(albumcosplayer.Table, albumcosplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cosplayer.AlbumCosplayersTable, cosplayer.AlbumCosplayersColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CosplayerClient) Hooks() []Hook {
	return c.hooks.Cosplayer
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Create returns a create builder for Setting.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id int) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingClient) DeleteOneID(id int) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id int) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id int) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}
