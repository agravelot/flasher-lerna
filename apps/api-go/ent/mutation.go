// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/albumcosplayer"
	"api-go/ent/category"
	"api-go/ent/cosplayer"
	"api-go/ent/predicate"
	"api-go/ent/setting"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlbum          = "Album"
	TypeAlbumCategory  = "AlbumCategory"
	TypeAlbumCosplayer = "AlbumCosplayer"
	TypeCategory       = "Category"
	TypeCosplayer      = "Cosplayer"
	TypeSetting        = "Setting"
)

// AlbumMutation represents an operation that mutates the Album nodes in the graph.
type AlbumMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int32
	slug                      *string
	title                     *string
	body                      *string
	published_at              *time.Time
	private                   *bool
	user_id                   *int
	adduser_id                *int
	created_at                *time.Time
	updated_at                *time.Time
	notify_users_on_published *bool
	meta_description          *string
	clearedFields             map[string]struct{}
	album_categories          map[int32]struct{}
	removedalbum_categories   map[int32]struct{}
	clearedalbum_categories   bool
	album_cosplayers          map[int32]struct{}
	removedalbum_cosplayers   map[int32]struct{}
	clearedalbum_cosplayers   bool
	done                      bool
	oldValue                  func(context.Context) (*Album, error)
	predicates                []predicate.Album
}

var _ ent.Mutation = (*AlbumMutation)(nil)

// albumOption allows management of the mutation configuration using functional options.
type albumOption func(*AlbumMutation)

// newAlbumMutation creates new mutation for the Album entity.
func newAlbumMutation(c config, op Op, opts ...albumOption) *AlbumMutation {
	m := &AlbumMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumID sets the ID field of the mutation.
func withAlbumID(id int32) albumOption {
	return func(m *AlbumMutation) {
		var (
			err   error
			once  sync.Once
			value *Album
		)
		m.oldValue = func(ctx context.Context) (*Album, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Album.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbum sets the old Album of the mutation.
func withAlbum(node *Album) albumOption {
	return func(m *AlbumMutation) {
		m.oldValue = func(context.Context) (*Album, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Album entities.
func (m *AlbumMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlbumMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlbumMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Album.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlug sets the "slug" field.
func (m *AlbumMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *AlbumMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *AlbumMutation) ResetSlug() {
	m.slug = nil
}

// SetTitle sets the "title" field.
func (m *AlbumMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AlbumMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AlbumMutation) ResetTitle() {
	m.title = nil
}

// SetBody sets the "body" field.
func (m *AlbumMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *AlbumMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ClearBody clears the value of the "body" field.
func (m *AlbumMutation) ClearBody() {
	m.body = nil
	m.clearedFields[album.FieldBody] = struct{}{}
}

// BodyCleared returns if the "body" field was cleared in this mutation.
func (m *AlbumMutation) BodyCleared() bool {
	_, ok := m.clearedFields[album.FieldBody]
	return ok
}

// ResetBody resets all changes to the "body" field.
func (m *AlbumMutation) ResetBody() {
	m.body = nil
	delete(m.clearedFields, album.FieldBody)
}

// SetPublishedAt sets the "published_at" field.
func (m *AlbumMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *AlbumMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ClearPublishedAt clears the value of the "published_at" field.
func (m *AlbumMutation) ClearPublishedAt() {
	m.published_at = nil
	m.clearedFields[album.FieldPublishedAt] = struct{}{}
}

// PublishedAtCleared returns if the "published_at" field was cleared in this mutation.
func (m *AlbumMutation) PublishedAtCleared() bool {
	_, ok := m.clearedFields[album.FieldPublishedAt]
	return ok
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *AlbumMutation) ResetPublishedAt() {
	m.published_at = nil
	delete(m.clearedFields, album.FieldPublishedAt)
}

// SetPrivate sets the "private" field.
func (m *AlbumMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *AlbumMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *AlbumMutation) ResetPrivate() {
	m.private = nil
}

// SetUserID sets the "user_id" field.
func (m *AlbumMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AlbumMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *AlbumMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *AlbumMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *AlbumMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[album.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *AlbumMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[album.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AlbumMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, album.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *AlbumMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlbumMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AlbumMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[album.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AlbumMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[album.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlbumMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, album.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AlbumMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AlbumMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AlbumMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[album.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AlbumMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[album.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AlbumMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, album.FieldUpdatedAt)
}

// SetNotifyUsersOnPublished sets the "notify_users_on_published" field.
func (m *AlbumMutation) SetNotifyUsersOnPublished(b bool) {
	m.notify_users_on_published = &b
}

// NotifyUsersOnPublished returns the value of the "notify_users_on_published" field in the mutation.
func (m *AlbumMutation) NotifyUsersOnPublished() (r bool, exists bool) {
	v := m.notify_users_on_published
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifyUsersOnPublished returns the old "notify_users_on_published" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldNotifyUsersOnPublished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifyUsersOnPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifyUsersOnPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifyUsersOnPublished: %w", err)
	}
	return oldValue.NotifyUsersOnPublished, nil
}

// ResetNotifyUsersOnPublished resets all changes to the "notify_users_on_published" field.
func (m *AlbumMutation) ResetNotifyUsersOnPublished() {
	m.notify_users_on_published = nil
}

// SetMetaDescription sets the "meta_description" field.
func (m *AlbumMutation) SetMetaDescription(s string) {
	m.meta_description = &s
}

// MetaDescription returns the value of the "meta_description" field in the mutation.
func (m *AlbumMutation) MetaDescription() (r string, exists bool) {
	v := m.meta_description
	if v == nil {
		return
	}
	return *v, true
}

// OldMetaDescription returns the old "meta_description" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldMetaDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetaDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetaDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetaDescription: %w", err)
	}
	return oldValue.MetaDescription, nil
}

// ResetMetaDescription resets all changes to the "meta_description" field.
func (m *AlbumMutation) ResetMetaDescription() {
	m.meta_description = nil
}

// AddAlbumCategoryIDs adds the "album_categories" edge to the AlbumCategory entity by ids.
func (m *AlbumMutation) AddAlbumCategoryIDs(ids ...int32) {
	if m.album_categories == nil {
		m.album_categories = make(map[int32]struct{})
	}
	for i := range ids {
		m.album_categories[ids[i]] = struct{}{}
	}
}

// ClearAlbumCategories clears the "album_categories" edge to the AlbumCategory entity.
func (m *AlbumMutation) ClearAlbumCategories() {
	m.clearedalbum_categories = true
}

// AlbumCategoriesCleared reports if the "album_categories" edge to the AlbumCategory entity was cleared.
func (m *AlbumMutation) AlbumCategoriesCleared() bool {
	return m.clearedalbum_categories
}

// RemoveAlbumCategoryIDs removes the "album_categories" edge to the AlbumCategory entity by IDs.
func (m *AlbumMutation) RemoveAlbumCategoryIDs(ids ...int32) {
	if m.removedalbum_categories == nil {
		m.removedalbum_categories = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.album_categories, ids[i])
		m.removedalbum_categories[ids[i]] = struct{}{}
	}
}

// RemovedAlbumCategories returns the removed IDs of the "album_categories" edge to the AlbumCategory entity.
func (m *AlbumMutation) RemovedAlbumCategoriesIDs() (ids []int32) {
	for id := range m.removedalbum_categories {
		ids = append(ids, id)
	}
	return
}

// AlbumCategoriesIDs returns the "album_categories" edge IDs in the mutation.
func (m *AlbumMutation) AlbumCategoriesIDs() (ids []int32) {
	for id := range m.album_categories {
		ids = append(ids, id)
	}
	return
}

// ResetAlbumCategories resets all changes to the "album_categories" edge.
func (m *AlbumMutation) ResetAlbumCategories() {
	m.album_categories = nil
	m.clearedalbum_categories = false
	m.removedalbum_categories = nil
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by ids.
func (m *AlbumMutation) AddAlbumCosplayerIDs(ids ...int32) {
	if m.album_cosplayers == nil {
		m.album_cosplayers = make(map[int32]struct{})
	}
	for i := range ids {
		m.album_cosplayers[ids[i]] = struct{}{}
	}
}

// ClearAlbumCosplayers clears the "album_cosplayers" edge to the AlbumCosplayer entity.
func (m *AlbumMutation) ClearAlbumCosplayers() {
	m.clearedalbum_cosplayers = true
}

// AlbumCosplayersCleared reports if the "album_cosplayers" edge to the AlbumCosplayer entity was cleared.
func (m *AlbumMutation) AlbumCosplayersCleared() bool {
	return m.clearedalbum_cosplayers
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (m *AlbumMutation) RemoveAlbumCosplayerIDs(ids ...int32) {
	if m.removedalbum_cosplayers == nil {
		m.removedalbum_cosplayers = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.album_cosplayers, ids[i])
		m.removedalbum_cosplayers[ids[i]] = struct{}{}
	}
}

// RemovedAlbumCosplayers returns the removed IDs of the "album_cosplayers" edge to the AlbumCosplayer entity.
func (m *AlbumMutation) RemovedAlbumCosplayersIDs() (ids []int32) {
	for id := range m.removedalbum_cosplayers {
		ids = append(ids, id)
	}
	return
}

// AlbumCosplayersIDs returns the "album_cosplayers" edge IDs in the mutation.
func (m *AlbumMutation) AlbumCosplayersIDs() (ids []int32) {
	for id := range m.album_cosplayers {
		ids = append(ids, id)
	}
	return
}

// ResetAlbumCosplayers resets all changes to the "album_cosplayers" edge.
func (m *AlbumMutation) ResetAlbumCosplayers() {
	m.album_cosplayers = nil
	m.clearedalbum_cosplayers = false
	m.removedalbum_cosplayers = nil
}

// Where appends a list predicates to the AlbumMutation builder.
func (m *AlbumMutation) Where(ps ...predicate.Album) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlbumMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Album).
func (m *AlbumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.slug != nil {
		fields = append(fields, album.FieldSlug)
	}
	if m.title != nil {
		fields = append(fields, album.FieldTitle)
	}
	if m.body != nil {
		fields = append(fields, album.FieldBody)
	}
	if m.published_at != nil {
		fields = append(fields, album.FieldPublishedAt)
	}
	if m.private != nil {
		fields = append(fields, album.FieldPrivate)
	}
	if m.user_id != nil {
		fields = append(fields, album.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, album.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, album.FieldUpdatedAt)
	}
	if m.notify_users_on_published != nil {
		fields = append(fields, album.FieldNotifyUsersOnPublished)
	}
	if m.meta_description != nil {
		fields = append(fields, album.FieldMetaDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case album.FieldSlug:
		return m.Slug()
	case album.FieldTitle:
		return m.Title()
	case album.FieldBody:
		return m.Body()
	case album.FieldPublishedAt:
		return m.PublishedAt()
	case album.FieldPrivate:
		return m.Private()
	case album.FieldUserID:
		return m.UserID()
	case album.FieldCreatedAt:
		return m.CreatedAt()
	case album.FieldUpdatedAt:
		return m.UpdatedAt()
	case album.FieldNotifyUsersOnPublished:
		return m.NotifyUsersOnPublished()
	case album.FieldMetaDescription:
		return m.MetaDescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case album.FieldSlug:
		return m.OldSlug(ctx)
	case album.FieldTitle:
		return m.OldTitle(ctx)
	case album.FieldBody:
		return m.OldBody(ctx)
	case album.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case album.FieldPrivate:
		return m.OldPrivate(ctx)
	case album.FieldUserID:
		return m.OldUserID(ctx)
	case album.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case album.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case album.FieldNotifyUsersOnPublished:
		return m.OldNotifyUsersOnPublished(ctx)
	case album.FieldMetaDescription:
		return m.OldMetaDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Album field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case album.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case album.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case album.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case album.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case album.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case album.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case album.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case album.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case album.FieldNotifyUsersOnPublished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifyUsersOnPublished(v)
		return nil
	case album.FieldMetaDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetaDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, album.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case album.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) AddField(name string, value ent.Value) error {
	switch name {
	case album.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Album numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(album.FieldBody) {
		fields = append(fields, album.FieldBody)
	}
	if m.FieldCleared(album.FieldPublishedAt) {
		fields = append(fields, album.FieldPublishedAt)
	}
	if m.FieldCleared(album.FieldUserID) {
		fields = append(fields, album.FieldUserID)
	}
	if m.FieldCleared(album.FieldCreatedAt) {
		fields = append(fields, album.FieldCreatedAt)
	}
	if m.FieldCleared(album.FieldUpdatedAt) {
		fields = append(fields, album.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumMutation) ClearField(name string) error {
	switch name {
	case album.FieldBody:
		m.ClearBody()
		return nil
	case album.FieldPublishedAt:
		m.ClearPublishedAt()
		return nil
	case album.FieldUserID:
		m.ClearUserID()
		return nil
	case album.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case album.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Album nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumMutation) ResetField(name string) error {
	switch name {
	case album.FieldSlug:
		m.ResetSlug()
		return nil
	case album.FieldTitle:
		m.ResetTitle()
		return nil
	case album.FieldBody:
		m.ResetBody()
		return nil
	case album.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case album.FieldPrivate:
		m.ResetPrivate()
		return nil
	case album.FieldUserID:
		m.ResetUserID()
		return nil
	case album.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case album.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case album.FieldNotifyUsersOnPublished:
		m.ResetNotifyUsersOnPublished()
		return nil
	case album.FieldMetaDescription:
		m.ResetMetaDescription()
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.album_categories != nil {
		edges = append(edges, album.EdgeAlbumCategories)
	}
	if m.album_cosplayers != nil {
		edges = append(edges, album.EdgeAlbumCosplayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeAlbumCategories:
		ids := make([]ent.Value, 0, len(m.album_categories))
		for id := range m.album_categories {
			ids = append(ids, id)
		}
		return ids
	case album.EdgeAlbumCosplayers:
		ids := make([]ent.Value, 0, len(m.album_cosplayers))
		for id := range m.album_cosplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedalbum_categories != nil {
		edges = append(edges, album.EdgeAlbumCategories)
	}
	if m.removedalbum_cosplayers != nil {
		edges = append(edges, album.EdgeAlbumCosplayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeAlbumCategories:
		ids := make([]ent.Value, 0, len(m.removedalbum_categories))
		for id := range m.removedalbum_categories {
			ids = append(ids, id)
		}
		return ids
	case album.EdgeAlbumCosplayers:
		ids := make([]ent.Value, 0, len(m.removedalbum_cosplayers))
		for id := range m.removedalbum_cosplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedalbum_categories {
		edges = append(edges, album.EdgeAlbumCategories)
	}
	if m.clearedalbum_cosplayers {
		edges = append(edges, album.EdgeAlbumCosplayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumMutation) EdgeCleared(name string) bool {
	switch name {
	case album.EdgeAlbumCategories:
		return m.clearedalbum_categories
	case album.EdgeAlbumCosplayers:
		return m.clearedalbum_cosplayers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Album unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumMutation) ResetEdge(name string) error {
	switch name {
	case album.EdgeAlbumCategories:
		m.ResetAlbumCategories()
		return nil
	case album.EdgeAlbumCosplayers:
		m.ResetAlbumCosplayers()
		return nil
	}
	return fmt.Errorf("unknown Album edge %s", name)
}

// AlbumCategoryMutation represents an operation that mutates the AlbumCategory nodes in the graph.
type AlbumCategoryMutation struct {
	config
	op              Op
	typ             string
	id              *int32
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	album           *int32
	clearedalbum    bool
	category        *int32
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*AlbumCategory, error)
	predicates      []predicate.AlbumCategory
}

var _ ent.Mutation = (*AlbumCategoryMutation)(nil)

// albumcategoryOption allows management of the mutation configuration using functional options.
type albumcategoryOption func(*AlbumCategoryMutation)

// newAlbumCategoryMutation creates new mutation for the AlbumCategory entity.
func newAlbumCategoryMutation(c config, op Op, opts ...albumcategoryOption) *AlbumCategoryMutation {
	m := &AlbumCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbumCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumCategoryID sets the ID field of the mutation.
func withAlbumCategoryID(id int32) albumcategoryOption {
	return func(m *AlbumCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *AlbumCategory
		)
		m.oldValue = func(ctx context.Context) (*AlbumCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AlbumCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbumCategory sets the old AlbumCategory of the mutation.
func withAlbumCategory(node *AlbumCategory) albumcategoryOption {
	return func(m *AlbumCategoryMutation) {
		m.oldValue = func(context.Context) (*AlbumCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AlbumCategory entities.
func (m *AlbumCategoryMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlbumCategoryMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlbumCategoryMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AlbumCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAlbumID sets the "album_id" field.
func (m *AlbumCategoryMutation) SetAlbumID(i int32) {
	m.album = &i
}

// AlbumID returns the value of the "album_id" field in the mutation.
func (m *AlbumCategoryMutation) AlbumID() (r int32, exists bool) {
	v := m.album
	if v == nil {
		return
	}
	return *v, true
}

// OldAlbumID returns the old "album_id" field's value of the AlbumCategory entity.
// If the AlbumCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCategoryMutation) OldAlbumID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlbumID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlbumID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlbumID: %w", err)
	}
	return oldValue.AlbumID, nil
}

// ClearAlbumID clears the value of the "album_id" field.
func (m *AlbumCategoryMutation) ClearAlbumID() {
	m.album = nil
	m.clearedFields[albumcategory.FieldAlbumID] = struct{}{}
}

// AlbumIDCleared returns if the "album_id" field was cleared in this mutation.
func (m *AlbumCategoryMutation) AlbumIDCleared() bool {
	_, ok := m.clearedFields[albumcategory.FieldAlbumID]
	return ok
}

// ResetAlbumID resets all changes to the "album_id" field.
func (m *AlbumCategoryMutation) ResetAlbumID() {
	m.album = nil
	delete(m.clearedFields, albumcategory.FieldAlbumID)
}

// SetCategoryID sets the "category_id" field.
func (m *AlbumCategoryMutation) SetCategoryID(i int32) {
	m.category = &i
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *AlbumCategoryMutation) CategoryID() (r int32, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the AlbumCategory entity.
// If the AlbumCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCategoryMutation) OldCategoryID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *AlbumCategoryMutation) ClearCategoryID() {
	m.category = nil
	m.clearedFields[albumcategory.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *AlbumCategoryMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[albumcategory.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *AlbumCategoryMutation) ResetCategoryID() {
	m.category = nil
	delete(m.clearedFields, albumcategory.FieldCategoryID)
}

// SetCreatedAt sets the "created_at" field.
func (m *AlbumCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlbumCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AlbumCategory entity.
// If the AlbumCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AlbumCategoryMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[albumcategory.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AlbumCategoryMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[albumcategory.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlbumCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, albumcategory.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AlbumCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AlbumCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AlbumCategory entity.
// If the AlbumCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AlbumCategoryMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[albumcategory.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AlbumCategoryMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[albumcategory.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AlbumCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, albumcategory.FieldUpdatedAt)
}

// ClearAlbum clears the "album" edge to the Album entity.
func (m *AlbumCategoryMutation) ClearAlbum() {
	m.clearedalbum = true
}

// AlbumCleared reports if the "album" edge to the Album entity was cleared.
func (m *AlbumCategoryMutation) AlbumCleared() bool {
	return m.AlbumIDCleared() || m.clearedalbum
}

// AlbumIDs returns the "album" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlbumID instead. It exists only for internal usage by the builders.
func (m *AlbumCategoryMutation) AlbumIDs() (ids []int32) {
	if id := m.album; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlbum resets all changes to the "album" edge.
func (m *AlbumCategoryMutation) ResetAlbum() {
	m.album = nil
	m.clearedalbum = false
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *AlbumCategoryMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *AlbumCategoryMutation) CategoryCleared() bool {
	return m.CategoryIDCleared() || m.clearedcategory
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *AlbumCategoryMutation) CategoryIDs() (ids []int32) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *AlbumCategoryMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the AlbumCategoryMutation builder.
func (m *AlbumCategoryMutation) Where(ps ...predicate.AlbumCategory) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlbumCategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AlbumCategory).
func (m *AlbumCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumCategoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.album != nil {
		fields = append(fields, albumcategory.FieldAlbumID)
	}
	if m.category != nil {
		fields = append(fields, albumcategory.FieldCategoryID)
	}
	if m.created_at != nil {
		fields = append(fields, albumcategory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, albumcategory.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case albumcategory.FieldAlbumID:
		return m.AlbumID()
	case albumcategory.FieldCategoryID:
		return m.CategoryID()
	case albumcategory.FieldCreatedAt:
		return m.CreatedAt()
	case albumcategory.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case albumcategory.FieldAlbumID:
		return m.OldAlbumID(ctx)
	case albumcategory.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case albumcategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case albumcategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AlbumCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case albumcategory.FieldAlbumID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlbumID(v)
		return nil
	case albumcategory.FieldCategoryID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case albumcategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case albumcategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AlbumCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumCategoryMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AlbumCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumCategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(albumcategory.FieldAlbumID) {
		fields = append(fields, albumcategory.FieldAlbumID)
	}
	if m.FieldCleared(albumcategory.FieldCategoryID) {
		fields = append(fields, albumcategory.FieldCategoryID)
	}
	if m.FieldCleared(albumcategory.FieldCreatedAt) {
		fields = append(fields, albumcategory.FieldCreatedAt)
	}
	if m.FieldCleared(albumcategory.FieldUpdatedAt) {
		fields = append(fields, albumcategory.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumCategoryMutation) ClearField(name string) error {
	switch name {
	case albumcategory.FieldAlbumID:
		m.ClearAlbumID()
		return nil
	case albumcategory.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	case albumcategory.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case albumcategory.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AlbumCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumCategoryMutation) ResetField(name string) error {
	switch name {
	case albumcategory.FieldAlbumID:
		m.ResetAlbumID()
		return nil
	case albumcategory.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case albumcategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case albumcategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AlbumCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.album != nil {
		edges = append(edges, albumcategory.EdgeAlbum)
	}
	if m.category != nil {
		edges = append(edges, albumcategory.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case albumcategory.EdgeAlbum:
		if id := m.album; id != nil {
			return []ent.Value{*id}
		}
	case albumcategory.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedalbum {
		edges = append(edges, albumcategory.EdgeAlbum)
	}
	if m.clearedcategory {
		edges = append(edges, albumcategory.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case albumcategory.EdgeAlbum:
		return m.clearedalbum
	case albumcategory.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumCategoryMutation) ClearEdge(name string) error {
	switch name {
	case albumcategory.EdgeAlbum:
		m.ClearAlbum()
		return nil
	case albumcategory.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown AlbumCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumCategoryMutation) ResetEdge(name string) error {
	switch name {
	case albumcategory.EdgeAlbum:
		m.ResetAlbum()
		return nil
	case albumcategory.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown AlbumCategory edge %s", name)
}

// AlbumCosplayerMutation represents an operation that mutates the AlbumCosplayer nodes in the graph.
type AlbumCosplayerMutation struct {
	config
	op               Op
	typ              string
	id               *int32
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	album            *int32
	clearedalbum     bool
	cosplayer        *int32
	clearedcosplayer bool
	done             bool
	oldValue         func(context.Context) (*AlbumCosplayer, error)
	predicates       []predicate.AlbumCosplayer
}

var _ ent.Mutation = (*AlbumCosplayerMutation)(nil)

// albumcosplayerOption allows management of the mutation configuration using functional options.
type albumcosplayerOption func(*AlbumCosplayerMutation)

// newAlbumCosplayerMutation creates new mutation for the AlbumCosplayer entity.
func newAlbumCosplayerMutation(c config, op Op, opts ...albumcosplayerOption) *AlbumCosplayerMutation {
	m := &AlbumCosplayerMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbumCosplayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumCosplayerID sets the ID field of the mutation.
func withAlbumCosplayerID(id int32) albumcosplayerOption {
	return func(m *AlbumCosplayerMutation) {
		var (
			err   error
			once  sync.Once
			value *AlbumCosplayer
		)
		m.oldValue = func(ctx context.Context) (*AlbumCosplayer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AlbumCosplayer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbumCosplayer sets the old AlbumCosplayer of the mutation.
func withAlbumCosplayer(node *AlbumCosplayer) albumcosplayerOption {
	return func(m *AlbumCosplayerMutation) {
		m.oldValue = func(context.Context) (*AlbumCosplayer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumCosplayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumCosplayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AlbumCosplayer entities.
func (m *AlbumCosplayerMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlbumCosplayerMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlbumCosplayerMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AlbumCosplayer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAlbumID sets the "album_id" field.
func (m *AlbumCosplayerMutation) SetAlbumID(i int32) {
	m.album = &i
}

// AlbumID returns the value of the "album_id" field in the mutation.
func (m *AlbumCosplayerMutation) AlbumID() (r int32, exists bool) {
	v := m.album
	if v == nil {
		return
	}
	return *v, true
}

// OldAlbumID returns the old "album_id" field's value of the AlbumCosplayer entity.
// If the AlbumCosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCosplayerMutation) OldAlbumID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlbumID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlbumID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlbumID: %w", err)
	}
	return oldValue.AlbumID, nil
}

// ClearAlbumID clears the value of the "album_id" field.
func (m *AlbumCosplayerMutation) ClearAlbumID() {
	m.album = nil
	m.clearedFields[albumcosplayer.FieldAlbumID] = struct{}{}
}

// AlbumIDCleared returns if the "album_id" field was cleared in this mutation.
func (m *AlbumCosplayerMutation) AlbumIDCleared() bool {
	_, ok := m.clearedFields[albumcosplayer.FieldAlbumID]
	return ok
}

// ResetAlbumID resets all changes to the "album_id" field.
func (m *AlbumCosplayerMutation) ResetAlbumID() {
	m.album = nil
	delete(m.clearedFields, albumcosplayer.FieldAlbumID)
}

// SetCosplayerID sets the "cosplayer_id" field.
func (m *AlbumCosplayerMutation) SetCosplayerID(i int32) {
	m.cosplayer = &i
}

// CosplayerID returns the value of the "cosplayer_id" field in the mutation.
func (m *AlbumCosplayerMutation) CosplayerID() (r int32, exists bool) {
	v := m.cosplayer
	if v == nil {
		return
	}
	return *v, true
}

// OldCosplayerID returns the old "cosplayer_id" field's value of the AlbumCosplayer entity.
// If the AlbumCosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCosplayerMutation) OldCosplayerID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCosplayerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCosplayerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCosplayerID: %w", err)
	}
	return oldValue.CosplayerID, nil
}

// ClearCosplayerID clears the value of the "cosplayer_id" field.
func (m *AlbumCosplayerMutation) ClearCosplayerID() {
	m.cosplayer = nil
	m.clearedFields[albumcosplayer.FieldCosplayerID] = struct{}{}
}

// CosplayerIDCleared returns if the "cosplayer_id" field was cleared in this mutation.
func (m *AlbumCosplayerMutation) CosplayerIDCleared() bool {
	_, ok := m.clearedFields[albumcosplayer.FieldCosplayerID]
	return ok
}

// ResetCosplayerID resets all changes to the "cosplayer_id" field.
func (m *AlbumCosplayerMutation) ResetCosplayerID() {
	m.cosplayer = nil
	delete(m.clearedFields, albumcosplayer.FieldCosplayerID)
}

// SetCreatedAt sets the "created_at" field.
func (m *AlbumCosplayerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AlbumCosplayerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AlbumCosplayer entity.
// If the AlbumCosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCosplayerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *AlbumCosplayerMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[albumcosplayer.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *AlbumCosplayerMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[albumcosplayer.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AlbumCosplayerMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, albumcosplayer.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AlbumCosplayerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AlbumCosplayerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AlbumCosplayer entity.
// If the AlbumCosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumCosplayerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *AlbumCosplayerMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[albumcosplayer.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *AlbumCosplayerMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[albumcosplayer.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AlbumCosplayerMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, albumcosplayer.FieldUpdatedAt)
}

// ClearAlbum clears the "album" edge to the Album entity.
func (m *AlbumCosplayerMutation) ClearAlbum() {
	m.clearedalbum = true
}

// AlbumCleared reports if the "album" edge to the Album entity was cleared.
func (m *AlbumCosplayerMutation) AlbumCleared() bool {
	return m.AlbumIDCleared() || m.clearedalbum
}

// AlbumIDs returns the "album" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlbumID instead. It exists only for internal usage by the builders.
func (m *AlbumCosplayerMutation) AlbumIDs() (ids []int32) {
	if id := m.album; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlbum resets all changes to the "album" edge.
func (m *AlbumCosplayerMutation) ResetAlbum() {
	m.album = nil
	m.clearedalbum = false
}

// ClearCosplayer clears the "cosplayer" edge to the Cosplayer entity.
func (m *AlbumCosplayerMutation) ClearCosplayer() {
	m.clearedcosplayer = true
}

// CosplayerCleared reports if the "cosplayer" edge to the Cosplayer entity was cleared.
func (m *AlbumCosplayerMutation) CosplayerCleared() bool {
	return m.CosplayerIDCleared() || m.clearedcosplayer
}

// CosplayerIDs returns the "cosplayer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CosplayerID instead. It exists only for internal usage by the builders.
func (m *AlbumCosplayerMutation) CosplayerIDs() (ids []int32) {
	if id := m.cosplayer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCosplayer resets all changes to the "cosplayer" edge.
func (m *AlbumCosplayerMutation) ResetCosplayer() {
	m.cosplayer = nil
	m.clearedcosplayer = false
}

// Where appends a list predicates to the AlbumCosplayerMutation builder.
func (m *AlbumCosplayerMutation) Where(ps ...predicate.AlbumCosplayer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AlbumCosplayerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AlbumCosplayer).
func (m *AlbumCosplayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumCosplayerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.album != nil {
		fields = append(fields, albumcosplayer.FieldAlbumID)
	}
	if m.cosplayer != nil {
		fields = append(fields, albumcosplayer.FieldCosplayerID)
	}
	if m.created_at != nil {
		fields = append(fields, albumcosplayer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, albumcosplayer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumCosplayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case albumcosplayer.FieldAlbumID:
		return m.AlbumID()
	case albumcosplayer.FieldCosplayerID:
		return m.CosplayerID()
	case albumcosplayer.FieldCreatedAt:
		return m.CreatedAt()
	case albumcosplayer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumCosplayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case albumcosplayer.FieldAlbumID:
		return m.OldAlbumID(ctx)
	case albumcosplayer.FieldCosplayerID:
		return m.OldCosplayerID(ctx)
	case albumcosplayer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case albumcosplayer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AlbumCosplayer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumCosplayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case albumcosplayer.FieldAlbumID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlbumID(v)
		return nil
	case albumcosplayer.FieldCosplayerID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCosplayerID(v)
		return nil
	case albumcosplayer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case albumcosplayer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AlbumCosplayer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumCosplayerMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumCosplayerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumCosplayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AlbumCosplayer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumCosplayerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(albumcosplayer.FieldAlbumID) {
		fields = append(fields, albumcosplayer.FieldAlbumID)
	}
	if m.FieldCleared(albumcosplayer.FieldCosplayerID) {
		fields = append(fields, albumcosplayer.FieldCosplayerID)
	}
	if m.FieldCleared(albumcosplayer.FieldCreatedAt) {
		fields = append(fields, albumcosplayer.FieldCreatedAt)
	}
	if m.FieldCleared(albumcosplayer.FieldUpdatedAt) {
		fields = append(fields, albumcosplayer.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumCosplayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumCosplayerMutation) ClearField(name string) error {
	switch name {
	case albumcosplayer.FieldAlbumID:
		m.ClearAlbumID()
		return nil
	case albumcosplayer.FieldCosplayerID:
		m.ClearCosplayerID()
		return nil
	case albumcosplayer.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case albumcosplayer.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AlbumCosplayer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumCosplayerMutation) ResetField(name string) error {
	switch name {
	case albumcosplayer.FieldAlbumID:
		m.ResetAlbumID()
		return nil
	case albumcosplayer.FieldCosplayerID:
		m.ResetCosplayerID()
		return nil
	case albumcosplayer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case albumcosplayer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AlbumCosplayer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumCosplayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.album != nil {
		edges = append(edges, albumcosplayer.EdgeAlbum)
	}
	if m.cosplayer != nil {
		edges = append(edges, albumcosplayer.EdgeCosplayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumCosplayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case albumcosplayer.EdgeAlbum:
		if id := m.album; id != nil {
			return []ent.Value{*id}
		}
	case albumcosplayer.EdgeCosplayer:
		if id := m.cosplayer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumCosplayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumCosplayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumCosplayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedalbum {
		edges = append(edges, albumcosplayer.EdgeAlbum)
	}
	if m.clearedcosplayer {
		edges = append(edges, albumcosplayer.EdgeCosplayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumCosplayerMutation) EdgeCleared(name string) bool {
	switch name {
	case albumcosplayer.EdgeAlbum:
		return m.clearedalbum
	case albumcosplayer.EdgeCosplayer:
		return m.clearedcosplayer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumCosplayerMutation) ClearEdge(name string) error {
	switch name {
	case albumcosplayer.EdgeAlbum:
		m.ClearAlbum()
		return nil
	case albumcosplayer.EdgeCosplayer:
		m.ClearCosplayer()
		return nil
	}
	return fmt.Errorf("unknown AlbumCosplayer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumCosplayerMutation) ResetEdge(name string) error {
	switch name {
	case albumcosplayer.EdgeAlbum:
		m.ResetAlbum()
		return nil
	case albumcosplayer.EdgeCosplayer:
		m.ResetCosplayer()
		return nil
	}
	return fmt.Errorf("unknown AlbumCosplayer edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int32
	name                    *string
	slug                    *string
	description             *string
	created_at              *time.Time
	updated_at              *time.Time
	meta_description        *string
	clearedFields           map[string]struct{}
	album_categories        map[int32]struct{}
	removedalbum_categories map[int32]struct{}
	clearedalbum_categories bool
	done                    bool
	oldValue                func(context.Context) (*Category, error)
	predicates              []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int32) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *CategoryMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *CategoryMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *CategoryMutation) ResetSlug() {
	m.slug = nil
}

// SetDescription sets the "description" field.
func (m *CategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CategoryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[category.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CategoryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[category.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CategoryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, category.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *CategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CategoryMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[category.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CategoryMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[category.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CategoryMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, category.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CategoryMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[category.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CategoryMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[category.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, category.FieldUpdatedAt)
}

// SetMetaDescription sets the "meta_description" field.
func (m *CategoryMutation) SetMetaDescription(s string) {
	m.meta_description = &s
}

// MetaDescription returns the value of the "meta_description" field in the mutation.
func (m *CategoryMutation) MetaDescription() (r string, exists bool) {
	v := m.meta_description
	if v == nil {
		return
	}
	return *v, true
}

// OldMetaDescription returns the old "meta_description" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldMetaDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetaDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetaDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetaDescription: %w", err)
	}
	return oldValue.MetaDescription, nil
}

// ResetMetaDescription resets all changes to the "meta_description" field.
func (m *CategoryMutation) ResetMetaDescription() {
	m.meta_description = nil
}

// AddAlbumCategoryIDs adds the "album_categories" edge to the AlbumCategory entity by ids.
func (m *CategoryMutation) AddAlbumCategoryIDs(ids ...int32) {
	if m.album_categories == nil {
		m.album_categories = make(map[int32]struct{})
	}
	for i := range ids {
		m.album_categories[ids[i]] = struct{}{}
	}
}

// ClearAlbumCategories clears the "album_categories" edge to the AlbumCategory entity.
func (m *CategoryMutation) ClearAlbumCategories() {
	m.clearedalbum_categories = true
}

// AlbumCategoriesCleared reports if the "album_categories" edge to the AlbumCategory entity was cleared.
func (m *CategoryMutation) AlbumCategoriesCleared() bool {
	return m.clearedalbum_categories
}

// RemoveAlbumCategoryIDs removes the "album_categories" edge to the AlbumCategory entity by IDs.
func (m *CategoryMutation) RemoveAlbumCategoryIDs(ids ...int32) {
	if m.removedalbum_categories == nil {
		m.removedalbum_categories = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.album_categories, ids[i])
		m.removedalbum_categories[ids[i]] = struct{}{}
	}
}

// RemovedAlbumCategories returns the removed IDs of the "album_categories" edge to the AlbumCategory entity.
func (m *CategoryMutation) RemovedAlbumCategoriesIDs() (ids []int32) {
	for id := range m.removedalbum_categories {
		ids = append(ids, id)
	}
	return
}

// AlbumCategoriesIDs returns the "album_categories" edge IDs in the mutation.
func (m *CategoryMutation) AlbumCategoriesIDs() (ids []int32) {
	for id := range m.album_categories {
		ids = append(ids, id)
	}
	return
}

// ResetAlbumCategories resets all changes to the "album_categories" edge.
func (m *CategoryMutation) ResetAlbumCategories() {
	m.album_categories = nil
	m.clearedalbum_categories = false
	m.removedalbum_categories = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, category.FieldSlug)
	}
	if m.description != nil {
		fields = append(fields, category.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, category.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, category.FieldUpdatedAt)
	}
	if m.meta_description != nil {
		fields = append(fields, category.FieldMetaDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	case category.FieldSlug:
		return m.Slug()
	case category.FieldDescription:
		return m.Description()
	case category.FieldCreatedAt:
		return m.CreatedAt()
	case category.FieldUpdatedAt:
		return m.UpdatedAt()
	case category.FieldMetaDescription:
		return m.MetaDescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldSlug:
		return m.OldSlug(ctx)
	case category.FieldDescription:
		return m.OldDescription(ctx)
	case category.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case category.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case category.FieldMetaDescription:
		return m.OldMetaDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case category.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case category.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case category.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case category.FieldMetaDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetaDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(category.FieldDescription) {
		fields = append(fields, category.FieldDescription)
	}
	if m.FieldCleared(category.FieldCreatedAt) {
		fields = append(fields, category.FieldCreatedAt)
	}
	if m.FieldCleared(category.FieldUpdatedAt) {
		fields = append(fields, category.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	switch name {
	case category.FieldDescription:
		m.ClearDescription()
		return nil
	case category.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case category.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldSlug:
		m.ResetSlug()
		return nil
	case category.FieldDescription:
		m.ResetDescription()
		return nil
	case category.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case category.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case category.FieldMetaDescription:
		m.ResetMetaDescription()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.album_categories != nil {
		edges = append(edges, category.EdgeAlbumCategories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeAlbumCategories:
		ids := make([]ent.Value, 0, len(m.album_categories))
		for id := range m.album_categories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedalbum_categories != nil {
		edges = append(edges, category.EdgeAlbumCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeAlbumCategories:
		ids := make([]ent.Value, 0, len(m.removedalbum_categories))
		for id := range m.removedalbum_categories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedalbum_categories {
		edges = append(edges, category.EdgeAlbumCategories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeAlbumCategories:
		return m.clearedalbum_categories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeAlbumCategories:
		m.ResetAlbumCategories()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// CosplayerMutation represents an operation that mutates the Cosplayer nodes in the graph.
type CosplayerMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int32
	name                    *string
	slug                    *string
	description             *string
	picture                 *string
	user_id                 *int
	adduser_id              *int
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	album_cosplayers        map[int32]struct{}
	removedalbum_cosplayers map[int32]struct{}
	clearedalbum_cosplayers bool
	done                    bool
	oldValue                func(context.Context) (*Cosplayer, error)
	predicates              []predicate.Cosplayer
}

var _ ent.Mutation = (*CosplayerMutation)(nil)

// cosplayerOption allows management of the mutation configuration using functional options.
type cosplayerOption func(*CosplayerMutation)

// newCosplayerMutation creates new mutation for the Cosplayer entity.
func newCosplayerMutation(c config, op Op, opts ...cosplayerOption) *CosplayerMutation {
	m := &CosplayerMutation{
		config:        c,
		op:            op,
		typ:           TypeCosplayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCosplayerID sets the ID field of the mutation.
func withCosplayerID(id int32) cosplayerOption {
	return func(m *CosplayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Cosplayer
		)
		m.oldValue = func(ctx context.Context) (*Cosplayer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cosplayer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCosplayer sets the old Cosplayer of the mutation.
func withCosplayer(node *Cosplayer) cosplayerOption {
	return func(m *CosplayerMutation) {
		m.oldValue = func(context.Context) (*Cosplayer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CosplayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CosplayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cosplayer entities.
func (m *CosplayerMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CosplayerMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CosplayerMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cosplayer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CosplayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CosplayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CosplayerMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *CosplayerMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *CosplayerMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *CosplayerMutation) ResetSlug() {
	m.slug = nil
}

// SetDescription sets the "description" field.
func (m *CosplayerMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CosplayerMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CosplayerMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[cosplayer.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CosplayerMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[cosplayer.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CosplayerMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, cosplayer.FieldDescription)
}

// SetPicture sets the "picture" field.
func (m *CosplayerMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *CosplayerMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ClearPicture clears the value of the "picture" field.
func (m *CosplayerMutation) ClearPicture() {
	m.picture = nil
	m.clearedFields[cosplayer.FieldPicture] = struct{}{}
}

// PictureCleared returns if the "picture" field was cleared in this mutation.
func (m *CosplayerMutation) PictureCleared() bool {
	_, ok := m.clearedFields[cosplayer.FieldPicture]
	return ok
}

// ResetPicture resets all changes to the "picture" field.
func (m *CosplayerMutation) ResetPicture() {
	m.picture = nil
	delete(m.clearedFields, cosplayer.FieldPicture)
}

// SetUserID sets the "user_id" field.
func (m *CosplayerMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CosplayerMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *CosplayerMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *CosplayerMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "user_id" field.
func (m *CosplayerMutation) ClearUserID() {
	m.user_id = nil
	m.adduser_id = nil
	m.clearedFields[cosplayer.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CosplayerMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[cosplayer.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CosplayerMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
	delete(m.clearedFields, cosplayer.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *CosplayerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CosplayerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CosplayerMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[cosplayer.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CosplayerMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[cosplayer.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CosplayerMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, cosplayer.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CosplayerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CosplayerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Cosplayer entity.
// If the Cosplayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CosplayerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CosplayerMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[cosplayer.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CosplayerMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[cosplayer.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CosplayerMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, cosplayer.FieldUpdatedAt)
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by ids.
func (m *CosplayerMutation) AddAlbumCosplayerIDs(ids ...int32) {
	if m.album_cosplayers == nil {
		m.album_cosplayers = make(map[int32]struct{})
	}
	for i := range ids {
		m.album_cosplayers[ids[i]] = struct{}{}
	}
}

// ClearAlbumCosplayers clears the "album_cosplayers" edge to the AlbumCosplayer entity.
func (m *CosplayerMutation) ClearAlbumCosplayers() {
	m.clearedalbum_cosplayers = true
}

// AlbumCosplayersCleared reports if the "album_cosplayers" edge to the AlbumCosplayer entity was cleared.
func (m *CosplayerMutation) AlbumCosplayersCleared() bool {
	return m.clearedalbum_cosplayers
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (m *CosplayerMutation) RemoveAlbumCosplayerIDs(ids ...int32) {
	if m.removedalbum_cosplayers == nil {
		m.removedalbum_cosplayers = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.album_cosplayers, ids[i])
		m.removedalbum_cosplayers[ids[i]] = struct{}{}
	}
}

// RemovedAlbumCosplayers returns the removed IDs of the "album_cosplayers" edge to the AlbumCosplayer entity.
func (m *CosplayerMutation) RemovedAlbumCosplayersIDs() (ids []int32) {
	for id := range m.removedalbum_cosplayers {
		ids = append(ids, id)
	}
	return
}

// AlbumCosplayersIDs returns the "album_cosplayers" edge IDs in the mutation.
func (m *CosplayerMutation) AlbumCosplayersIDs() (ids []int32) {
	for id := range m.album_cosplayers {
		ids = append(ids, id)
	}
	return
}

// ResetAlbumCosplayers resets all changes to the "album_cosplayers" edge.
func (m *CosplayerMutation) ResetAlbumCosplayers() {
	m.album_cosplayers = nil
	m.clearedalbum_cosplayers = false
	m.removedalbum_cosplayers = nil
}

// Where appends a list predicates to the CosplayerMutation builder.
func (m *CosplayerMutation) Where(ps ...predicate.Cosplayer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CosplayerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Cosplayer).
func (m *CosplayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CosplayerMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, cosplayer.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, cosplayer.FieldSlug)
	}
	if m.description != nil {
		fields = append(fields, cosplayer.FieldDescription)
	}
	if m.picture != nil {
		fields = append(fields, cosplayer.FieldPicture)
	}
	if m.user_id != nil {
		fields = append(fields, cosplayer.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, cosplayer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cosplayer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CosplayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cosplayer.FieldName:
		return m.Name()
	case cosplayer.FieldSlug:
		return m.Slug()
	case cosplayer.FieldDescription:
		return m.Description()
	case cosplayer.FieldPicture:
		return m.Picture()
	case cosplayer.FieldUserID:
		return m.UserID()
	case cosplayer.FieldCreatedAt:
		return m.CreatedAt()
	case cosplayer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CosplayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cosplayer.FieldName:
		return m.OldName(ctx)
	case cosplayer.FieldSlug:
		return m.OldSlug(ctx)
	case cosplayer.FieldDescription:
		return m.OldDescription(ctx)
	case cosplayer.FieldPicture:
		return m.OldPicture(ctx)
	case cosplayer.FieldUserID:
		return m.OldUserID(ctx)
	case cosplayer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cosplayer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Cosplayer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CosplayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cosplayer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cosplayer.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case cosplayer.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case cosplayer.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case cosplayer.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case cosplayer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cosplayer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Cosplayer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CosplayerMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, cosplayer.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CosplayerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cosplayer.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CosplayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cosplayer.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Cosplayer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CosplayerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cosplayer.FieldDescription) {
		fields = append(fields, cosplayer.FieldDescription)
	}
	if m.FieldCleared(cosplayer.FieldPicture) {
		fields = append(fields, cosplayer.FieldPicture)
	}
	if m.FieldCleared(cosplayer.FieldUserID) {
		fields = append(fields, cosplayer.FieldUserID)
	}
	if m.FieldCleared(cosplayer.FieldCreatedAt) {
		fields = append(fields, cosplayer.FieldCreatedAt)
	}
	if m.FieldCleared(cosplayer.FieldUpdatedAt) {
		fields = append(fields, cosplayer.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CosplayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CosplayerMutation) ClearField(name string) error {
	switch name {
	case cosplayer.FieldDescription:
		m.ClearDescription()
		return nil
	case cosplayer.FieldPicture:
		m.ClearPicture()
		return nil
	case cosplayer.FieldUserID:
		m.ClearUserID()
		return nil
	case cosplayer.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case cosplayer.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Cosplayer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CosplayerMutation) ResetField(name string) error {
	switch name {
	case cosplayer.FieldName:
		m.ResetName()
		return nil
	case cosplayer.FieldSlug:
		m.ResetSlug()
		return nil
	case cosplayer.FieldDescription:
		m.ResetDescription()
		return nil
	case cosplayer.FieldPicture:
		m.ResetPicture()
		return nil
	case cosplayer.FieldUserID:
		m.ResetUserID()
		return nil
	case cosplayer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cosplayer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Cosplayer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CosplayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.album_cosplayers != nil {
		edges = append(edges, cosplayer.EdgeAlbumCosplayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CosplayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cosplayer.EdgeAlbumCosplayers:
		ids := make([]ent.Value, 0, len(m.album_cosplayers))
		for id := range m.album_cosplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CosplayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedalbum_cosplayers != nil {
		edges = append(edges, cosplayer.EdgeAlbumCosplayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CosplayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cosplayer.EdgeAlbumCosplayers:
		ids := make([]ent.Value, 0, len(m.removedalbum_cosplayers))
		for id := range m.removedalbum_cosplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CosplayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedalbum_cosplayers {
		edges = append(edges, cosplayer.EdgeAlbumCosplayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CosplayerMutation) EdgeCleared(name string) bool {
	switch name {
	case cosplayer.EdgeAlbumCosplayers:
		return m.clearedalbum_cosplayers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CosplayerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Cosplayer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CosplayerMutation) ResetEdge(name string) error {
	switch name {
	case cosplayer.EdgeAlbumCosplayers:
		m.ResetAlbumCosplayers()
		return nil
	}
	return fmt.Errorf("unknown Cosplayer edge %s", name)
}

// SettingMutation represents an operation that mutates the Setting nodes in the graph.
type SettingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	value         *string
	title         *string
	description   *string
	created_at    *time.Time
	updated_at    *time.Time
	_type         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Setting, error)
	predicates    []predicate.Setting
}

var _ ent.Mutation = (*SettingMutation)(nil)

// settingOption allows management of the mutation configuration using functional options.
type settingOption func(*SettingMutation)

// newSettingMutation creates new mutation for the Setting entity.
func newSettingMutation(c config, op Op, opts ...settingOption) *SettingMutation {
	m := &SettingMutation{
		config:        c,
		op:            op,
		typ:           TypeSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingID sets the ID field of the mutation.
func withSettingID(id int) settingOption {
	return func(m *SettingMutation) {
		var (
			err   error
			once  sync.Once
			value *Setting
		)
		m.oldValue = func(ctx context.Context) (*Setting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Setting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSetting sets the old Setting of the mutation.
func withSetting(node *Setting) settingOption {
	return func(m *SettingMutation) {
		m.oldValue = func(context.Context) (*Setting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Setting entities.
func (m *SettingMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Setting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SettingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SettingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SettingMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *SettingMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *SettingMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *SettingMutation) ClearValue() {
	m.value = nil
	m.clearedFields[setting.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *SettingMutation) ValueCleared() bool {
	_, ok := m.clearedFields[setting.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *SettingMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, setting.FieldValue)
}

// SetTitle sets the "title" field.
func (m *SettingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SettingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SettingMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *SettingMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SettingMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SettingMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[setting.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SettingMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[setting.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SettingMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, setting.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *SettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SettingMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[setting.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SettingMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[setting.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SettingMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, setting.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SettingMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[setting.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SettingMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[setting.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, setting.FieldUpdatedAt)
}

// SetType sets the "type" field.
func (m *SettingMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SettingMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SettingMutation) ResetType() {
	m._type = nil
}

// Where appends a list predicates to the SettingMutation builder.
func (m *SettingMutation) Where(ps ...predicate.Setting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Setting).
func (m *SettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, setting.FieldName)
	}
	if m.value != nil {
		fields = append(fields, setting.FieldValue)
	}
	if m.title != nil {
		fields = append(fields, setting.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, setting.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, setting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, setting.FieldUpdatedAt)
	}
	if m._type != nil {
		fields = append(fields, setting.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldName:
		return m.Name()
	case setting.FieldValue:
		return m.Value()
	case setting.FieldTitle:
		return m.Title()
	case setting.FieldDescription:
		return m.Description()
	case setting.FieldCreatedAt:
		return m.CreatedAt()
	case setting.FieldUpdatedAt:
		return m.UpdatedAt()
	case setting.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case setting.FieldName:
		return m.OldName(ctx)
	case setting.FieldValue:
		return m.OldValue(ctx)
	case setting.FieldTitle:
		return m.OldTitle(ctx)
	case setting.FieldDescription:
		return m.OldDescription(ctx)
	case setting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case setting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case setting.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Setting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case setting.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case setting.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case setting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case setting.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case setting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case setting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case setting.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Setting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(setting.FieldValue) {
		fields = append(fields, setting.FieldValue)
	}
	if m.FieldCleared(setting.FieldDescription) {
		fields = append(fields, setting.FieldDescription)
	}
	if m.FieldCleared(setting.FieldCreatedAt) {
		fields = append(fields, setting.FieldCreatedAt)
	}
	if m.FieldCleared(setting.FieldUpdatedAt) {
		fields = append(fields, setting.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingMutation) ClearField(name string) error {
	switch name {
	case setting.FieldValue:
		m.ClearValue()
		return nil
	case setting.FieldDescription:
		m.ClearDescription()
		return nil
	case setting.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case setting.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Setting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingMutation) ResetField(name string) error {
	switch name {
	case setting.FieldName:
		m.ResetName()
		return nil
	case setting.FieldValue:
		m.ResetValue()
		return nil
	case setting.FieldTitle:
		m.ResetTitle()
		return nil
	case setting.FieldDescription:
		m.ResetDescription()
		return nil
	case setting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case setting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case setting.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Setting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Setting edge %s", name)
}
