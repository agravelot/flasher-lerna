// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/albumcosplayer"
	"api-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlbumUpdate is the builder for updating Album entities.
type AlbumUpdate struct {
	config
	hooks    []Hook
	mutation *AlbumMutation
}

// Where appends a list predicates to the AlbumUpdate builder.
func (au *AlbumUpdate) Where(ps ...predicate.Album) *AlbumUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetSlug sets the "slug" field.
func (au *AlbumUpdate) SetSlug(s string) *AlbumUpdate {
	au.mutation.SetSlug(s)
	return au
}

// SetTitle sets the "title" field.
func (au *AlbumUpdate) SetTitle(s string) *AlbumUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetBody sets the "body" field.
func (au *AlbumUpdate) SetBody(s string) *AlbumUpdate {
	au.mutation.SetBody(s)
	return au
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableBody(s *string) *AlbumUpdate {
	if s != nil {
		au.SetBody(*s)
	}
	return au
}

// ClearBody clears the value of the "body" field.
func (au *AlbumUpdate) ClearBody() *AlbumUpdate {
	au.mutation.ClearBody()
	return au
}

// SetPublishedAt sets the "published_at" field.
func (au *AlbumUpdate) SetPublishedAt(t time.Time) *AlbumUpdate {
	au.mutation.SetPublishedAt(t)
	return au
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (au *AlbumUpdate) SetNillablePublishedAt(t *time.Time) *AlbumUpdate {
	if t != nil {
		au.SetPublishedAt(*t)
	}
	return au
}

// ClearPublishedAt clears the value of the "published_at" field.
func (au *AlbumUpdate) ClearPublishedAt() *AlbumUpdate {
	au.mutation.ClearPublishedAt()
	return au
}

// SetPrivate sets the "private" field.
func (au *AlbumUpdate) SetPrivate(b bool) *AlbumUpdate {
	au.mutation.SetPrivate(b)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AlbumUpdate) SetUserID(i int) *AlbumUpdate {
	au.mutation.ResetUserID()
	au.mutation.SetUserID(i)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableUserID(i *int) *AlbumUpdate {
	if i != nil {
		au.SetUserID(*i)
	}
	return au
}

// AddUserID adds i to the "user_id" field.
func (au *AlbumUpdate) AddUserID(i int) *AlbumUpdate {
	au.mutation.AddUserID(i)
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AlbumUpdate) ClearUserID() *AlbumUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AlbumUpdate) SetCreatedAt(t time.Time) *AlbumUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableCreatedAt(t *time.Time) *AlbumUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// ClearCreatedAt clears the value of the "created_at" field.
func (au *AlbumUpdate) ClearCreatedAt() *AlbumUpdate {
	au.mutation.ClearCreatedAt()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AlbumUpdate) SetUpdatedAt(t time.Time) *AlbumUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableUpdatedAt(t *time.Time) *AlbumUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AlbumUpdate) ClearUpdatedAt() *AlbumUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetNotifyUsersOnPublished sets the "notify_users_on_published" field.
func (au *AlbumUpdate) SetNotifyUsersOnPublished(b bool) *AlbumUpdate {
	au.mutation.SetNotifyUsersOnPublished(b)
	return au
}

// SetMetaDescription sets the "meta_description" field.
func (au *AlbumUpdate) SetMetaDescription(s string) *AlbumUpdate {
	au.mutation.SetMetaDescription(s)
	return au
}

// AddAlbumCategoryIDs adds the "album_categories" edge to the AlbumCategory entity by IDs.
func (au *AlbumUpdate) AddAlbumCategoryIDs(ids ...int32) *AlbumUpdate {
	au.mutation.AddAlbumCategoryIDs(ids...)
	return au
}

// AddAlbumCategories adds the "album_categories" edges to the AlbumCategory entity.
func (au *AlbumUpdate) AddAlbumCategories(a ...*AlbumCategory) *AlbumUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAlbumCategoryIDs(ids...)
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (au *AlbumUpdate) AddAlbumCosplayerIDs(ids ...int32) *AlbumUpdate {
	au.mutation.AddAlbumCosplayerIDs(ids...)
	return au
}

// AddAlbumCosplayers adds the "album_cosplayers" edges to the AlbumCosplayer entity.
func (au *AlbumUpdate) AddAlbumCosplayers(a ...*AlbumCosplayer) *AlbumUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAlbumCosplayerIDs(ids...)
}

// Mutation returns the AlbumMutation object of the builder.
func (au *AlbumUpdate) Mutation() *AlbumMutation {
	return au.mutation
}

// ClearAlbumCategories clears all "album_categories" edges to the AlbumCategory entity.
func (au *AlbumUpdate) ClearAlbumCategories() *AlbumUpdate {
	au.mutation.ClearAlbumCategories()
	return au
}

// RemoveAlbumCategoryIDs removes the "album_categories" edge to AlbumCategory entities by IDs.
func (au *AlbumUpdate) RemoveAlbumCategoryIDs(ids ...int32) *AlbumUpdate {
	au.mutation.RemoveAlbumCategoryIDs(ids...)
	return au
}

// RemoveAlbumCategories removes "album_categories" edges to AlbumCategory entities.
func (au *AlbumUpdate) RemoveAlbumCategories(a ...*AlbumCategory) *AlbumUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAlbumCategoryIDs(ids...)
}

// ClearAlbumCosplayers clears all "album_cosplayers" edges to the AlbumCosplayer entity.
func (au *AlbumUpdate) ClearAlbumCosplayers() *AlbumUpdate {
	au.mutation.ClearAlbumCosplayers()
	return au
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to AlbumCosplayer entities by IDs.
func (au *AlbumUpdate) RemoveAlbumCosplayerIDs(ids ...int32) *AlbumUpdate {
	au.mutation.RemoveAlbumCosplayerIDs(ids...)
	return au
}

// RemoveAlbumCosplayers removes "album_cosplayers" edges to AlbumCosplayer entities.
func (au *AlbumUpdate) RemoveAlbumCosplayers(a ...*AlbumCosplayer) *AlbumUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAlbumCosplayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlbumUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlbumUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlbumUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlbumUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AlbumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   album.Table,
			Columns: album.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: album.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldSlug,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldTitle,
		})
	}
	if value, ok := au.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldBody,
		})
	}
	if au.mutation.BodyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: album.FieldBody,
		})
	}
	if value, ok := au.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldPublishedAt,
		})
	}
	if au.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldPublishedAt,
		})
	}
	if value, ok := au.mutation.Private(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldPrivate,
		})
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: album.FieldUserID,
		})
	}
	if value, ok := au.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: album.FieldUserID,
		})
	}
	if au.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: album.FieldUserID,
		})
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldCreatedAt,
		})
	}
	if au.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldUpdatedAt,
		})
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.NotifyUsersOnPublished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldNotifyUsersOnPublished,
		})
	}
	if value, ok := au.mutation.MetaDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldMetaDescription,
		})
	}
	if au.mutation.AlbumCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAlbumCategoriesIDs(); len(nodes) > 0 && !au.mutation.AlbumCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AlbumCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAlbumCosplayersIDs(); len(nodes) > 0 && !au.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AlbumCosplayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{album.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AlbumUpdateOne is the builder for updating a single Album entity.
type AlbumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlbumMutation
}

// SetSlug sets the "slug" field.
func (auo *AlbumUpdateOne) SetSlug(s string) *AlbumUpdateOne {
	auo.mutation.SetSlug(s)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AlbumUpdateOne) SetTitle(s string) *AlbumUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetBody sets the "body" field.
func (auo *AlbumUpdateOne) SetBody(s string) *AlbumUpdateOne {
	auo.mutation.SetBody(s)
	return auo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableBody(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetBody(*s)
	}
	return auo
}

// ClearBody clears the value of the "body" field.
func (auo *AlbumUpdateOne) ClearBody() *AlbumUpdateOne {
	auo.mutation.ClearBody()
	return auo
}

// SetPublishedAt sets the "published_at" field.
func (auo *AlbumUpdateOne) SetPublishedAt(t time.Time) *AlbumUpdateOne {
	auo.mutation.SetPublishedAt(t)
	return auo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillablePublishedAt(t *time.Time) *AlbumUpdateOne {
	if t != nil {
		auo.SetPublishedAt(*t)
	}
	return auo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (auo *AlbumUpdateOne) ClearPublishedAt() *AlbumUpdateOne {
	auo.mutation.ClearPublishedAt()
	return auo
}

// SetPrivate sets the "private" field.
func (auo *AlbumUpdateOne) SetPrivate(b bool) *AlbumUpdateOne {
	auo.mutation.SetPrivate(b)
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AlbumUpdateOne) SetUserID(i int) *AlbumUpdateOne {
	auo.mutation.ResetUserID()
	auo.mutation.SetUserID(i)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableUserID(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetUserID(*i)
	}
	return auo
}

// AddUserID adds i to the "user_id" field.
func (auo *AlbumUpdateOne) AddUserID(i int) *AlbumUpdateOne {
	auo.mutation.AddUserID(i)
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AlbumUpdateOne) ClearUserID() *AlbumUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AlbumUpdateOne) SetCreatedAt(t time.Time) *AlbumUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableCreatedAt(t *time.Time) *AlbumUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (auo *AlbumUpdateOne) ClearCreatedAt() *AlbumUpdateOne {
	auo.mutation.ClearCreatedAt()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AlbumUpdateOne) SetUpdatedAt(t time.Time) *AlbumUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableUpdatedAt(t *time.Time) *AlbumUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AlbumUpdateOne) ClearUpdatedAt() *AlbumUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetNotifyUsersOnPublished sets the "notify_users_on_published" field.
func (auo *AlbumUpdateOne) SetNotifyUsersOnPublished(b bool) *AlbumUpdateOne {
	auo.mutation.SetNotifyUsersOnPublished(b)
	return auo
}

// SetMetaDescription sets the "meta_description" field.
func (auo *AlbumUpdateOne) SetMetaDescription(s string) *AlbumUpdateOne {
	auo.mutation.SetMetaDescription(s)
	return auo
}

// AddAlbumCategoryIDs adds the "album_categories" edge to the AlbumCategory entity by IDs.
func (auo *AlbumUpdateOne) AddAlbumCategoryIDs(ids ...int32) *AlbumUpdateOne {
	auo.mutation.AddAlbumCategoryIDs(ids...)
	return auo
}

// AddAlbumCategories adds the "album_categories" edges to the AlbumCategory entity.
func (auo *AlbumUpdateOne) AddAlbumCategories(a ...*AlbumCategory) *AlbumUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAlbumCategoryIDs(ids...)
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (auo *AlbumUpdateOne) AddAlbumCosplayerIDs(ids ...int32) *AlbumUpdateOne {
	auo.mutation.AddAlbumCosplayerIDs(ids...)
	return auo
}

// AddAlbumCosplayers adds the "album_cosplayers" edges to the AlbumCosplayer entity.
func (auo *AlbumUpdateOne) AddAlbumCosplayers(a ...*AlbumCosplayer) *AlbumUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAlbumCosplayerIDs(ids...)
}

// Mutation returns the AlbumMutation object of the builder.
func (auo *AlbumUpdateOne) Mutation() *AlbumMutation {
	return auo.mutation
}

// ClearAlbumCategories clears all "album_categories" edges to the AlbumCategory entity.
func (auo *AlbumUpdateOne) ClearAlbumCategories() *AlbumUpdateOne {
	auo.mutation.ClearAlbumCategories()
	return auo
}

// RemoveAlbumCategoryIDs removes the "album_categories" edge to AlbumCategory entities by IDs.
func (auo *AlbumUpdateOne) RemoveAlbumCategoryIDs(ids ...int32) *AlbumUpdateOne {
	auo.mutation.RemoveAlbumCategoryIDs(ids...)
	return auo
}

// RemoveAlbumCategories removes "album_categories" edges to AlbumCategory entities.
func (auo *AlbumUpdateOne) RemoveAlbumCategories(a ...*AlbumCategory) *AlbumUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAlbumCategoryIDs(ids...)
}

// ClearAlbumCosplayers clears all "album_cosplayers" edges to the AlbumCosplayer entity.
func (auo *AlbumUpdateOne) ClearAlbumCosplayers() *AlbumUpdateOne {
	auo.mutation.ClearAlbumCosplayers()
	return auo
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to AlbumCosplayer entities by IDs.
func (auo *AlbumUpdateOne) RemoveAlbumCosplayerIDs(ids ...int32) *AlbumUpdateOne {
	auo.mutation.RemoveAlbumCosplayerIDs(ids...)
	return auo
}

// RemoveAlbumCosplayers removes "album_cosplayers" edges to AlbumCosplayer entities.
func (auo *AlbumUpdateOne) RemoveAlbumCosplayers(a ...*AlbumCosplayer) *AlbumUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAlbumCosplayerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlbumUpdateOne) Select(field string, fields ...string) *AlbumUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Album entity.
func (auo *AlbumUpdateOne) Save(ctx context.Context) (*Album, error) {
	var (
		err  error
		node *Album
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlbumUpdateOne) SaveX(ctx context.Context) *Album {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlbumUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlbumUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AlbumUpdateOne) sqlSave(ctx context.Context) (_node *Album, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   album.Table,
			Columns: album.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: album.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Album.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, album.FieldID)
		for _, f := range fields {
			if !album.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != album.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldSlug,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldBody,
		})
	}
	if auo.mutation.BodyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: album.FieldBody,
		})
	}
	if value, ok := auo.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldPublishedAt,
		})
	}
	if auo.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldPublishedAt,
		})
	}
	if value, ok := auo.mutation.Private(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldPrivate,
		})
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: album.FieldUserID,
		})
	}
	if value, ok := auo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: album.FieldUserID,
		})
	}
	if auo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: album.FieldUserID,
		})
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldCreatedAt,
		})
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: album.FieldUpdatedAt,
		})
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: album.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.NotifyUsersOnPublished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: album.FieldNotifyUsersOnPublished,
		})
	}
	if value, ok := auo.mutation.MetaDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: album.FieldMetaDescription,
		})
	}
	if auo.mutation.AlbumCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAlbumCategoriesIDs(); len(nodes) > 0 && !auo.mutation.AlbumCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AlbumCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCategoriesTable,
			Columns: []string{album.AlbumCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAlbumCosplayersIDs(); len(nodes) > 0 && !auo.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AlbumCosplayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   album.AlbumCosplayersTable,
			Columns: []string{album.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Album{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{album.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
