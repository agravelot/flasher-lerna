// Code generated by entc, DO NOT EDIT.

package category

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMetaDescription holds the string denoting the meta_description field in the database.
	FieldMetaDescription = "meta_description"
	// EdgeAlbumCategories holds the string denoting the album_categories edge name in mutations.
	EdgeAlbumCategories = "album_categories"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// AlbumCategoriesTable is the table that holds the album_categories relation/edge.
	AlbumCategoriesTable = "album_category"
	// AlbumCategoriesInverseTable is the table name for the AlbumCategory entity.
	// It exists in this package in order to avoid circular dependency with the "albumcategory" package.
	AlbumCategoriesInverseTable = "album_category"
	// AlbumCategoriesColumn is the table column denoting the album_categories relation/edge.
	AlbumCategoriesColumn = "category_id"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMetaDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "categories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"album_categories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
