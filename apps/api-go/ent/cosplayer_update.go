// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/albumcosplayer"
	"api-go/ent/cosplayer"
	"api-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CosplayerUpdate is the builder for updating Cosplayer entities.
type CosplayerUpdate struct {
	config
	hooks    []Hook
	mutation *CosplayerMutation
}

// Where appends a list predicates to the CosplayerUpdate builder.
func (cu *CosplayerUpdate) Where(ps ...predicate.Cosplayer) *CosplayerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CosplayerUpdate) SetName(s string) *CosplayerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CosplayerUpdate) SetSlug(s string) *CosplayerUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CosplayerUpdate) SetDescription(s string) *CosplayerUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CosplayerUpdate) SetNillableDescription(s *string) *CosplayerUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CosplayerUpdate) ClearDescription() *CosplayerUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetPicture sets the "picture" field.
func (cu *CosplayerUpdate) SetPicture(s string) *CosplayerUpdate {
	cu.mutation.SetPicture(s)
	return cu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (cu *CosplayerUpdate) SetNillablePicture(s *string) *CosplayerUpdate {
	if s != nil {
		cu.SetPicture(*s)
	}
	return cu
}

// ClearPicture clears the value of the "picture" field.
func (cu *CosplayerUpdate) ClearPicture() *CosplayerUpdate {
	cu.mutation.ClearPicture()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CosplayerUpdate) SetUserID(i int) *CosplayerUpdate {
	cu.mutation.ResetUserID()
	cu.mutation.SetUserID(i)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CosplayerUpdate) SetNillableUserID(i *int) *CosplayerUpdate {
	if i != nil {
		cu.SetUserID(*i)
	}
	return cu
}

// AddUserID adds i to the "user_id" field.
func (cu *CosplayerUpdate) AddUserID(i int) *CosplayerUpdate {
	cu.mutation.AddUserID(i)
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CosplayerUpdate) ClearUserID() *CosplayerUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CosplayerUpdate) SetCreatedAt(t time.Time) *CosplayerUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CosplayerUpdate) SetNillableCreatedAt(t *time.Time) *CosplayerUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (cu *CosplayerUpdate) ClearCreatedAt() *CosplayerUpdate {
	cu.mutation.ClearCreatedAt()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CosplayerUpdate) SetUpdatedAt(t time.Time) *CosplayerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CosplayerUpdate) SetNillableUpdatedAt(t *time.Time) *CosplayerUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CosplayerUpdate) ClearUpdatedAt() *CosplayerUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (cu *CosplayerUpdate) AddAlbumCosplayerIDs(ids ...int32) *CosplayerUpdate {
	cu.mutation.AddAlbumCosplayerIDs(ids...)
	return cu
}

// AddAlbumCosplayers adds the "album_cosplayers" edges to the AlbumCosplayer entity.
func (cu *CosplayerUpdate) AddAlbumCosplayers(a ...*AlbumCosplayer) *CosplayerUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAlbumCosplayerIDs(ids...)
}

// Mutation returns the CosplayerMutation object of the builder.
func (cu *CosplayerUpdate) Mutation() *CosplayerMutation {
	return cu.mutation
}

// ClearAlbumCosplayers clears all "album_cosplayers" edges to the AlbumCosplayer entity.
func (cu *CosplayerUpdate) ClearAlbumCosplayers() *CosplayerUpdate {
	cu.mutation.ClearAlbumCosplayers()
	return cu
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to AlbumCosplayer entities by IDs.
func (cu *CosplayerUpdate) RemoveAlbumCosplayerIDs(ids ...int32) *CosplayerUpdate {
	cu.mutation.RemoveAlbumCosplayerIDs(ids...)
	return cu
}

// RemoveAlbumCosplayers removes "album_cosplayers" edges to AlbumCosplayer entities.
func (cu *CosplayerUpdate) RemoveAlbumCosplayers(a ...*AlbumCosplayer) *CosplayerUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAlbumCosplayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CosplayerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CosplayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CosplayerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CosplayerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CosplayerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CosplayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cosplayer.Table,
			Columns: cosplayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: cosplayer.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldName,
		})
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldSlug,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldDescription,
		})
	}
	if cu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cosplayer.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldPicture,
		})
	}
	if cu.mutation.PictureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cosplayer.FieldPicture,
		})
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cosplayer.FieldUserID,
		})
	}
	if value, ok := cu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cosplayer.FieldUserID,
		})
	}
	if cu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: cosplayer.FieldUserID,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cosplayer.FieldCreatedAt,
		})
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cosplayer.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cosplayer.FieldUpdatedAt,
		})
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cosplayer.FieldUpdatedAt,
		})
	}
	if cu.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAlbumCosplayersIDs(); len(nodes) > 0 && !cu.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AlbumCosplayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cosplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CosplayerUpdateOne is the builder for updating a single Cosplayer entity.
type CosplayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CosplayerMutation
}

// SetName sets the "name" field.
func (cuo *CosplayerUpdateOne) SetName(s string) *CosplayerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CosplayerUpdateOne) SetSlug(s string) *CosplayerUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CosplayerUpdateOne) SetDescription(s string) *CosplayerUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CosplayerUpdateOne) SetNillableDescription(s *string) *CosplayerUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CosplayerUpdateOne) ClearDescription() *CosplayerUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetPicture sets the "picture" field.
func (cuo *CosplayerUpdateOne) SetPicture(s string) *CosplayerUpdateOne {
	cuo.mutation.SetPicture(s)
	return cuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (cuo *CosplayerUpdateOne) SetNillablePicture(s *string) *CosplayerUpdateOne {
	if s != nil {
		cuo.SetPicture(*s)
	}
	return cuo
}

// ClearPicture clears the value of the "picture" field.
func (cuo *CosplayerUpdateOne) ClearPicture() *CosplayerUpdateOne {
	cuo.mutation.ClearPicture()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CosplayerUpdateOne) SetUserID(i int) *CosplayerUpdateOne {
	cuo.mutation.ResetUserID()
	cuo.mutation.SetUserID(i)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CosplayerUpdateOne) SetNillableUserID(i *int) *CosplayerUpdateOne {
	if i != nil {
		cuo.SetUserID(*i)
	}
	return cuo
}

// AddUserID adds i to the "user_id" field.
func (cuo *CosplayerUpdateOne) AddUserID(i int) *CosplayerUpdateOne {
	cuo.mutation.AddUserID(i)
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CosplayerUpdateOne) ClearUserID() *CosplayerUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CosplayerUpdateOne) SetCreatedAt(t time.Time) *CosplayerUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CosplayerUpdateOne) SetNillableCreatedAt(t *time.Time) *CosplayerUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (cuo *CosplayerUpdateOne) ClearCreatedAt() *CosplayerUpdateOne {
	cuo.mutation.ClearCreatedAt()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CosplayerUpdateOne) SetUpdatedAt(t time.Time) *CosplayerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CosplayerUpdateOne) SetNillableUpdatedAt(t *time.Time) *CosplayerUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CosplayerUpdateOne) ClearUpdatedAt() *CosplayerUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// AddAlbumCosplayerIDs adds the "album_cosplayers" edge to the AlbumCosplayer entity by IDs.
func (cuo *CosplayerUpdateOne) AddAlbumCosplayerIDs(ids ...int32) *CosplayerUpdateOne {
	cuo.mutation.AddAlbumCosplayerIDs(ids...)
	return cuo
}

// AddAlbumCosplayers adds the "album_cosplayers" edges to the AlbumCosplayer entity.
func (cuo *CosplayerUpdateOne) AddAlbumCosplayers(a ...*AlbumCosplayer) *CosplayerUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAlbumCosplayerIDs(ids...)
}

// Mutation returns the CosplayerMutation object of the builder.
func (cuo *CosplayerUpdateOne) Mutation() *CosplayerMutation {
	return cuo.mutation
}

// ClearAlbumCosplayers clears all "album_cosplayers" edges to the AlbumCosplayer entity.
func (cuo *CosplayerUpdateOne) ClearAlbumCosplayers() *CosplayerUpdateOne {
	cuo.mutation.ClearAlbumCosplayers()
	return cuo
}

// RemoveAlbumCosplayerIDs removes the "album_cosplayers" edge to AlbumCosplayer entities by IDs.
func (cuo *CosplayerUpdateOne) RemoveAlbumCosplayerIDs(ids ...int32) *CosplayerUpdateOne {
	cuo.mutation.RemoveAlbumCosplayerIDs(ids...)
	return cuo
}

// RemoveAlbumCosplayers removes "album_cosplayers" edges to AlbumCosplayer entities.
func (cuo *CosplayerUpdateOne) RemoveAlbumCosplayers(a ...*AlbumCosplayer) *CosplayerUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAlbumCosplayerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CosplayerUpdateOne) Select(field string, fields ...string) *CosplayerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cosplayer entity.
func (cuo *CosplayerUpdateOne) Save(ctx context.Context) (*Cosplayer, error) {
	var (
		err  error
		node *Cosplayer
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CosplayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CosplayerUpdateOne) SaveX(ctx context.Context) *Cosplayer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CosplayerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CosplayerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CosplayerUpdateOne) sqlSave(ctx context.Context) (_node *Cosplayer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cosplayer.Table,
			Columns: cosplayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: cosplayer.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cosplayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cosplayer.FieldID)
		for _, f := range fields {
			if !cosplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cosplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldName,
		})
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldSlug,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldDescription,
		})
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cosplayer.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cosplayer.FieldPicture,
		})
	}
	if cuo.mutation.PictureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cosplayer.FieldPicture,
		})
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cosplayer.FieldUserID,
		})
	}
	if value, ok := cuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cosplayer.FieldUserID,
		})
	}
	if cuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: cosplayer.FieldUserID,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cosplayer.FieldCreatedAt,
		})
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cosplayer.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cosplayer.FieldUpdatedAt,
		})
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cosplayer.FieldUpdatedAt,
		})
	}
	if cuo.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAlbumCosplayersIDs(); len(nodes) > 0 && !cuo.mutation.AlbumCosplayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AlbumCosplayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cosplayer.AlbumCosplayersTable,
			Columns: []string{cosplayer.AlbumCosplayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: albumcosplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cosplayer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cosplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
