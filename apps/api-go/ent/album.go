// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Album is the model entity for the Album schema.
type Album struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// NotifyUsersOnPublished holds the value of the "notify_users_on_published" field.
	NotifyUsersOnPublished bool `json:"notify_users_on_published,omitempty"`
	// MetaDescription holds the value of the "meta_description" field.
	MetaDescription string `json:"meta_description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlbumQuery when eager-loading is set.
	Edges AlbumEdges `json:"edges"`
}

// AlbumEdges holds the relations/edges for other nodes in the graph.
type AlbumEdges struct {
	// AlbumCategories holds the value of the album_categories edge.
	AlbumCategories []*AlbumCategory `json:"album_categories,omitempty"`
	// AlbumCosplayers holds the value of the album_cosplayers edge.
	AlbumCosplayers []*AlbumCosplayer `json:"album_cosplayers,omitempty"`
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AlbumCategoriesOrErr returns the AlbumCategories value or an error if the edge
// was not loaded in eager-loading.
func (e AlbumEdges) AlbumCategoriesOrErr() ([]*AlbumCategory, error) {
	if e.loadedTypes[0] {
		return e.AlbumCategories, nil
	}
	return nil, &NotLoadedError{edge: "album_categories"}
}

// AlbumCosplayersOrErr returns the AlbumCosplayers value or an error if the edge
// was not loaded in eager-loading.
func (e AlbumEdges) AlbumCosplayersOrErr() ([]*AlbumCosplayer, error) {
	if e.loadedTypes[1] {
		return e.AlbumCosplayers, nil
	}
	return nil, &NotLoadedError{edge: "album_cosplayers"}
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e AlbumEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[2] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Album) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case album.FieldPrivate, album.FieldNotifyUsersOnPublished:
			values[i] = new(sql.NullBool)
		case album.FieldID, album.FieldUserID:
			values[i] = new(sql.NullInt64)
		case album.FieldSlug, album.FieldTitle, album.FieldBody, album.FieldMetaDescription:
			values[i] = new(sql.NullString)
		case album.FieldPublishedAt, album.FieldCreatedAt, album.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Album", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Album fields.
func (a *Album) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case album.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int32(value.Int64)
		case album.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				a.Slug = value.String
			}
		case album.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case album.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				a.Body = value.String
			}
		case album.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				a.PublishedAt = value.Time
			}
		case album.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				a.Private = value.Bool
			}
		case album.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = int(value.Int64)
			}
		case album.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case album.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case album.FieldNotifyUsersOnPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notify_users_on_published", values[i])
			} else if value.Valid {
				a.NotifyUsersOnPublished = value.Bool
			}
		case album.FieldMetaDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta_description", values[i])
			} else if value.Valid {
				a.MetaDescription = value.String
			}
		}
	}
	return nil
}

// QueryAlbumCategories queries the "album_categories" edge of the Album entity.
func (a *Album) QueryAlbumCategories() *AlbumCategoryQuery {
	return (&AlbumClient{config: a.config}).QueryAlbumCategories(a)
}

// QueryAlbumCosplayers queries the "album_cosplayers" edge of the Album entity.
func (a *Album) QueryAlbumCosplayers() *AlbumCosplayerQuery {
	return (&AlbumClient{config: a.config}).QueryAlbumCosplayers(a)
}

// QueryCategories queries the "categories" edge of the Album entity.
func (a *Album) QueryCategories() *CategoryQuery {
	return (&AlbumClient{config: a.config}).QueryCategories(a)
}

// Update returns a builder for updating this Album.
// Note that you need to call Album.Unwrap() before calling this method if this Album
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Album) Update() *AlbumUpdateOne {
	return (&AlbumClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Album entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Album) Unwrap() *Album {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Album is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Album) String() string {
	var builder strings.Builder
	builder.WriteString("Album(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", slug=")
	builder.WriteString(a.Slug)
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", body=")
	builder.WriteString(a.Body)
	builder.WriteString(", published_at=")
	builder.WriteString(a.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", private=")
	builder.WriteString(fmt.Sprintf("%v", a.Private))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", notify_users_on_published=")
	builder.WriteString(fmt.Sprintf("%v", a.NotifyUsersOnPublished))
	builder.WriteString(", meta_description=")
	builder.WriteString(a.MetaDescription)
	builder.WriteByte(')')
	return builder.String()
}

// Albums is a parsable slice of Album.
type Albums []*Album

func (a Albums) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
