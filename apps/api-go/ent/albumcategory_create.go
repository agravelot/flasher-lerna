// Code generated by entc, DO NOT EDIT.

package ent

import (
	"api-go/ent/album"
	"api-go/ent/albumcategory"
	"api-go/ent/category"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AlbumCategoryCreate is the builder for creating a AlbumCategory entity.
type AlbumCategoryCreate struct {
	config
	mutation *AlbumCategoryMutation
	hooks    []Hook
}

// SetAlbumID sets the "album_id" field.
func (acc *AlbumCategoryCreate) SetAlbumID(i int32) *AlbumCategoryCreate {
	acc.mutation.SetAlbumID(i)
	return acc
}

// SetNillableAlbumID sets the "album_id" field if the given value is not nil.
func (acc *AlbumCategoryCreate) SetNillableAlbumID(i *int32) *AlbumCategoryCreate {
	if i != nil {
		acc.SetAlbumID(*i)
	}
	return acc
}

// SetCategoryID sets the "category_id" field.
func (acc *AlbumCategoryCreate) SetCategoryID(i int32) *AlbumCategoryCreate {
	acc.mutation.SetCategoryID(i)
	return acc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (acc *AlbumCategoryCreate) SetNillableCategoryID(i *int32) *AlbumCategoryCreate {
	if i != nil {
		acc.SetCategoryID(*i)
	}
	return acc
}

// SetCreatedAt sets the "created_at" field.
func (acc *AlbumCategoryCreate) SetCreatedAt(t time.Time) *AlbumCategoryCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AlbumCategoryCreate) SetNillableCreatedAt(t *time.Time) *AlbumCategoryCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AlbumCategoryCreate) SetUpdatedAt(t time.Time) *AlbumCategoryCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AlbumCategoryCreate) SetNillableUpdatedAt(t *time.Time) *AlbumCategoryCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AlbumCategoryCreate) SetID(i int32) *AlbumCategoryCreate {
	acc.mutation.SetID(i)
	return acc
}

// SetAlbum sets the "album" edge to the Album entity.
func (acc *AlbumCategoryCreate) SetAlbum(a *Album) *AlbumCategoryCreate {
	return acc.SetAlbumID(a.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (acc *AlbumCategoryCreate) SetCategory(c *Category) *AlbumCategoryCreate {
	return acc.SetCategoryID(c.ID)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (acc *AlbumCategoryCreate) Mutation() *AlbumCategoryMutation {
	return acc.mutation
}

// Save creates the AlbumCategory in the database.
func (acc *AlbumCategoryCreate) Save(ctx context.Context) (*AlbumCategory, error) {
	var (
		err  error
		node *AlbumCategory
	)
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlbumCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AlbumCategoryCreate) SaveX(ctx context.Context) *AlbumCategory {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AlbumCategoryCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AlbumCategoryCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AlbumCategoryCreate) check() error {
	return nil
}

func (acc *AlbumCategoryCreate) sqlSave(ctx context.Context) (*AlbumCategory, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (acc *AlbumCategoryCreate) createSpec() (*AlbumCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &AlbumCategory{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: albumcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: albumcategory.FieldID,
			},
		}
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: albumcategory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := acc.mutation.AlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.AlbumTable,
			Columns: []string{albumcategory.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AlbumID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albumcategory.CategoryTable,
			Columns: []string{albumcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AlbumCategoryCreateBulk is the builder for creating many AlbumCategory entities in bulk.
type AlbumCategoryCreateBulk struct {
	config
	builders []*AlbumCategoryCreate
}

// Save creates the AlbumCategory entities in the database.
func (accb *AlbumCategoryCreateBulk) Save(ctx context.Context) ([]*AlbumCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AlbumCategory, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlbumCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AlbumCategoryCreateBulk) SaveX(ctx context.Context) []*AlbumCategory {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AlbumCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AlbumCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
