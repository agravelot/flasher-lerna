/* tslint:disable */
/* eslint-disable */
/**
 * proto/articles/v1/articles.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlbumServiceUpdateRequest,
    AlbumServiceUpdateRequestFromJSON,
    AlbumServiceUpdateRequestToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1CreateRequest,
    V1CreateRequestFromJSON,
    V1CreateRequestToJSON,
    V1CreateResponse,
    V1CreateResponseFromJSON,
    V1CreateResponseToJSON,
    V1DeleteResponse,
    V1DeleteResponseFromJSON,
    V1DeleteResponseToJSON,
    V1GetBySlugResponse,
    V1GetBySlugResponseFromJSON,
    V1GetBySlugResponseToJSON,
    V1IndexResponse,
    V1IndexResponseFromJSON,
    V1IndexResponseToJSON,
    V1UpdateResponse,
    V1UpdateResponseFromJSON,
    V1UpdateResponseToJSON,
} from '../models';

export interface AlbumServiceCreateRequest {
    body: V1CreateRequest;
}

export interface AlbumServiceDeleteRequest {
    id: number;
}

export interface AlbumServiceGetBySlugRequest {
    slug: string;
}

export interface AlbumServiceIndexRequest {
    limit?: number;
    next?: number;
}

export interface AlbumServiceUpdateOperationRequest {
    id: number;
    body: AlbumServiceUpdateRequest;
}

/**
 * 
 */
export class AlbumsApi extends runtime.BaseAPI {

    /**
     * Add an album to the server.
     * Add an album
     */
    async albumServiceCreateRaw(requestParameters: AlbumServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling albumServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/albums`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateResponseFromJSON(jsonValue));
    }

    /**
     * Add an album to the server.
     * Add an album
     */
    async albumServiceCreate(requestParameters: AlbumServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateResponse> {
        const response = await this.albumServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an album to the server.
     * Delete an album
     */
    async albumServiceDeleteRaw(requestParameters: AlbumServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling albumServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/albums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an album to the server.
     * Delete an album
     */
    async albumServiceDelete(requestParameters: AlbumServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.albumServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an album to the server.
     * Create an album
     */
    async albumServiceGetBySlugRaw(requestParameters: AlbumServiceGetBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetBySlugResponse>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling albumServiceGetBySlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/albums/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetBySlugResponseFromJSON(jsonValue));
    }

    /**
     * Create an album to the server.
     * Create an album
     */
    async albumServiceGetBySlug(requestParameters: AlbumServiceGetBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetBySlugResponse> {
        const response = await this.albumServiceGetBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List albums to the server.
     * List albums
     */
    async albumServiceIndexRaw(requestParameters: AlbumServiceIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1IndexResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/albums`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1IndexResponseFromJSON(jsonValue));
    }

    /**
     * List albums to the server.
     * List albums
     */
    async albumServiceIndex(requestParameters: AlbumServiceIndexRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1IndexResponse> {
        const response = await this.albumServiceIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an album to the server.
     * Update an album
     */
    async albumServiceUpdateRaw(requestParameters: AlbumServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UpdateResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling albumServiceUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling albumServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/albums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumServiceUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an album to the server.
     * Update an album
     */
    async albumServiceUpdate(requestParameters: AlbumServiceUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UpdateResponse> {
        const response = await this.albumServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
