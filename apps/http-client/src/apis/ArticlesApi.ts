/* tslint:disable */
/* eslint-disable */
/**
 * proto/articles/v1/articles.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1CreateRequest,
    V1CreateRequestFromJSON,
    V1CreateRequestToJSON,
    V1CreateResponse,
    V1CreateResponseFromJSON,
    V1CreateResponseToJSON,
    V1DeleteResponse,
    V1DeleteResponseFromJSON,
    V1DeleteResponseToJSON,
    V1GetBySlugResponse,
    V1GetBySlugResponseFromJSON,
    V1GetBySlugResponseToJSON,
    V1IndexResponse,
    V1IndexResponseFromJSON,
    V1IndexResponseToJSON,
    V1UpdateRequest,
    V1UpdateRequestFromJSON,
    V1UpdateRequestToJSON,
    V1UpdateResponse,
    V1UpdateResponseFromJSON,
    V1UpdateResponseToJSON,
} from '../models';

export interface ArticleServiceCreateRequest {
    body: V1CreateRequest;
}

export interface ArticleServiceDeleteRequest {
    id: string;
}

export interface ArticleServiceGetBySlugRequest {
    slug: string;
}

export interface ArticleServiceIndexRequest {
    limit?: number;
    next?: number;
}

export interface ArticleServiceUpdateRequest {
    body: V1UpdateRequest;
}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI {

    /**
     * Add an article to the server.
     * Add an article
     */
    async articleServiceCreateRaw(requestParameters: ArticleServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling articleServiceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateResponseFromJSON(jsonValue));
    }

    /**
     * Add an article to the server.
     * Add an article
     */
    async articleServiceCreate(requestParameters: ArticleServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateResponse> {
        const response = await this.articleServiceCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an article to the server.
     * Delete an article
     */
    async articleServiceDeleteRaw(requestParameters: ArticleServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling articleServiceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an article to the server.
     * Delete an article
     */
    async articleServiceDelete(requestParameters: ArticleServiceDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteResponse> {
        const response = await this.articleServiceDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an article to the server.
     * Create an article
     */
    async articleServiceGetBySlugRaw(requestParameters: ArticleServiceGetBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetBySlugResponse>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling articleServiceGetBySlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/articles/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetBySlugResponseFromJSON(jsonValue));
    }

    /**
     * Create an article to the server.
     * Create an article
     */
    async articleServiceGetBySlug(requestParameters: ArticleServiceGetBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetBySlugResponse> {
        const response = await this.articleServiceGetBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List articles to the server.
     * List articles
     */
    async articleServiceIndexRaw(requestParameters: ArticleServiceIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1IndexResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.next !== undefined) {
            queryParameters['next'] = requestParameters.next;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1IndexResponseFromJSON(jsonValue));
    }

    /**
     * List articles to the server.
     * List articles
     */
    async articleServiceIndex(requestParameters: ArticleServiceIndexRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1IndexResponse> {
        const response = await this.articleServiceIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an article to the server.
     * Update an article
     */
    async articleServiceUpdateRaw(requestParameters: ArticleServiceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1UpdateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling articleServiceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/articles`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1UpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an article to the server.
     * Update an article
     */
    async articleServiceUpdate(requestParameters: ArticleServiceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1UpdateResponse> {
        const response = await this.articleServiceUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
