/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter ts_nocheck,eslint_disable,server_none,add_pb_suffix
// @generated from protobuf file "albums/v2/albums.proto" (package "albums.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Media } from "../../medias/v2/medias_pb";
import { Category } from "../../categories/v2/categories_pb";
import { Timestamp } from "../../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message albums.v2.AlbumResponse
 */
export interface AlbumResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string slug = 2;
     */
    slug: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string meta_description = 4;
     */
    metaDescription: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
    /**
     * @generated from protobuf field: string author_id = 7;
     */
    authorId: string;
    /**
     * @generated from protobuf field: bool private = 8;
     */
    private: boolean;
    /**
     * @generated from protobuf field: optional int64 user_id = 9;
     */
    userId?: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 10;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 11;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool notify_users_on_published = 12;
     */
    notifyUsersOnPublished: boolean;
    /**
     * TODO Can be optional
     *
     * @generated from protobuf field: repeated categories.v2.Category categories = 13;
     */
    categories: Category[];
    /**
     * @generated from protobuf field: repeated medias.v2.Media medias = 14;
     */
    medias: Media[];
}
/**
 * @generated from protobuf message albums.v2.GetBySlugRequest
 */
export interface GetBySlugRequest {
    /**
     * @generated from protobuf field: string slug = 1;
     */
    slug: string;
}
/**
 * @generated from protobuf message albums.v2.IndexRequest
 */
export interface IndexRequest {
    /**
     * @generated from protobuf field: optional int32 limit = 1;
     */
    limit?: number;
    /**
     * @generated from protobuf field: optional int32 next = 2;
     */
    next?: number;
    /**
     * @generated from protobuf field: optional albums.v2.IndexRequest.Joins joins = 3;
     */
    joins?: IndexRequest_Joins;
}
/**
 * @generated from protobuf message albums.v2.IndexRequest.Joins
 */
export interface IndexRequest_Joins {
    /**
     * @generated from protobuf field: bool categories = 1;
     */
    categories: boolean;
    /**
     * @generated from protobuf field: bool medias = 2;
     */
    medias: boolean;
}
/**
 * @generated from protobuf message albums.v2.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message albums.v2.IndexResponse
 */
export interface IndexResponse {
    /**
     * @generated from protobuf field: repeated albums.v2.AlbumResponse data = 1;
     */
    data: AlbumResponse[];
}
/**
 * @generated from protobuf message albums.v2.GetBySlugResponse
 */
export interface GetBySlugResponse {
    /**
     * @generated from protobuf field: albums.v2.AlbumResponse album = 1;
     */
    album?: AlbumResponse;
}
/**
 * @generated from protobuf message albums.v2.DeleteResponse
 */
export interface DeleteResponse {
    /**
     * @generated from protobuf field: bool deleted = 1;
     */
    deleted: boolean;
}
/**
 * @generated from protobuf message albums.v2.CreateResponse
 */
export interface CreateResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string slug = 2;
     */
    slug: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string meta_description = 4;
     */
    metaDescription: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
    /**
     * @generated from protobuf field: string author_id = 7;
     */
    authorId: string;
    /**
     * @generated from protobuf field: bool private = 8;
     */
    private: boolean;
    /**
     * @generated from protobuf field: optional int64 user_id = 9;
     */
    userId?: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 10;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 11;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool notify_users_on_published = 12;
     */
    notifyUsersOnPublished: boolean;
}
/**
 * @generated from protobuf message albums.v2.CreateRequest
 */
export interface CreateRequest {
    /**
     * @generated from protobuf field: string slug = 2;
     */
    slug: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string meta_description = 4;
     */
    metaDescription: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool private = 8;
     */
    private: boolean;
}
/**
 * @generated from protobuf message albums.v2.UpdateResponse
 */
export interface UpdateResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string slug = 2;
     */
    slug: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string meta_description = 4;
     */
    metaDescription: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
    /**
     * @generated from protobuf field: string author_id = 7;
     */
    authorId: string;
    /**
     * @generated from protobuf field: bool private = 8;
     */
    private: boolean;
    /**
     * @generated from protobuf field: optional int64 user_id = 9;
     */
    userId?: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 10;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 11;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool notify_users_on_published = 12;
     */
    notifyUsersOnPublished: boolean;
}
/**
 * @generated from protobuf message albums.v2.UpdateRequest
 */
export interface UpdateRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string slug = 2;
     */
    slug: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string meta_description = 4;
     */
    metaDescription: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool private = 8;
     */
    private: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class AlbumResponse$Type extends MessageType<AlbumResponse> {
    constructor() {
        super("albums.v2.AlbumResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "user_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 11, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 12, name: "notify_users_on_published", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category },
            { no: 14, name: "medias", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Media }
        ]);
    }
    create(value?: PartialMessage<AlbumResponse>): AlbumResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.slug = "";
        message.title = "";
        message.metaDescription = "";
        message.content = "";
        message.authorId = "";
        message.private = false;
        message.notifyUsersOnPublished = false;
        message.categories = [];
        message.medias = [];
        if (value !== undefined)
            reflectionMergePartial<AlbumResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlbumResponse): AlbumResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string slug */ 2:
                    message.slug = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string meta_description */ 4:
                    message.metaDescription = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                case /* string author_id */ 7:
                    message.authorId = reader.string();
                    break;
                case /* bool private */ 8:
                    message.private = reader.bool();
                    break;
                case /* optional int64 user_id */ 9:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_at */ 10:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 11:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* bool notify_users_on_published */ 12:
                    message.notifyUsersOnPublished = reader.bool();
                    break;
                case /* repeated categories.v2.Category categories */ 13:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated medias.v2.Media medias */ 14:
                    message.medias.push(Media.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlbumResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string slug = 2; */
        if (message.slug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slug);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string meta_description = 4; */
        if (message.metaDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metaDescription);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* optional google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string author_id = 7; */
        if (message.authorId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.authorId);
        /* bool private = 8; */
        if (message.private !== false)
            writer.tag(8, WireType.Varint).bool(message.private);
        /* optional int64 user_id = 9; */
        if (message.userId !== undefined)
            writer.tag(9, WireType.Varint).int64(message.userId);
        /* google.protobuf.Timestamp created_at = 10; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 11; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool notify_users_on_published = 12; */
        if (message.notifyUsersOnPublished !== false)
            writer.tag(12, WireType.Varint).bool(message.notifyUsersOnPublished);
        /* repeated categories.v2.Category categories = 13; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated medias.v2.Media medias = 14; */
        for (let i = 0; i < message.medias.length; i++)
            Media.internalBinaryWrite(message.medias[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.AlbumResponse
 */
export const AlbumResponse = new AlbumResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBySlugRequest$Type extends MessageType<GetBySlugRequest> {
    constructor() {
        super("albums.v2.GetBySlugRequest", [
            { no: 1, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBySlugRequest>): GetBySlugRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slug = "";
        if (value !== undefined)
            reflectionMergePartial<GetBySlugRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBySlugRequest): GetBySlugRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slug */ 1:
                    message.slug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBySlugRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slug = 1; */
        if (message.slug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.slug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.GetBySlugRequest
 */
export const GetBySlugRequest = new GetBySlugRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndexRequest$Type extends MessageType<IndexRequest> {
    constructor() {
        super("albums.v2.IndexRequest", [
            { no: 1, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "next", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "joins", kind: "message", T: () => IndexRequest_Joins }
        ]);
    }
    create(value?: PartialMessage<IndexRequest>): IndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexRequest): IndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* optional int32 next */ 2:
                    message.next = reader.int32();
                    break;
                case /* optional albums.v2.IndexRequest.Joins joins */ 3:
                    message.joins = IndexRequest_Joins.internalBinaryRead(reader, reader.uint32(), options, message.joins);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 limit = 1; */
        if (message.limit !== undefined)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* optional int32 next = 2; */
        if (message.next !== undefined)
            writer.tag(2, WireType.Varint).int32(message.next);
        /* optional albums.v2.IndexRequest.Joins joins = 3; */
        if (message.joins)
            IndexRequest_Joins.internalBinaryWrite(message.joins, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.IndexRequest
 */
export const IndexRequest = new IndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndexRequest_Joins$Type extends MessageType<IndexRequest_Joins> {
    constructor() {
        super("albums.v2.IndexRequest.Joins", [
            { no: 1, name: "categories", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "medias", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IndexRequest_Joins>): IndexRequest_Joins {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categories = false;
        message.medias = false;
        if (value !== undefined)
            reflectionMergePartial<IndexRequest_Joins>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexRequest_Joins): IndexRequest_Joins {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool categories */ 1:
                    message.categories = reader.bool();
                    break;
                case /* bool medias */ 2:
                    message.medias = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexRequest_Joins, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool categories = 1; */
        if (message.categories !== false)
            writer.tag(1, WireType.Varint).bool(message.categories);
        /* bool medias = 2; */
        if (message.medias !== false)
            writer.tag(2, WireType.Varint).bool(message.medias);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.IndexRequest.Joins
 */
export const IndexRequest_Joins = new IndexRequest_Joins$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("albums.v2.DeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndexResponse$Type extends MessageType<IndexResponse> {
    constructor() {
        super("albums.v2.IndexResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AlbumResponse }
        ]);
    }
    create(value?: PartialMessage<IndexResponse>): IndexResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<IndexResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexResponse): IndexResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated albums.v2.AlbumResponse data */ 1:
                    message.data.push(AlbumResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated albums.v2.AlbumResponse data = 1; */
        for (let i = 0; i < message.data.length; i++)
            AlbumResponse.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.IndexResponse
 */
export const IndexResponse = new IndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBySlugResponse$Type extends MessageType<GetBySlugResponse> {
    constructor() {
        super("albums.v2.GetBySlugResponse", [
            { no: 1, name: "album", kind: "message", T: () => AlbumResponse }
        ]);
    }
    create(value?: PartialMessage<GetBySlugResponse>): GetBySlugResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBySlugResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBySlugResponse): GetBySlugResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* albums.v2.AlbumResponse album */ 1:
                    message.album = AlbumResponse.internalBinaryRead(reader, reader.uint32(), options, message.album);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBySlugResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* albums.v2.AlbumResponse album = 1; */
        if (message.album)
            AlbumResponse.internalBinaryWrite(message.album, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.GetBySlugResponse
 */
export const GetBySlugResponse = new GetBySlugResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResponse$Type extends MessageType<DeleteResponse> {
    constructor() {
        super("albums.v2.DeleteResponse", [
            { no: 1, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteResponse>): DeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deleted = false;
        if (value !== undefined)
            reflectionMergePartial<DeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResponse): DeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool deleted */ 1:
                    message.deleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool deleted = 1; */
        if (message.deleted !== false)
            writer.tag(1, WireType.Varint).bool(message.deleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.DeleteResponse
 */
export const DeleteResponse = new DeleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("albums.v2.CreateResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "user_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 11, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 12, name: "notify_users_on_published", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.slug = "";
        message.title = "";
        message.metaDescription = "";
        message.content = "";
        message.authorId = "";
        message.private = false;
        message.notifyUsersOnPublished = false;
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string slug */ 2:
                    message.slug = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string meta_description */ 4:
                    message.metaDescription = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                case /* string author_id */ 7:
                    message.authorId = reader.string();
                    break;
                case /* bool private */ 8:
                    message.private = reader.bool();
                    break;
                case /* optional int64 user_id */ 9:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_at */ 10:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 11:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* bool notify_users_on_published */ 12:
                    message.notifyUsersOnPublished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string slug = 2; */
        if (message.slug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slug);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string meta_description = 4; */
        if (message.metaDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metaDescription);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* optional google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string author_id = 7; */
        if (message.authorId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.authorId);
        /* bool private = 8; */
        if (message.private !== false)
            writer.tag(8, WireType.Varint).bool(message.private);
        /* optional int64 user_id = 9; */
        if (message.userId !== undefined)
            writer.tag(9, WireType.Varint).int64(message.userId);
        /* google.protobuf.Timestamp created_at = 10; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 11; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool notify_users_on_published = 12; */
        if (message.notifyUsersOnPublished !== false)
            writer.tag(12, WireType.Varint).bool(message.notifyUsersOnPublished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequest$Type extends MessageType<CreateRequest> {
    constructor() {
        super("albums.v2.CreateRequest", [
            { no: 2, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "5", maxLen: "60" } } } },
            { no: 4, name: "meta_description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", maxLen: "255" } } } },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRequest>): CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slug = "";
        message.name = "";
        message.metaDescription = "";
        message.content = "";
        message.private = false;
        if (value !== undefined)
            reflectionMergePartial<CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequest): CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slug */ 2:
                    message.slug = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string meta_description */ 4:
                    message.metaDescription = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                case /* bool private */ 8:
                    message.private = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slug = 2; */
        if (message.slug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slug);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string meta_description = 4; */
        if (message.metaDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metaDescription);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* optional google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool private = 8; */
        if (message.private !== false)
            writer.tag(8, WireType.Varint).bool(message.private);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.CreateRequest
 */
export const CreateRequest = new CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends MessageType<UpdateResponse> {
    constructor() {
        super("albums.v2.UpdateResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "meta_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "user_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 11, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 12, name: "notify_users_on_published", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateResponse>): UpdateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.slug = "";
        message.title = "";
        message.metaDescription = "";
        message.content = "";
        message.authorId = "";
        message.private = false;
        message.notifyUsersOnPublished = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResponse): UpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string slug */ 2:
                    message.slug = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string meta_description */ 4:
                    message.metaDescription = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                case /* string author_id */ 7:
                    message.authorId = reader.string();
                    break;
                case /* bool private */ 8:
                    message.private = reader.bool();
                    break;
                case /* optional int64 user_id */ 9:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_at */ 10:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 11:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* bool notify_users_on_published */ 12:
                    message.notifyUsersOnPublished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string slug = 2; */
        if (message.slug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slug);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string meta_description = 4; */
        if (message.metaDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metaDescription);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* optional google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string author_id = 7; */
        if (message.authorId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.authorId);
        /* bool private = 8; */
        if (message.private !== false)
            writer.tag(8, WireType.Varint).bool(message.private);
        /* optional int64 user_id = 9; */
        if (message.userId !== undefined)
            writer.tag(9, WireType.Varint).int64(message.userId);
        /* google.protobuf.Timestamp created_at = 10; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 11; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool notify_users_on_published = 12; */
        if (message.notifyUsersOnPublished !== false)
            writer.tag(12, WireType.Varint).bool(message.notifyUsersOnPublished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.UpdateResponse
 */
export const UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends MessageType<UpdateRequest> {
    constructor() {
        super("albums.v2.UpdateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "5", maxLen: "60" } } } },
            { no: 4, name: "meta_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "private", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRequest>): UpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.slug = "";
        message.name = "";
        message.metaDescription = "";
        message.content = "";
        message.private = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequest): UpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string slug */ 2:
                    message.slug = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string meta_description */ 4:
                    message.metaDescription = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                case /* bool private */ 8:
                    message.private = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string slug = 2; */
        if (message.slug !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.slug);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string meta_description = 4; */
        if (message.metaDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metaDescription);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* optional google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool private = 8; */
        if (message.private !== false)
            writer.tag(8, WireType.Varint).bool(message.private);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message albums.v2.UpdateRequest
 */
export const UpdateRequest = new UpdateRequest$Type();
/**
 * @generated ServiceType for protobuf service albums.v2.AlbumService
 */
export const AlbumService = new ServiceType("albums.v2.AlbumService", [
    { name: "Index", options: { "google.api.http": { get: "/api/v2/albums" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Albums"], summary: "List albums", description: "List albums to the server." } }, I: IndexRequest, O: IndexResponse },
    { name: "GetBySlug", options: { "google.api.http": { get: "/api/v2/albums/{slug}" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Albums"], summary: "Create an album", description: "Create an album to the server." } }, I: GetBySlugRequest, O: GetBySlugResponse },
    { name: "Create", options: { "google.api.http": { post: "/api/v2/albums", body: "*" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Albums"], summary: "Add an album", description: "Add an album to the server." } }, I: CreateRequest, O: CreateResponse },
    { name: "Update", options: { "google.api.http": { put: "/api/v2/albums/{id}", body: "*" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Albums"], summary: "Update an album", description: "Update an album to the server." } }, I: UpdateRequest, O: UpdateResponse },
    { name: "Delete", options: { "google.api.http": { delete: "/api/v2/albums/{id}" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Albums"], summary: "Delete an album", description: "Delete an album to the server." } }, I: DeleteRequest, O: DeleteResponse }
]);
