/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter ts_nocheck,eslint_disable,server_none,add_pb_suffix
// @generated from protobuf file "medias/v2/medias.proto" (package "medias.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MediaService } from "./medias_pb";
import type { DeleteResponse } from "./medias_pb";
import type { DeleteRequest } from "./medias_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateResponse } from "./medias_pb";
import type { CreateRequest } from "./medias_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service medias.v2.MediaService
 */
export interface IMediaServiceClient {
    /**
     * @generated from protobuf rpc: Create(medias.v2.CreateRequest) returns (medias.v2.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Delete(medias.v2.DeleteRequest) returns (medias.v2.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
/**
 * @generated from protobuf service medias.v2.MediaService
 */
export class MediaServiceClient implements IMediaServiceClient, ServiceInfo {
    typeName = MediaService.typeName;
    methods = MediaService.methods;
    options = MediaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(medias.v2.CreateRequest) returns (medias.v2.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(medias.v2.DeleteRequest) returns (medias.v2.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
}
