/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter ts_nocheck,eslint_disable,server_none,add_pb_suffix
// @generated from protobuf file "medias/v2/medias.proto" (package "medias.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message medias.v2.Media
 */
export interface Media {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string file_name = 3;
     */
    fileName: string;
    /**
     * @generated from protobuf field: optional string mime_type = 4;
     */
    mimeType?: string;
    /**
     * @generated from protobuf field: int64 size = 5;
     */
    size: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: medias.v2.Media.CustomProperties custom_properties = 8;
     */
    customProperties?: Media_CustomProperties;
    /**
     * @generated from protobuf field: medias.v2.Media.ResponsiveImages responsive_images = 9;
     */
    responsiveImages?: Media_ResponsiveImages;
}
/**
 * @generated from protobuf message medias.v2.Media.CustomProperties
 */
export interface Media_CustomProperties {
    /**
     * @generated from protobuf field: int32 height = 1;
     */
    height: number;
    /**
     * @generated from protobuf field: int32 width = 2;
     */
    width: number;
}
/**
 * @generated from protobuf message medias.v2.Media.Responsive
 */
export interface Media_Responsive {
    /**
     * @generated from protobuf field: repeated string urls = 1;
     */
    urls: string[];
    /**
     * @generated from protobuf field: string base64_svg = 2;
     */
    base64Svg: string;
}
/**
 * @generated from protobuf message medias.v2.Media.ResponsiveImages
 */
export interface Media_ResponsiveImages {
    /**
     * @generated from protobuf field: medias.v2.Media.Responsive responsive = 1;
     */
    responsive?: Media_Responsive;
}
/**
 * @generated from protobuf message medias.v2.CreateRequest
 */
export interface CreateRequest {
    /**
     * @generated from protobuf field: repeated string fileNames = 1;
     */
    fileNames: string[];
    /**
     * @generated from protobuf field: int32 resourceID = 2;
     */
    resourceID: number;
    /**
     * @generated from protobuf field: medias.v2.MediasResourceType type = 3;
     */
    type: MediasResourceType;
}
/**
 * @generated from protobuf message medias.v2.CreateResponse
 */
export interface CreateResponse {
    /**
     * @generated from protobuf field: map<string, string> FileUploadUrls = 1 [json_name = "FileUploadUrls"];
     */
    fileUploadUrls: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message medias.v2.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message medias.v2.DeleteResponse
 */
export interface DeleteResponse {
}
/**
 * @generated from protobuf enum medias.v2.MediasResourceType
 */
export enum MediasResourceType {
    /**
     * @generated from protobuf enum value: RESOURCE_TYPE_UNSPECIFIED = 0;
     */
    RESOURCE_TYPE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ALBUMS = 1;
     */
    ALBUMS = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Media$Type extends MessageType<Media> {
    constructor() {
        super("medias.v2.Media", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mime_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "custom_properties", kind: "message", T: () => Media_CustomProperties },
            { no: 9, name: "responsive_images", kind: "message", T: () => Media_ResponsiveImages }
        ]);
    }
    create(value?: PartialMessage<Media>): Media {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.fileName = "";
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<Media>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Media): Media {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string file_name */ 3:
                    message.fileName = reader.string();
                    break;
                case /* optional string mime_type */ 4:
                    message.mimeType = reader.string();
                    break;
                case /* int64 size */ 5:
                    message.size = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* medias.v2.Media.CustomProperties custom_properties */ 8:
                    message.customProperties = Media_CustomProperties.internalBinaryRead(reader, reader.uint32(), options, message.customProperties);
                    break;
                case /* medias.v2.Media.ResponsiveImages responsive_images */ 9:
                    message.responsiveImages = Media_ResponsiveImages.internalBinaryRead(reader, reader.uint32(), options, message.responsiveImages);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Media, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string file_name = 3; */
        if (message.fileName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fileName);
        /* optional string mime_type = 4; */
        if (message.mimeType !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.mimeType);
        /* int64 size = 5; */
        if (message.size !== 0n)
            writer.tag(5, WireType.Varint).int64(message.size);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* medias.v2.Media.CustomProperties custom_properties = 8; */
        if (message.customProperties)
            Media_CustomProperties.internalBinaryWrite(message.customProperties, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* medias.v2.Media.ResponsiveImages responsive_images = 9; */
        if (message.responsiveImages)
            Media_ResponsiveImages.internalBinaryWrite(message.responsiveImages, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.Media
 */
export const Media = new Media$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Media_CustomProperties$Type extends MessageType<Media_CustomProperties> {
    constructor() {
        super("medias.v2.Media.CustomProperties", [
            { no: 1, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Media_CustomProperties>): Media_CustomProperties {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.height = 0;
        message.width = 0;
        if (value !== undefined)
            reflectionMergePartial<Media_CustomProperties>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Media_CustomProperties): Media_CustomProperties {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 height */ 1:
                    message.height = reader.int32();
                    break;
                case /* int32 width */ 2:
                    message.width = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Media_CustomProperties, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 height = 1; */
        if (message.height !== 0)
            writer.tag(1, WireType.Varint).int32(message.height);
        /* int32 width = 2; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).int32(message.width);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.Media.CustomProperties
 */
export const Media_CustomProperties = new Media_CustomProperties$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Media_Responsive$Type extends MessageType<Media_Responsive> {
    constructor() {
        super("medias.v2.Media.Responsive", [
            { no: 1, name: "urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "base64_svg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Media_Responsive>): Media_Responsive {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.urls = [];
        message.base64Svg = "";
        if (value !== undefined)
            reflectionMergePartial<Media_Responsive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Media_Responsive): Media_Responsive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string urls */ 1:
                    message.urls.push(reader.string());
                    break;
                case /* string base64_svg */ 2:
                    message.base64Svg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Media_Responsive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string urls = 1; */
        for (let i = 0; i < message.urls.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.urls[i]);
        /* string base64_svg = 2; */
        if (message.base64Svg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.base64Svg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.Media.Responsive
 */
export const Media_Responsive = new Media_Responsive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Media_ResponsiveImages$Type extends MessageType<Media_ResponsiveImages> {
    constructor() {
        super("medias.v2.Media.ResponsiveImages", [
            { no: 1, name: "responsive", kind: "message", T: () => Media_Responsive }
        ]);
    }
    create(value?: PartialMessage<Media_ResponsiveImages>): Media_ResponsiveImages {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Media_ResponsiveImages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Media_ResponsiveImages): Media_ResponsiveImages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* medias.v2.Media.Responsive responsive */ 1:
                    message.responsive = Media_Responsive.internalBinaryRead(reader, reader.uint32(), options, message.responsive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Media_ResponsiveImages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* medias.v2.Media.Responsive responsive = 1; */
        if (message.responsive)
            Media_Responsive.internalBinaryWrite(message.responsive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.Media.ResponsiveImages
 */
export const Media_ResponsiveImages = new Media_ResponsiveImages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequest$Type extends MessageType<CreateRequest> {
    constructor() {
        super("medias.v2.CreateRequest", [
            { no: 1, name: "fileNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resourceID", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["medias.v2.MediasResourceType", MediasResourceType] }
        ]);
    }
    create(value?: PartialMessage<CreateRequest>): CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileNames = [];
        message.resourceID = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequest): CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string fileNames */ 1:
                    message.fileNames.push(reader.string());
                    break;
                case /* int32 resourceID */ 2:
                    message.resourceID = reader.int32();
                    break;
                case /* medias.v2.MediasResourceType type */ 3:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string fileNames = 1; */
        for (let i = 0; i < message.fileNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.fileNames[i]);
        /* int32 resourceID = 2; */
        if (message.resourceID !== 0)
            writer.tag(2, WireType.Varint).int32(message.resourceID);
        /* medias.v2.MediasResourceType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.CreateRequest
 */
export const CreateRequest = new CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("medias.v2.CreateResponse", [
            { no: 1, name: "FileUploadUrls", kind: "map", jsonName: "FileUploadUrls", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileUploadUrls = {};
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> FileUploadUrls = 1 [json_name = "FileUploadUrls"];*/ 1:
                    this.binaryReadMap1(message.fileUploadUrls, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: CreateResponse["fileUploadUrls"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateResponse["fileUploadUrls"] | undefined, val: CreateResponse["fileUploadUrls"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field medias.v2.CreateResponse.FileUploadUrls");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> FileUploadUrls = 1 [json_name = "FileUploadUrls"]; */
        for (let k of globalThis.Object.keys(message.fileUploadUrls))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.fileUploadUrls[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("medias.v2.DeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResponse$Type extends MessageType<DeleteResponse> {
    constructor() {
        super("medias.v2.DeleteResponse", []);
    }
    create(value?: PartialMessage<DeleteResponse>): DeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResponse): DeleteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message medias.v2.DeleteResponse
 */
export const DeleteResponse = new DeleteResponse$Type();
/**
 * @generated ServiceType for protobuf service medias.v2.MediaService
 */
export const MediaService = new ServiceType("medias.v2.MediaService", [
    { name: "Create", options: { "google.api.http": { post: "/api/v2/medias", body: "*" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Medias"], summary: "Add an media", description: "Add an media  to the server." } }, I: CreateRequest, O: CreateResponse },
    { name: "Delete", options: { "google.api.http": { delete: "/api/v2/medias/{id}" }, "grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation": { tags: ["Medias"], summary: "Delete an media", description: "Delete an media to the server." } }, I: DeleteRequest, O: DeleteResponse }
]);
