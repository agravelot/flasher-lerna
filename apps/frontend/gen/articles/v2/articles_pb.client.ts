/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter ts_nocheck,eslint_disable,server_none,add_pb_suffix
// @generated from protobuf file "articles/v2/articles.proto" (package "articles.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ArticleService } from "./articles_pb";
import type { DeleteResponse } from "./articles_pb";
import type { DeleteRequest } from "./articles_pb";
import type { UpdateResponse } from "./articles_pb";
import type { UpdateRequest } from "./articles_pb";
import type { CreateResponse } from "./articles_pb";
import type { CreateRequest } from "./articles_pb";
import type { GetBySlugResponse } from "./articles_pb";
import type { GetBySlugRequest } from "./articles_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { IndexResponse } from "./articles_pb";
import type { IndexRequest } from "./articles_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service articles.v2.ArticleService
 */
export interface IArticleServiceClient {
    /**
     * @generated from protobuf rpc: Index(articles.v2.IndexRequest) returns (articles.v2.IndexResponse);
     */
    index(input: IndexRequest, options?: RpcOptions): UnaryCall<IndexRequest, IndexResponse>;
    /**
     * @generated from protobuf rpc: GetBySlug(articles.v2.GetBySlugRequest) returns (articles.v2.GetBySlugResponse);
     */
    getBySlug(input: GetBySlugRequest, options?: RpcOptions): UnaryCall<GetBySlugRequest, GetBySlugResponse>;
    /**
     * @generated from protobuf rpc: Create(articles.v2.CreateRequest) returns (articles.v2.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Update(articles.v2.UpdateRequest) returns (articles.v2.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Delete(articles.v2.DeleteRequest) returns (articles.v2.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
/**
 * @generated from protobuf service articles.v2.ArticleService
 */
export class ArticleServiceClient implements IArticleServiceClient, ServiceInfo {
    typeName = ArticleService.typeName;
    methods = ArticleService.methods;
    options = ArticleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Index(articles.v2.IndexRequest) returns (articles.v2.IndexResponse);
     */
    index(input: IndexRequest, options?: RpcOptions): UnaryCall<IndexRequest, IndexResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<IndexRequest, IndexResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBySlug(articles.v2.GetBySlugRequest) returns (articles.v2.GetBySlugResponse);
     */
    getBySlug(input: GetBySlugRequest, options?: RpcOptions): UnaryCall<GetBySlugRequest, GetBySlugResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBySlugRequest, GetBySlugResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(articles.v2.CreateRequest) returns (articles.v2.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(articles.v2.UpdateRequest) returns (articles.v2.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(articles.v2.DeleteRequest) returns (articles.v2.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
}
